
HCSR04_Lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e34  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008fcc  08008fcc  00018fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fe8  08008fe8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008fe8  08008fe8  00018fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ff0  08008ff0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ff0  08008ff0  00018ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ff4  08008ff4  00018ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ca0  20000090  08009088  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d30  08009088  00020d30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5af  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000402f  00000000  00000000  0003b66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  0003f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f0  00000000  00000000  00040e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005d33  00000000  00000000  00042420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d924  00000000  00000000  00048153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000974c0  00000000  00000000  00065a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fcf37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006660  00000000  00000000  000fcf88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008fb4 	.word	0x08008fb4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08008fb4 	.word	0x08008fb4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fe84 	bl	80011ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f81a 	bl	800051c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e8:	f000 f880 	bl	80005ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f9ac 	bl	8000848 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004f0:	f000 f89c 	bl	800062c <MX_I2C1_Init>
  MX_I2S2_Init();
 80004f4:	f000 f8c8 	bl	8000688 <MX_I2S2_Init>
  MX_I2S3_Init();
 80004f8:	f000 f8f4 	bl	80006e4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004fc:	f000 f922 	bl	8000744 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000500:	f008 f910 	bl	8008724 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000504:	f000 f954 	bl	80007b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the display
 8000508:	f000 fa80 	bl	8000a0c <SSD1306_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800050c:	4802      	ldr	r0, [pc, #8]	; (8000518 <main+0x3c>)
 800050e:	f004 fe83 	bl	8005218 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
    while (1)
    {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000512:	f008 f92d 	bl	8008770 <MX_USB_HOST_Process>
 8000516:	e7fc      	b.n	8000512 <main+0x36>
 8000518:	200001e8 	.word	0x200001e8

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f008 fc3c 	bl	8008da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b27      	ldr	r3, [pc, #156]	; (80005e4 <SystemClock_Config+0xc8>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a26      	ldr	r2, [pc, #152]	; (80005e4 <SystemClock_Config+0xc8>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b24      	ldr	r3, [pc, #144]	; (80005e4 <SystemClock_Config+0xc8>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <SystemClock_Config+0xcc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a20      	ldr	r2, [pc, #128]	; (80005e8 <SystemClock_Config+0xcc>)
 8000566:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <SystemClock_Config+0xcc>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800058c:	2304      	movs	r3, #4
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000590:	23c0      	movs	r3, #192	; 0xc0
 8000592:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000594:	2304      	movs	r3, #4
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000598:	2308      	movs	r3, #8
 800059a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f003 ff8d 	bl	80044c0 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ac:	f000 fa28 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2302      	movs	r3, #2
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	2103      	movs	r1, #3
 80005cc:	4618      	mov	r0, r3
 80005ce:	f004 f9ef 	bl	80049b0 <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005d8:	f000 fa12 	bl	8000a00 <Error_Handler>
  }
}
 80005dc:	bf00      	nop
 80005de:	3750      	adds	r7, #80	; 0x50
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
 8000600:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000602:	2301      	movs	r3, #1
 8000604:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000606:	23c8      	movs	r3, #200	; 0xc8
 8000608:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800060a:	2305      	movs	r3, #5
 800060c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800060e:	2302      	movs	r3, #2
 8000610:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000612:	463b      	mov	r3, r7
 8000614:	4618      	mov	r0, r3
 8000616:	f004 fbd7 	bl	8004dc8 <HAL_RCCEx_PeriphCLKConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000620:	f000 f9ee 	bl	8000a00 <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3718      	adds	r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_I2C1_Init+0x50>)
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <MX_I2C1_Init+0x54>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_I2C1_Init+0x50>)
 8000638:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_I2C1_Init+0x58>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_I2C1_Init+0x50>)
 800064a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_I2C1_Init+0x50>)
 800066a:	f002 fd0f 	bl	800308c <HAL_I2C_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 f9c4 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200000ac 	.word	0x200000ac
 8000680:	40005400 	.word	0x40005400
 8000684:	00061a80 	.word	0x00061a80

08000688 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2S2_Init+0x50>)
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <MX_I2S2_Init+0x54>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_I2S2_Init+0x50>)
 8000694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000698:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2S2_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006a0:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_I2S2_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_I2S2_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_I2S2_Init+0x50>)
 80006ae:	4a0c      	ldr	r2, [pc, #48]	; (80006e0 <MX_I2S2_Init+0x58>)
 80006b0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_I2S2_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_I2S2_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_I2S2_Init+0x50>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_I2S2_Init+0x50>)
 80006c6:	f003 fa5b 	bl	8003b80 <HAL_I2S_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80006d0:	f000 f996 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000100 	.word	0x20000100
 80006dc:	40003800 	.word	0x40003800
 80006e0:	00017700 	.word	0x00017700

080006e4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_I2S3_Init+0x54>)
 80006ea:	4a14      	ldr	r2, [pc, #80]	; (800073c <MX_I2S3_Init+0x58>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2S3_Init+0x54>)
 80006f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_I2S3_Init+0x54>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_I2S3_Init+0x54>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_I2S3_Init+0x54>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_I2S3_Init+0x54>)
 800070c:	4a0c      	ldr	r2, [pc, #48]	; (8000740 <MX_I2S3_Init+0x5c>)
 800070e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_I2S3_Init+0x54>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_I2S3_Init+0x54>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_I2S3_Init+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_I2S3_Init+0x54>)
 8000724:	f003 fa2c 	bl	8003b80 <HAL_I2S_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800072e:	f000 f967 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000148 	.word	0x20000148
 800073c:	40003c00 	.word	0x40003c00
 8000740:	00017700 	.word	0x00017700

08000744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_SPI1_Init+0x64>)
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_SPI1_Init+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000790:	220a      	movs	r2, #10
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_SPI1_Init+0x64>)
 8000796:	f004 fc67 	bl	8005068 <HAL_SPI_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 f92e 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000190 	.word	0x20000190
 80007ac:	40013000 	.word	0x40013000

080007b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c4:	463b      	mov	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_TIM2_Init+0x94>)
 80007ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9600-1;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_TIM2_Init+0x94>)
 80007d6:	f242 527f 	movw	r2, #9599	; 0x257f
 80007da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_TIM2_Init+0x94>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_TIM2_Init+0x94>)
 80007e4:	2264      	movs	r2, #100	; 0x64
 80007e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_TIM2_Init+0x94>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_TIM2_Init+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f4:	4813      	ldr	r0, [pc, #76]	; (8000844 <MX_TIM2_Init+0x94>)
 80007f6:	f004 fcc0 	bl	800517a <HAL_TIM_Base_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000800:	f000 f8fe 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	4619      	mov	r1, r3
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <MX_TIM2_Init+0x94>)
 8000812:	f004 fd63 	bl	80052dc <HAL_TIM_ConfigClockSource>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800081c:	f000 f8f0 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000820:	2300      	movs	r3, #0
 8000822:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_TIM2_Init+0x94>)
 800082e:	f004 ff37 	bl	80056a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000838:	f000 f8e2 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200001e8 	.word	0x200001e8

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	; 0x30
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
 8000862:	4b62      	ldr	r3, [pc, #392]	; (80009ec <MX_GPIO_Init+0x1a4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a61      	ldr	r2, [pc, #388]	; (80009ec <MX_GPIO_Init+0x1a4>)
 8000868:	f043 0310 	orr.w	r3, r3, #16
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b5f      	ldr	r3, [pc, #380]	; (80009ec <MX_GPIO_Init+0x1a4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0310 	and.w	r3, r3, #16
 8000876:	61bb      	str	r3, [r7, #24]
 8000878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	4b5b      	ldr	r3, [pc, #364]	; (80009ec <MX_GPIO_Init+0x1a4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a5a      	ldr	r2, [pc, #360]	; (80009ec <MX_GPIO_Init+0x1a4>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b58      	ldr	r3, [pc, #352]	; (80009ec <MX_GPIO_Init+0x1a4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b54      	ldr	r3, [pc, #336]	; (80009ec <MX_GPIO_Init+0x1a4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a53      	ldr	r2, [pc, #332]	; (80009ec <MX_GPIO_Init+0x1a4>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b51      	ldr	r3, [pc, #324]	; (80009ec <MX_GPIO_Init+0x1a4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b4d      	ldr	r3, [pc, #308]	; (80009ec <MX_GPIO_Init+0x1a4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a4c      	ldr	r2, [pc, #304]	; (80009ec <MX_GPIO_Init+0x1a4>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b4a      	ldr	r3, [pc, #296]	; (80009ec <MX_GPIO_Init+0x1a4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	4b46      	ldr	r3, [pc, #280]	; (80009ec <MX_GPIO_Init+0x1a4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a45      	ldr	r2, [pc, #276]	; (80009ec <MX_GPIO_Init+0x1a4>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b43      	ldr	r3, [pc, #268]	; (80009ec <MX_GPIO_Init+0x1a4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b3f      	ldr	r3, [pc, #252]	; (80009ec <MX_GPIO_Init+0x1a4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a3e      	ldr	r2, [pc, #248]	; (80009ec <MX_GPIO_Init+0x1a4>)
 80008f4:	f043 0308 	orr.w	r3, r3, #8
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b3c      	ldr	r3, [pc, #240]	; (80009ec <MX_GPIO_Init+0x1a4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0308 	and.w	r3, r3, #8
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2108      	movs	r1, #8
 800090a:	4839      	ldr	r0, [pc, #228]	; (80009f0 <MX_GPIO_Init+0x1a8>)
 800090c:	f000 ff9a 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000910:	2201      	movs	r2, #1
 8000912:	2101      	movs	r1, #1
 8000914:	4837      	ldr	r0, [pc, #220]	; (80009f4 <MX_GPIO_Init+0x1ac>)
 8000916:	f000 ff95 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Trigger_Pin|LD4_Pin|LD3_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f643 0110 	movw	r1, #14352	; 0x3810
 8000920:	4835      	ldr	r0, [pc, #212]	; (80009f8 <MX_GPIO_Init+0x1b0>)
 8000922:	f000 ff8f 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000926:	2304      	movs	r3, #4
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	482d      	ldr	r0, [pc, #180]	; (80009f0 <MX_GPIO_Init+0x1a8>)
 800093a:	f000 fdff 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800093e:	2308      	movs	r3, #8
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4826      	ldr	r0, [pc, #152]	; (80009f0 <MX_GPIO_Init+0x1a8>)
 8000956:	f000 fdf1 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800095a:	2332      	movs	r3, #50	; 0x32
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800095e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4820      	ldr	r0, [pc, #128]	; (80009f0 <MX_GPIO_Init+0x1a8>)
 8000970:	f000 fde4 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000974:	2301      	movs	r3, #1
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	481a      	ldr	r0, [pc, #104]	; (80009f4 <MX_GPIO_Init+0x1ac>)
 800098c:	f000 fdd6 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000990:	2301      	movs	r3, #1
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000994:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4815      	ldr	r0, [pc, #84]	; (80009fc <MX_GPIO_Init+0x1b4>)
 80009a6:	f000 fdc9 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pins : Trigger_Pin LD4_Pin LD3_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin|LD4_Pin|LD3_Pin|Audio_RST_Pin;
 80009aa:	f643 0310 	movw	r3, #14352	; 0x3810
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	480d      	ldr	r0, [pc, #52]	; (80009f8 <MX_GPIO_Init+0x1b0>)
 80009c4:	f000 fdba 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin|OTG_FS_OverCurrent_Pin;
 80009c8:	f248 0320 	movw	r3, #32800	; 0x8020
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4806      	ldr	r0, [pc, #24]	; (80009f8 <MX_GPIO_Init+0x1b0>)
 80009de:	f000 fdad 	bl	800153c <HAL_GPIO_Init>

}
 80009e2:	bf00      	nop
 80009e4:	3730      	adds	r7, #48	; 0x30
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020c00 	.word	0x40020c00
 80009fc:	40020000 	.word	0x40020000

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000a12:	f000 f905 	bl	8000c20 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000a16:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2178      	movs	r1, #120	; 0x78
 8000a1e:	485b      	ldr	r0, [pc, #364]	; (8000b8c <SSD1306_Init+0x180>)
 8000a20:	f002 fd76 	bl	8003510 <HAL_I2C_IsDeviceReady>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e0a9      	b.n	8000b82 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000a2e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000a32:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a34:	e002      	b.n	8000a3c <SSD1306_Init+0x30>
		p--;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1f9      	bne.n	8000a36 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000a42:	22ae      	movs	r2, #174	; 0xae
 8000a44:	2100      	movs	r1, #0
 8000a46:	2078      	movs	r0, #120	; 0x78
 8000a48:	f000 f966 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000a4c:	2220      	movs	r2, #32
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2078      	movs	r0, #120	; 0x78
 8000a52:	f000 f961 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000a56:	2210      	movs	r2, #16
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2078      	movs	r0, #120	; 0x78
 8000a5c:	f000 f95c 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a60:	22b0      	movs	r2, #176	; 0xb0
 8000a62:	2100      	movs	r1, #0
 8000a64:	2078      	movs	r0, #120	; 0x78
 8000a66:	f000 f957 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000a6a:	22c8      	movs	r2, #200	; 0xc8
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2078      	movs	r0, #120	; 0x78
 8000a70:	f000 f952 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000a74:	2200      	movs	r2, #0
 8000a76:	2100      	movs	r1, #0
 8000a78:	2078      	movs	r0, #120	; 0x78
 8000a7a:	f000 f94d 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000a7e:	2210      	movs	r2, #16
 8000a80:	2100      	movs	r1, #0
 8000a82:	2078      	movs	r0, #120	; 0x78
 8000a84:	f000 f948 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000a88:	2240      	movs	r2, #64	; 0x40
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2078      	movs	r0, #120	; 0x78
 8000a8e:	f000 f943 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000a92:	2281      	movs	r2, #129	; 0x81
 8000a94:	2100      	movs	r1, #0
 8000a96:	2078      	movs	r0, #120	; 0x78
 8000a98:	f000 f93e 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000a9c:	22ff      	movs	r2, #255	; 0xff
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2078      	movs	r0, #120	; 0x78
 8000aa2:	f000 f939 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000aa6:	22a1      	movs	r2, #161	; 0xa1
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2078      	movs	r0, #120	; 0x78
 8000aac:	f000 f934 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000ab0:	22a6      	movs	r2, #166	; 0xa6
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2078      	movs	r0, #120	; 0x78
 8000ab6:	f000 f92f 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000aba:	22a8      	movs	r2, #168	; 0xa8
 8000abc:	2100      	movs	r1, #0
 8000abe:	2078      	movs	r0, #120	; 0x78
 8000ac0:	f000 f92a 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000ac4:	223f      	movs	r2, #63	; 0x3f
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2078      	movs	r0, #120	; 0x78
 8000aca:	f000 f925 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ace:	22a4      	movs	r2, #164	; 0xa4
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2078      	movs	r0, #120	; 0x78
 8000ad4:	f000 f920 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000ad8:	22d3      	movs	r2, #211	; 0xd3
 8000ada:	2100      	movs	r1, #0
 8000adc:	2078      	movs	r0, #120	; 0x78
 8000ade:	f000 f91b 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2078      	movs	r0, #120	; 0x78
 8000ae8:	f000 f916 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000aec:	22d5      	movs	r2, #213	; 0xd5
 8000aee:	2100      	movs	r1, #0
 8000af0:	2078      	movs	r0, #120	; 0x78
 8000af2:	f000 f911 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000af6:	22f0      	movs	r2, #240	; 0xf0
 8000af8:	2100      	movs	r1, #0
 8000afa:	2078      	movs	r0, #120	; 0x78
 8000afc:	f000 f90c 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000b00:	22d9      	movs	r2, #217	; 0xd9
 8000b02:	2100      	movs	r1, #0
 8000b04:	2078      	movs	r0, #120	; 0x78
 8000b06:	f000 f907 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000b0a:	2222      	movs	r2, #34	; 0x22
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2078      	movs	r0, #120	; 0x78
 8000b10:	f000 f902 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000b14:	22da      	movs	r2, #218	; 0xda
 8000b16:	2100      	movs	r1, #0
 8000b18:	2078      	movs	r0, #120	; 0x78
 8000b1a:	f000 f8fd 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000b1e:	2212      	movs	r2, #18
 8000b20:	2100      	movs	r1, #0
 8000b22:	2078      	movs	r0, #120	; 0x78
 8000b24:	f000 f8f8 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000b28:	22db      	movs	r2, #219	; 0xdb
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2078      	movs	r0, #120	; 0x78
 8000b2e:	f000 f8f3 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000b32:	2220      	movs	r2, #32
 8000b34:	2100      	movs	r1, #0
 8000b36:	2078      	movs	r0, #120	; 0x78
 8000b38:	f000 f8ee 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000b3c:	228d      	movs	r2, #141	; 0x8d
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2078      	movs	r0, #120	; 0x78
 8000b42:	f000 f8e9 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000b46:	2214      	movs	r2, #20
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2078      	movs	r0, #120	; 0x78
 8000b4c:	f000 f8e4 	bl	8000d18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000b50:	22af      	movs	r2, #175	; 0xaf
 8000b52:	2100      	movs	r1, #0
 8000b54:	2078      	movs	r0, #120	; 0x78
 8000b56:	f000 f8df 	bl	8000d18 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000b5a:	222e      	movs	r2, #46	; 0x2e
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2078      	movs	r0, #120	; 0x78
 8000b60:	f000 f8da 	bl	8000d18 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000b64:	2000      	movs	r0, #0
 8000b66:	f000 f843 	bl	8000bf0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000b6a:	f000 f813 	bl	8000b94 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <SSD1306_Init+0x184>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <SSD1306_Init+0x184>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <SSD1306_Init+0x184>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000b80:	2301      	movs	r3, #1
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000ac 	.word	0x200000ac
 8000b90:	20000630 	.word	0x20000630

08000b94 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	71fb      	strb	r3, [r7, #7]
 8000b9e:	e01d      	b.n	8000bdc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	3b50      	subs	r3, #80	; 0x50
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2078      	movs	r0, #120	; 0x78
 8000bac:	f000 f8b4 	bl	8000d18 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2078      	movs	r0, #120	; 0x78
 8000bb6:	f000 f8af 	bl	8000d18 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000bba:	2210      	movs	r2, #16
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2078      	movs	r0, #120	; 0x78
 8000bc0:	f000 f8aa 	bl	8000d18 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	01db      	lsls	r3, r3, #7
 8000bc8:	4a08      	ldr	r2, [pc, #32]	; (8000bec <SSD1306_UpdateScreen+0x58>)
 8000bca:	441a      	add	r2, r3
 8000bcc:	2380      	movs	r3, #128	; 0x80
 8000bce:	2140      	movs	r1, #64	; 0x40
 8000bd0:	2078      	movs	r0, #120	; 0x78
 8000bd2:	f000 f83b 	bl	8000c4c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	71fb      	strb	r3, [r7, #7]
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	2b07      	cmp	r3, #7
 8000be0:	d9de      	bls.n	8000ba0 <SSD1306_UpdateScreen+0xc>
	}
}
 8000be2:	bf00      	nop
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000230 	.word	0x20000230

08000bf0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d101      	bne.n	8000c04 <SSD1306_Fill+0x14>
 8000c00:	2300      	movs	r3, #0
 8000c02:	e000      	b.n	8000c06 <SSD1306_Fill+0x16>
 8000c04:	23ff      	movs	r3, #255	; 0xff
 8000c06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4803      	ldr	r0, [pc, #12]	; (8000c1c <SSD1306_Fill+0x2c>)
 8000c0e:	f008 f8cb 	bl	8008da8 <memset>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000230 	.word	0x20000230

08000c20 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <ssd1306_I2C_Init+0x28>)
 8000c28:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c2a:	e002      	b.n	8000c32 <ssd1306_I2C_Init+0x12>
		p--;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1f9      	bne.n	8000c2c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	0003d090 	.word	0x0003d090

08000c4c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b0c7      	sub	sp, #284	; 0x11c
 8000c50:	af02      	add	r7, sp, #8
 8000c52:	4604      	mov	r4, r0
 8000c54:	4608      	mov	r0, r1
 8000c56:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000c5a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000c5e:	600a      	str	r2, [r1, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c66:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000c6a:	4622      	mov	r2, r4
 8000c6c:	701a      	strb	r2, [r3, #0]
 8000c6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c72:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000c76:	4602      	mov	r2, r0
 8000c78:	701a      	strb	r2, [r3, #0]
 8000c7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c82:	460a      	mov	r2, r1
 8000c84:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000c86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000c8e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000c92:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000c96:	7812      	ldrb	r2, [r2, #0]
 8000c98:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000ca0:	e015      	b.n	8000cce <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000ca2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ca6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000caa:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000cae:	6812      	ldr	r2, [r2, #0]
 8000cb0:	441a      	add	r2, r3
 8000cb2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	7811      	ldrb	r1, [r2, #0]
 8000cba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000cbe:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000cc2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000cc4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cc8:	3301      	adds	r3, #1
 8000cca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000cce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000cd8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000cdc:	8812      	ldrh	r2, [r2, #0]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d8df      	bhi.n	8000ca2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000ce2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ce6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b299      	uxth	r1, r3
 8000cee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cf2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	f107 020c 	add.w	r2, r7, #12
 8000d00:	200a      	movs	r0, #10
 8000d02:	9000      	str	r0, [sp, #0]
 8000d04:	4803      	ldr	r0, [pc, #12]	; (8000d14 <ssd1306_I2C_WriteMulti+0xc8>)
 8000d06:	f002 fb05 	bl	8003314 <HAL_I2C_Master_Transmit>
}
 8000d0a:	bf00      	nop
 8000d0c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd90      	pop	{r4, r7, pc}
 8000d14:	200000ac 	.word	0x200000ac

08000d18 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af02      	add	r7, sp, #8
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
 8000d22:	460b      	mov	r3, r1
 8000d24:	71bb      	strb	r3, [r7, #6]
 8000d26:	4613      	mov	r3, r2
 8000d28:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000d2a:	79bb      	ldrb	r3, [r7, #6]
 8000d2c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000d2e:	797b      	ldrb	r3, [r7, #5]
 8000d30:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	b299      	uxth	r1, r3
 8000d36:	f107 020c 	add.w	r2, r7, #12
 8000d3a:	230a      	movs	r3, #10
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2302      	movs	r3, #2
 8000d40:	4803      	ldr	r0, [pc, #12]	; (8000d50 <ssd1306_I2C_Write+0x38>)
 8000d42:	f002 fae7 	bl	8003314 <HAL_I2C_Master_Transmit>
}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200000ac 	.word	0x200000ac

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a0f      	ldr	r2, [pc, #60]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d92:	2007      	movs	r0, #7
 8000d94:	f000 fb90 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40023800 	.word	0x40023800

08000da4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a19      	ldr	r2, [pc, #100]	; (8000e28 <HAL_I2C_MspInit+0x84>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d12b      	bne.n	8000e1e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_I2C_MspInit+0x88>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a17      	ldr	r2, [pc, #92]	; (8000e2c <HAL_I2C_MspInit+0x88>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_I2C_MspInit+0x88>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000de2:	23c0      	movs	r3, #192	; 0xc0
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de6:	2312      	movs	r3, #18
 8000de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000df2:	2304      	movs	r3, #4
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <HAL_I2C_MspInit+0x8c>)
 8000dfe:	f000 fb9d 	bl	800153c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_I2C_MspInit+0x88>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_I2C_MspInit+0x88>)
 8000e0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_I2C_MspInit+0x88>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	; 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40005400 	.word	0x40005400
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020400 	.word	0x40020400

08000e34 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08e      	sub	sp, #56	; 0x38
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a59      	ldr	r2, [pc, #356]	; (8000fb8 <HAL_I2S_MspInit+0x184>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d15b      	bne.n	8000f0e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
 8000e5a:	4b58      	ldr	r3, [pc, #352]	; (8000fbc <HAL_I2S_MspInit+0x188>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	4a57      	ldr	r2, [pc, #348]	; (8000fbc <HAL_I2S_MspInit+0x188>)
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e64:	6413      	str	r3, [r2, #64]	; 0x40
 8000e66:	4b55      	ldr	r3, [pc, #340]	; (8000fbc <HAL_I2S_MspInit+0x188>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6e:	623b      	str	r3, [r7, #32]
 8000e70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
 8000e76:	4b51      	ldr	r3, [pc, #324]	; (8000fbc <HAL_I2S_MspInit+0x188>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a50      	ldr	r2, [pc, #320]	; (8000fbc <HAL_I2S_MspInit+0x188>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b4e      	ldr	r3, [pc, #312]	; (8000fbc <HAL_I2S_MspInit+0x188>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	61fb      	str	r3, [r7, #28]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
 8000e92:	4b4a      	ldr	r3, [pc, #296]	; (8000fbc <HAL_I2S_MspInit+0x188>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a49      	ldr	r2, [pc, #292]	; (8000fbc <HAL_I2S_MspInit+0x188>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b47      	ldr	r3, [pc, #284]	; (8000fbc <HAL_I2S_MspInit+0x188>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	61bb      	str	r3, [r7, #24]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000eba:	2306      	movs	r3, #6
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	483e      	ldr	r0, [pc, #248]	; (8000fc0 <HAL_I2S_MspInit+0x18c>)
 8000ec6:	f000 fb39 	bl	800153c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000eca:	2308      	movs	r3, #8
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eda:	2305      	movs	r3, #5
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4836      	ldr	r0, [pc, #216]	; (8000fc0 <HAL_I2S_MspInit+0x18c>)
 8000ee6:	f000 fb29 	bl	800153c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000eea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000efc:	2305      	movs	r3, #5
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f04:	4619      	mov	r1, r3
 8000f06:	482f      	ldr	r0, [pc, #188]	; (8000fc4 <HAL_I2S_MspInit+0x190>)
 8000f08:	f000 fb18 	bl	800153c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f0c:	e04f      	b.n	8000fae <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a2d      	ldr	r2, [pc, #180]	; (8000fc8 <HAL_I2S_MspInit+0x194>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d14a      	bne.n	8000fae <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <HAL_I2S_MspInit+0x188>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	4a26      	ldr	r2, [pc, #152]	; (8000fbc <HAL_I2S_MspInit+0x188>)
 8000f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f26:	6413      	str	r3, [r2, #64]	; 0x40
 8000f28:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <HAL_I2S_MspInit+0x188>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <HAL_I2S_MspInit+0x188>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	4a1f      	ldr	r2, [pc, #124]	; (8000fbc <HAL_I2S_MspInit+0x188>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6313      	str	r3, [r2, #48]	; 0x30
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_I2S_MspInit+0x188>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_I2S_MspInit+0x188>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	4a18      	ldr	r2, [pc, #96]	; (8000fbc <HAL_I2S_MspInit+0x188>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <HAL_I2S_MspInit+0x188>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f7c:	2306      	movs	r3, #6
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f84:	4619      	mov	r1, r3
 8000f86:	4811      	ldr	r0, [pc, #68]	; (8000fcc <HAL_I2S_MspInit+0x198>)
 8000f88:	f000 fad8 	bl	800153c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f8c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_I2S_MspInit+0x18c>)
 8000faa:	f000 fac7 	bl	800153c <HAL_GPIO_Init>
}
 8000fae:	bf00      	nop
 8000fb0:	3738      	adds	r7, #56	; 0x38
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40003800 	.word	0x40003800
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020800 	.word	0x40020800
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40003c00 	.word	0x40003c00
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a19      	ldr	r2, [pc, #100]	; (8001054 <HAL_SPI_MspInit+0x84>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d12b      	bne.n	800104a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_SPI_MspInit+0x88>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a17      	ldr	r2, [pc, #92]	; (8001058 <HAL_SPI_MspInit+0x88>)
 8000ffc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_SPI_MspInit+0x88>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_SPI_MspInit+0x88>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a10      	ldr	r2, [pc, #64]	; (8001058 <HAL_SPI_MspInit+0x88>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_SPI_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800102a:	23e0      	movs	r3, #224	; 0xe0
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800103a:	2305      	movs	r3, #5
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	; (800105c <HAL_SPI_MspInit+0x8c>)
 8001046:	f000 fa79 	bl	800153c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	; 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40013000 	.word	0x40013000
 8001058:	40023800 	.word	0x40023800
 800105c:	40020000 	.word	0x40020000

08001060 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001070:	d10d      	bne.n	800108e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_TIM_Base_MspInit+0x3c>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <HAL_TIM_Base_MspInit+0x3c>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6413      	str	r3, [r2, #64]	; 0x40
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_TIM_Base_MspInit+0x3c>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <NMI_Handler+0x4>

080010a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <MemManage_Handler+0x4>

080010b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <UsageFault_Handler+0x4>

080010be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ec:	f000 f8d0 	bl	8001290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <OTG_FS_IRQHandler+0x10>)
 80010fa:	f000 fe27 	bl	8001d4c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000a1c 	.word	0x20000a1c

08001108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001110:	4a14      	ldr	r2, [pc, #80]	; (8001164 <_sbrk+0x5c>)
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <_sbrk+0x60>)
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <_sbrk+0x64>)
 8001126:	4a12      	ldr	r2, [pc, #72]	; (8001170 <_sbrk+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	429a      	cmp	r2, r3
 8001136:	d207      	bcs.n	8001148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001138:	f007 fdfc 	bl	8008d34 <__errno>
 800113c:	4603      	mov	r3, r0
 800113e:	220c      	movs	r2, #12
 8001140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e009      	b.n	800115c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <_sbrk+0x64>)
 8001158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115a:	68fb      	ldr	r3, [r7, #12]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20020000 	.word	0x20020000
 8001168:	00000400 	.word	0x00000400
 800116c:	20000638 	.word	0x20000638
 8001170:	20000d30 	.word	0x20000d30

08001174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <SystemInit+0x20>)
 800117a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800117e:	4a05      	ldr	r2, [pc, #20]	; (8001194 <SystemInit+0x20>)
 8001180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800119c:	480d      	ldr	r0, [pc, #52]	; (80011d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800119e:	490e      	ldr	r1, [pc, #56]	; (80011d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011a0:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011b4:	4c0b      	ldr	r4, [pc, #44]	; (80011e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011c2:	f7ff ffd7 	bl	8001174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c6:	f007 fdbb 	bl	8008d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ca:	f7ff f987 	bl	80004dc <main>
  bx  lr    
 80011ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80011dc:	08008ff8 	.word	0x08008ff8
  ldr r2, =_sbss
 80011e0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80011e4:	20000d30 	.word	0x20000d30

080011e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC_IRQHandler>
	...

080011ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <HAL_Init+0x40>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <HAL_Init+0x40>)
 80011f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_Init+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0a      	ldr	r2, [pc, #40]	; (800122c <HAL_Init+0x40>)
 8001202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <HAL_Init+0x40>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a07      	ldr	r2, [pc, #28]	; (800122c <HAL_Init+0x40>)
 800120e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001214:	2003      	movs	r0, #3
 8001216:	f000 f94f 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121a:	2000      	movs	r0, #0
 800121c:	f000 f808 	bl	8001230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001220:	f7ff fd98 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023c00 	.word	0x40023c00

08001230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_InitTick+0x54>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x58>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	fbb3 f3f1 	udiv	r3, r3, r1
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f967 	bl	8001522 <HAL_SYSTICK_Config>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e00e      	b.n	800127c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d80a      	bhi.n	800127a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001264:	2200      	movs	r2, #0
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f000 f92f 	bl	80014ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001270:	4a06      	ldr	r2, [pc, #24]	; (800128c <HAL_InitTick+0x5c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	e000      	b.n	800127c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000000 	.word	0x20000000
 8001288:	20000008 	.word	0x20000008
 800128c:	20000004 	.word	0x20000004

08001290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x20>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x24>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <HAL_IncTick+0x24>)
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000008 	.word	0x20000008
 80012b4:	2000063c 	.word	0x2000063c

080012b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return uwTick;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <HAL_GetTick+0x14>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	2000063c 	.word	0x2000063c

080012d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d8:	f7ff ffee 	bl	80012b8 <HAL_GetTick>
 80012dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e8:	d005      	beq.n	80012f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_Delay+0x44>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4413      	add	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012f6:	bf00      	nop
 80012f8:	f7ff ffde 	bl	80012b8 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	429a      	cmp	r2, r3
 8001306:	d8f7      	bhi.n	80012f8 <HAL_Delay+0x28>
  {
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000008 	.word	0x20000008

08001318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <__NVIC_SetPriorityGrouping+0x44>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001334:	4013      	ands	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <__NVIC_SetPriorityGrouping+0x44>)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	60d3      	str	r3, [r2, #12]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <__NVIC_GetPriorityGrouping+0x18>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	f003 0307 	and.w	r3, r3, #7
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	2b00      	cmp	r3, #0
 800138c:	db0b      	blt.n	80013a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	f003 021f 	and.w	r2, r3, #31
 8001394:	4907      	ldr	r1, [pc, #28]	; (80013b4 <__NVIC_EnableIRQ+0x38>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	095b      	lsrs	r3, r3, #5
 800139c:	2001      	movs	r0, #1
 800139e:	fa00 f202 	lsl.w	r2, r0, r2
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000e100 	.word	0xe000e100

080013b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	db0a      	blt.n	80013e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	490c      	ldr	r1, [pc, #48]	; (8001404 <__NVIC_SetPriority+0x4c>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	0112      	lsls	r2, r2, #4
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	440b      	add	r3, r1
 80013dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e0:	e00a      	b.n	80013f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4908      	ldr	r1, [pc, #32]	; (8001408 <__NVIC_SetPriority+0x50>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	3b04      	subs	r3, #4
 80013f0:	0112      	lsls	r2, r2, #4
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	440b      	add	r3, r1
 80013f6:	761a      	strb	r2, [r3, #24]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000e100 	.word	0xe000e100
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	; 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f1c3 0307 	rsb	r3, r3, #7
 8001426:	2b04      	cmp	r3, #4
 8001428:	bf28      	it	cs
 800142a:	2304      	movcs	r3, #4
 800142c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3304      	adds	r3, #4
 8001432:	2b06      	cmp	r3, #6
 8001434:	d902      	bls.n	800143c <NVIC_EncodePriority+0x30>
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3b03      	subs	r3, #3
 800143a:	e000      	b.n	800143e <NVIC_EncodePriority+0x32>
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	f04f 32ff 	mov.w	r2, #4294967295
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001454:	f04f 31ff 	mov.w	r1, #4294967295
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	43d9      	mvns	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	4313      	orrs	r3, r2
         );
}
 8001466:	4618      	mov	r0, r3
 8001468:	3724      	adds	r7, #36	; 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f7ff ff8e 	bl	80013b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff29 	bl	8001318 <__NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff3e 	bl	8001360 <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff8e 	bl	800140c <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5d 	bl	80013b8 <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff31 	bl	800137c <__NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffa2 	bl	8001474 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	; 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
 8001556:	e159      	b.n	800180c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001558:	2201      	movs	r2, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	429a      	cmp	r2, r3
 8001572:	f040 8148 	bne.w	8001806 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b01      	cmp	r3, #1
 8001580:	d005      	beq.n	800158e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800158a:	2b02      	cmp	r3, #2
 800158c:	d130      	bne.n	80015f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	2203      	movs	r2, #3
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c4:	2201      	movs	r2, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	f003 0201 	and.w	r2, r3, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d017      	beq.n	800162c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	2203      	movs	r2, #3
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d123      	bne.n	8001680 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	08da      	lsrs	r2, r3, #3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3208      	adds	r2, #8
 8001640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	220f      	movs	r2, #15
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	691a      	ldr	r2, [r3, #16]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	08da      	lsrs	r2, r3, #3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3208      	adds	r2, #8
 800167a:	69b9      	ldr	r1, [r7, #24]
 800167c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0203 	and.w	r2, r3, #3
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 80a2 	beq.w	8001806 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b57      	ldr	r3, [pc, #348]	; (8001824 <HAL_GPIO_Init+0x2e8>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	4a56      	ldr	r2, [pc, #344]	; (8001824 <HAL_GPIO_Init+0x2e8>)
 80016cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d0:	6453      	str	r3, [r2, #68]	; 0x44
 80016d2:	4b54      	ldr	r3, [pc, #336]	; (8001824 <HAL_GPIO_Init+0x2e8>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016de:	4a52      	ldr	r2, [pc, #328]	; (8001828 <HAL_GPIO_Init+0x2ec>)
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	089b      	lsrs	r3, r3, #2
 80016e4:	3302      	adds	r3, #2
 80016e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	220f      	movs	r2, #15
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a49      	ldr	r2, [pc, #292]	; (800182c <HAL_GPIO_Init+0x2f0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d019      	beq.n	800173e <HAL_GPIO_Init+0x202>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a48      	ldr	r2, [pc, #288]	; (8001830 <HAL_GPIO_Init+0x2f4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d013      	beq.n	800173a <HAL_GPIO_Init+0x1fe>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a47      	ldr	r2, [pc, #284]	; (8001834 <HAL_GPIO_Init+0x2f8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d00d      	beq.n	8001736 <HAL_GPIO_Init+0x1fa>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a46      	ldr	r2, [pc, #280]	; (8001838 <HAL_GPIO_Init+0x2fc>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d007      	beq.n	8001732 <HAL_GPIO_Init+0x1f6>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a45      	ldr	r2, [pc, #276]	; (800183c <HAL_GPIO_Init+0x300>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d101      	bne.n	800172e <HAL_GPIO_Init+0x1f2>
 800172a:	2304      	movs	r3, #4
 800172c:	e008      	b.n	8001740 <HAL_GPIO_Init+0x204>
 800172e:	2307      	movs	r3, #7
 8001730:	e006      	b.n	8001740 <HAL_GPIO_Init+0x204>
 8001732:	2303      	movs	r3, #3
 8001734:	e004      	b.n	8001740 <HAL_GPIO_Init+0x204>
 8001736:	2302      	movs	r3, #2
 8001738:	e002      	b.n	8001740 <HAL_GPIO_Init+0x204>
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <HAL_GPIO_Init+0x204>
 800173e:	2300      	movs	r3, #0
 8001740:	69fa      	ldr	r2, [r7, #28]
 8001742:	f002 0203 	and.w	r2, r2, #3
 8001746:	0092      	lsls	r2, r2, #2
 8001748:	4093      	lsls	r3, r2
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001750:	4935      	ldr	r1, [pc, #212]	; (8001828 <HAL_GPIO_Init+0x2ec>)
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	089b      	lsrs	r3, r3, #2
 8001756:	3302      	adds	r3, #2
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800175e:	4b38      	ldr	r3, [pc, #224]	; (8001840 <HAL_GPIO_Init+0x304>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001782:	4a2f      	ldr	r2, [pc, #188]	; (8001840 <HAL_GPIO_Init+0x304>)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001788:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <HAL_GPIO_Init+0x304>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017ac:	4a24      	ldr	r2, [pc, #144]	; (8001840 <HAL_GPIO_Init+0x304>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017b2:	4b23      	ldr	r3, [pc, #140]	; (8001840 <HAL_GPIO_Init+0x304>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017d6:	4a1a      	ldr	r2, [pc, #104]	; (8001840 <HAL_GPIO_Init+0x304>)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017dc:	4b18      	ldr	r3, [pc, #96]	; (8001840 <HAL_GPIO_Init+0x304>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001800:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <HAL_GPIO_Init+0x304>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3301      	adds	r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	2b0f      	cmp	r3, #15
 8001810:	f67f aea2 	bls.w	8001558 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3724      	adds	r7, #36	; 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	40013800 	.word	0x40013800
 800182c:	40020000 	.word	0x40020000
 8001830:	40020400 	.word	0x40020400
 8001834:	40020800 	.word	0x40020800
 8001838:	40020c00 	.word	0x40020c00
 800183c:	40021000 	.word	0x40021000
 8001840:	40013c00 	.word	0x40013c00

08001844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
 8001850:	4613      	mov	r3, r2
 8001852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001854:	787b      	ldrb	r3, [r7, #1]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800185a:	887a      	ldrh	r2, [r7, #2]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001860:	e003      	b.n	800186a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001862:	887b      	ldrh	r3, [r7, #2]
 8001864:	041a      	lsls	r2, r3, #16
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	619a      	str	r2, [r3, #24]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001876:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001878:	b08f      	sub	sp, #60	; 0x3c
 800187a:	af0a      	add	r7, sp, #40	; 0x28
 800187c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e054      	b.n	8001932 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d106      	bne.n	80018a8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f006 ff9c 	bl	80087e0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2203      	movs	r2, #3
 80018ac:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 ffca 	bl	8005860 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	687e      	ldr	r6, [r7, #4]
 80018d4:	466d      	mov	r5, sp
 80018d6:	f106 0410 	add.w	r4, r6, #16
 80018da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80018ea:	1d33      	adds	r3, r6, #4
 80018ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ee:	6838      	ldr	r0, [r7, #0]
 80018f0:	f003 ff44 	bl	800577c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2101      	movs	r1, #1
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 ffc1 	bl	8005882 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	603b      	str	r3, [r7, #0]
 8001906:	687e      	ldr	r6, [r7, #4]
 8001908:	466d      	mov	r5, sp
 800190a:	f106 0410 	add.w	r4, r6, #16
 800190e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001916:	e894 0003 	ldmia.w	r4, {r0, r1}
 800191a:	e885 0003 	stmia.w	r5, {r0, r1}
 800191e:	1d33      	adds	r3, r6, #4
 8001920:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001922:	6838      	ldr	r0, [r7, #0]
 8001924:	f004 f94a 	bl	8005bbc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800193a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800193a:	b590      	push	{r4, r7, lr}
 800193c:	b089      	sub	sp, #36	; 0x24
 800193e:	af04      	add	r7, sp, #16
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	4608      	mov	r0, r1
 8001944:	4611      	mov	r1, r2
 8001946:	461a      	mov	r2, r3
 8001948:	4603      	mov	r3, r0
 800194a:	70fb      	strb	r3, [r7, #3]
 800194c:	460b      	mov	r3, r1
 800194e:	70bb      	strb	r3, [r7, #2]
 8001950:	4613      	mov	r3, r2
 8001952:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800195a:	2b01      	cmp	r3, #1
 800195c:	d101      	bne.n	8001962 <HAL_HCD_HC_Init+0x28>
 800195e:	2302      	movs	r3, #2
 8001960:	e076      	b.n	8001a50 <HAL_HCD_HC_Init+0x116>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	212c      	movs	r1, #44	; 0x2c
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	4413      	add	r3, r2
 8001976:	333d      	adds	r3, #61	; 0x3d
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	212c      	movs	r1, #44	; 0x2c
 8001982:	fb01 f303 	mul.w	r3, r1, r3
 8001986:	4413      	add	r3, r2
 8001988:	3338      	adds	r3, #56	; 0x38
 800198a:	787a      	ldrb	r2, [r7, #1]
 800198c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	212c      	movs	r1, #44	; 0x2c
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	4413      	add	r3, r2
 800199a:	3340      	adds	r3, #64	; 0x40
 800199c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800199e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	212c      	movs	r1, #44	; 0x2c
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	3339      	adds	r3, #57	; 0x39
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	212c      	movs	r1, #44	; 0x2c
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	4413      	add	r3, r2
 80019be:	333f      	adds	r3, #63	; 0x3f
 80019c0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80019c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	78ba      	ldrb	r2, [r7, #2]
 80019ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019ce:	b2d0      	uxtb	r0, r2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	212c      	movs	r1, #44	; 0x2c
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	4413      	add	r3, r2
 80019da:	333a      	adds	r3, #58	; 0x3a
 80019dc:	4602      	mov	r2, r0
 80019de:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80019e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	da09      	bge.n	80019fc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	212c      	movs	r1, #44	; 0x2c
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	333b      	adds	r3, #59	; 0x3b
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
 80019fa:	e008      	b.n	8001a0e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	212c      	movs	r1, #44	; 0x2c
 8001a02:	fb01 f303 	mul.w	r3, r1, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	333b      	adds	r3, #59	; 0x3b
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	212c      	movs	r1, #44	; 0x2c
 8001a14:	fb01 f303 	mul.w	r3, r1, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	333c      	adds	r3, #60	; 0x3c
 8001a1c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a20:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	787c      	ldrb	r4, [r7, #1]
 8001a28:	78ba      	ldrb	r2, [r7, #2]
 8001a2a:	78f9      	ldrb	r1, [r7, #3]
 8001a2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a2e:	9302      	str	r3, [sp, #8]
 8001a30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a34:	9301      	str	r3, [sp, #4]
 8001a36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	4623      	mov	r3, r4
 8001a3e:	f004 fa43 	bl	8005ec8 <USB_HC_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd90      	pop	{r4, r7, pc}

08001a58 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_HCD_HC_Halt+0x1e>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e00f      	b.n	8001a96 <HAL_HCD_HC_Halt+0x3e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	78fa      	ldrb	r2, [r7, #3]
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f004 fc93 	bl	80063b2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	4608      	mov	r0, r1
 8001aaa:	4611      	mov	r1, r2
 8001aac:	461a      	mov	r2, r3
 8001aae:	4603      	mov	r3, r0
 8001ab0:	70fb      	strb	r3, [r7, #3]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	70bb      	strb	r3, [r7, #2]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	212c      	movs	r1, #44	; 0x2c
 8001ac0:	fb01 f303 	mul.w	r3, r1, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	333b      	adds	r3, #59	; 0x3b
 8001ac8:	78ba      	ldrb	r2, [r7, #2]
 8001aca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	212c      	movs	r1, #44	; 0x2c
 8001ad2:	fb01 f303 	mul.w	r3, r1, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	333f      	adds	r3, #63	; 0x3f
 8001ada:	787a      	ldrb	r2, [r7, #1]
 8001adc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001ade:	7c3b      	ldrb	r3, [r7, #16]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d112      	bne.n	8001b0a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	212c      	movs	r1, #44	; 0x2c
 8001aea:	fb01 f303 	mul.w	r3, r1, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	3342      	adds	r3, #66	; 0x42
 8001af2:	2203      	movs	r2, #3
 8001af4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	212c      	movs	r1, #44	; 0x2c
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	333d      	adds	r3, #61	; 0x3d
 8001b04:	7f3a      	ldrb	r2, [r7, #28]
 8001b06:	701a      	strb	r2, [r3, #0]
 8001b08:	e008      	b.n	8001b1c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	212c      	movs	r1, #44	; 0x2c
 8001b10:	fb01 f303 	mul.w	r3, r1, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	3342      	adds	r3, #66	; 0x42
 8001b18:	2202      	movs	r2, #2
 8001b1a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b1c:	787b      	ldrb	r3, [r7, #1]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	f200 80c6 	bhi.w	8001cb0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001b24:	a201      	add	r2, pc, #4	; (adr r2, 8001b2c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b2a:	bf00      	nop
 8001b2c:	08001b3d 	.word	0x08001b3d
 8001b30:	08001c9d 	.word	0x08001c9d
 8001b34:	08001ba1 	.word	0x08001ba1
 8001b38:	08001c1f 	.word	0x08001c1f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b3c:	7c3b      	ldrb	r3, [r7, #16]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	f040 80b8 	bne.w	8001cb4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b44:	78bb      	ldrb	r3, [r7, #2]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f040 80b4 	bne.w	8001cb4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b4c:	8b3b      	ldrh	r3, [r7, #24]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d108      	bne.n	8001b64 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	212c      	movs	r1, #44	; 0x2c
 8001b58:	fb01 f303 	mul.w	r3, r1, r3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3355      	adds	r3, #85	; 0x55
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	212c      	movs	r1, #44	; 0x2c
 8001b6a:	fb01 f303 	mul.w	r3, r1, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	3355      	adds	r3, #85	; 0x55
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d109      	bne.n	8001b8c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	212c      	movs	r1, #44	; 0x2c
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	3342      	adds	r3, #66	; 0x42
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b8a:	e093      	b.n	8001cb4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	212c      	movs	r1, #44	; 0x2c
 8001b92:	fb01 f303 	mul.w	r3, r1, r3
 8001b96:	4413      	add	r3, r2
 8001b98:	3342      	adds	r3, #66	; 0x42
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	701a      	strb	r2, [r3, #0]
      break;
 8001b9e:	e089      	b.n	8001cb4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001ba0:	78bb      	ldrb	r3, [r7, #2]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d11d      	bne.n	8001be2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	212c      	movs	r1, #44	; 0x2c
 8001bac:	fb01 f303 	mul.w	r3, r1, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3355      	adds	r3, #85	; 0x55
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	212c      	movs	r1, #44	; 0x2c
 8001bc0:	fb01 f303 	mul.w	r3, r1, r3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3342      	adds	r3, #66	; 0x42
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001bcc:	e073      	b.n	8001cb6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	212c      	movs	r1, #44	; 0x2c
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	3342      	adds	r3, #66	; 0x42
 8001bdc:	2202      	movs	r2, #2
 8001bde:	701a      	strb	r2, [r3, #0]
      break;
 8001be0:	e069      	b.n	8001cb6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	212c      	movs	r1, #44	; 0x2c
 8001be8:	fb01 f303 	mul.w	r3, r1, r3
 8001bec:	4413      	add	r3, r2
 8001bee:	3354      	adds	r3, #84	; 0x54
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	212c      	movs	r1, #44	; 0x2c
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	3342      	adds	r3, #66	; 0x42
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
      break;
 8001c08:	e055      	b.n	8001cb6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	212c      	movs	r1, #44	; 0x2c
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	3342      	adds	r3, #66	; 0x42
 8001c18:	2202      	movs	r2, #2
 8001c1a:	701a      	strb	r2, [r3, #0]
      break;
 8001c1c:	e04b      	b.n	8001cb6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c1e:	78bb      	ldrb	r3, [r7, #2]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d11d      	bne.n	8001c60 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	212c      	movs	r1, #44	; 0x2c
 8001c2a:	fb01 f303 	mul.w	r3, r1, r3
 8001c2e:	4413      	add	r3, r2
 8001c30:	3355      	adds	r3, #85	; 0x55
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d109      	bne.n	8001c4c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	212c      	movs	r1, #44	; 0x2c
 8001c3e:	fb01 f303 	mul.w	r3, r1, r3
 8001c42:	4413      	add	r3, r2
 8001c44:	3342      	adds	r3, #66	; 0x42
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c4a:	e034      	b.n	8001cb6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	212c      	movs	r1, #44	; 0x2c
 8001c52:	fb01 f303 	mul.w	r3, r1, r3
 8001c56:	4413      	add	r3, r2
 8001c58:	3342      	adds	r3, #66	; 0x42
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	701a      	strb	r2, [r3, #0]
      break;
 8001c5e:	e02a      	b.n	8001cb6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	212c      	movs	r1, #44	; 0x2c
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3354      	adds	r3, #84	; 0x54
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d109      	bne.n	8001c88 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	212c      	movs	r1, #44	; 0x2c
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	3342      	adds	r3, #66	; 0x42
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
      break;
 8001c86:	e016      	b.n	8001cb6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	212c      	movs	r1, #44	; 0x2c
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	3342      	adds	r3, #66	; 0x42
 8001c96:	2202      	movs	r2, #2
 8001c98:	701a      	strb	r2, [r3, #0]
      break;
 8001c9a:	e00c      	b.n	8001cb6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	212c      	movs	r1, #44	; 0x2c
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3342      	adds	r3, #66	; 0x42
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
      break;
 8001cae:	e002      	b.n	8001cb6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001cb0:	bf00      	nop
 8001cb2:	e000      	b.n	8001cb6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001cb4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	212c      	movs	r1, #44	; 0x2c
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3344      	adds	r3, #68	; 0x44
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	8b3a      	ldrh	r2, [r7, #24]
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	202c      	movs	r0, #44	; 0x2c
 8001cd0:	fb00 f303 	mul.w	r3, r0, r3
 8001cd4:	440b      	add	r3, r1
 8001cd6:	334c      	adds	r3, #76	; 0x4c
 8001cd8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	212c      	movs	r1, #44	; 0x2c
 8001ce0:	fb01 f303 	mul.w	r3, r1, r3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3360      	adds	r3, #96	; 0x60
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	212c      	movs	r1, #44	; 0x2c
 8001cf2:	fb01 f303 	mul.w	r3, r1, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3350      	adds	r3, #80	; 0x50
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	212c      	movs	r1, #44	; 0x2c
 8001d04:	fb01 f303 	mul.w	r3, r1, r3
 8001d08:	4413      	add	r3, r2
 8001d0a:	3339      	adds	r3, #57	; 0x39
 8001d0c:	78fa      	ldrb	r2, [r7, #3]
 8001d0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	212c      	movs	r1, #44	; 0x2c
 8001d16:	fb01 f303 	mul.w	r3, r1, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3361      	adds	r3, #97	; 0x61
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	222c      	movs	r2, #44	; 0x2c
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	3338      	adds	r3, #56	; 0x38
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	18d1      	adds	r1, r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	f004 f9e6 	bl	800610c <USB_HC_StartXfer>
 8001d40:	4603      	mov	r3, r0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop

08001d4c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 fee7 	bl	8005b36 <USB_GetMode>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	f040 80f6 	bne.w	8001f5c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f003 fecb 	bl	8005b10 <USB_ReadInterrupts>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80ec 	beq.w	8001f5a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f003 fec2 	bl	8005b10 <USB_ReadInterrupts>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d96:	d104      	bne.n	8001da2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001da0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f003 feb2 	bl	8005b10 <USB_ReadInterrupts>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001db6:	d104      	bne.n	8001dc2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f003 fea2 	bl	8005b10 <USB_ReadInterrupts>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001dd6:	d104      	bne.n	8001de2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001de0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 fe92 	bl	8005b10 <USB_ReadInterrupts>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d103      	bne.n	8001dfe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 fe84 	bl	8005b10 <USB_ReadInterrupts>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e12:	d11c      	bne.n	8001e4e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e1c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10f      	bne.n	8001e4e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e2e:	2110      	movs	r1, #16
 8001e30:	6938      	ldr	r0, [r7, #16]
 8001e32:	f003 fd73 	bl	800591c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e36:	6938      	ldr	r0, [r7, #16]
 8001e38:	f003 fda4 	bl	8005984 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2101      	movs	r1, #1
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 ff7a 	bl	8005d3c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f006 fd47 	bl	80088dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f003 fe5c 	bl	8005b10 <USB_ReadInterrupts>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e62:	d102      	bne.n	8001e6a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f001 f89e 	bl	8002fa6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 fe4e 	bl	8005b10 <USB_ReadInterrupts>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d106      	bne.n	8001e8c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f006 fd10 	bl	80088a4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2208      	movs	r2, #8
 8001e8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 fe3d 	bl	8005b10 <USB_ReadInterrupts>
 8001e96:	4603      	mov	r3, r0
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2b10      	cmp	r3, #16
 8001e9e:	d101      	bne.n	8001ea4 <HAL_HCD_IRQHandler+0x158>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_HCD_IRQHandler+0x15a>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d012      	beq.n	8001ed0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699a      	ldr	r2, [r3, #24]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0210 	bic.w	r2, r2, #16
 8001eb8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 ffa1 	bl	8002e02 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0210 	orr.w	r2, r2, #16
 8001ece:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f003 fe1b 	bl	8005b10 <USB_ReadInterrupts>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ee4:	d13a      	bne.n	8001f5c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f004 fa50 	bl	8006390 <USB_HC_ReadInterrupt>
 8001ef0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	e025      	b.n	8001f44 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d018      	beq.n	8001f3e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	015a      	lsls	r2, r3, #5
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f22:	d106      	bne.n	8001f32 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	4619      	mov	r1, r3
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f8ab 	bl	8002086 <HCD_HC_IN_IRQHandler>
 8001f30:	e005      	b.n	8001f3e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	4619      	mov	r1, r3
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fbf9 	bl	8002730 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	3301      	adds	r3, #1
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d3d4      	bcc.n	8001ef8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f56:	615a      	str	r2, [r3, #20]
 8001f58:	e000      	b.n	8001f5c <HAL_HCD_IRQHandler+0x210>
      return;
 8001f5a:	bf00      	nop
    }
  }
}
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_HCD_Start+0x16>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e013      	b.n	8001fa0 <HAL_HCD_Start+0x3e>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2101      	movs	r1, #1
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 ff3c 	bl	8005e04 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f003 fc54 	bl	800583e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_HCD_Stop+0x16>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e00d      	b.n	8001fda <HAL_HCD_Stop+0x32>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f004 fb2a 	bl	8006624 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 fede 	bl	8005db0 <USB_ResetPort>
 8001ff4:	4603      	mov	r3, r0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	460b      	mov	r3, r1
 8002008:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800200a:	78fb      	ldrb	r3, [r7, #3]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	212c      	movs	r1, #44	; 0x2c
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	4413      	add	r3, r2
 8002016:	3360      	adds	r3, #96	; 0x60
 8002018:	781b      	ldrb	r3, [r3, #0]
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	212c      	movs	r1, #44	; 0x2c
 8002038:	fb01 f303 	mul.w	r3, r1, r3
 800203c:	4413      	add	r3, r2
 800203e:	3350      	adds	r3, #80	; 0x50
 8002040:	681b      	ldr	r3, [r3, #0]
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f003 ff22 	bl	8005ea4 <USB_GetCurrentFrame>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f003 fefd 	bl	8005e76 <USB_GetHostSpeed>
 800207c:	4603      	mov	r3, r0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b086      	sub	sp, #24
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	460b      	mov	r3, r1
 8002090:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	015a      	lsls	r2, r3, #5
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d11a      	bne.n	80020ec <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c2:	461a      	mov	r2, r3
 80020c4:	2304      	movs	r3, #4
 80020c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	212c      	movs	r1, #44	; 0x2c
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	3361      	adds	r3, #97	; 0x61
 80020d6:	2206      	movs	r2, #6
 80020d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f004 f964 	bl	80063b2 <USB_HC_Halt>
 80020ea:	e0af      	b.n	800224c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002102:	d11b      	bne.n	800213c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4413      	add	r3, r2
 800210c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002110:	461a      	mov	r2, r3
 8002112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002116:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	212c      	movs	r1, #44	; 0x2c
 800211e:	fb01 f303 	mul.w	r3, r1, r3
 8002122:	4413      	add	r3, r2
 8002124:	3361      	adds	r3, #97	; 0x61
 8002126:	2207      	movs	r2, #7
 8002128:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f004 f93c 	bl	80063b2 <USB_HC_Halt>
 800213a:	e087      	b.n	800224c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4413      	add	r3, r2
 8002144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	2b20      	cmp	r3, #32
 8002150:	d109      	bne.n	8002166 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4413      	add	r3, r2
 800215a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215e:	461a      	mov	r2, r3
 8002160:	2320      	movs	r3, #32
 8002162:	6093      	str	r3, [r2, #8]
 8002164:	e072      	b.n	800224c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4413      	add	r3, r2
 800216e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b08      	cmp	r3, #8
 800217a:	d11a      	bne.n	80021b2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4413      	add	r3, r2
 8002184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002188:	461a      	mov	r2, r3
 800218a:	2308      	movs	r3, #8
 800218c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	212c      	movs	r1, #44	; 0x2c
 8002194:	fb01 f303 	mul.w	r3, r1, r3
 8002198:	4413      	add	r3, r2
 800219a:	3361      	adds	r3, #97	; 0x61
 800219c:	2205      	movs	r2, #5
 800219e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f004 f901 	bl	80063b2 <USB_HC_Halt>
 80021b0:	e04c      	b.n	800224c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c8:	d11b      	bne.n	8002202 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d6:	461a      	mov	r2, r3
 80021d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	212c      	movs	r1, #44	; 0x2c
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	3361      	adds	r3, #97	; 0x61
 80021ec:	2208      	movs	r2, #8
 80021ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	4611      	mov	r1, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f004 f8d9 	bl	80063b2 <USB_HC_Halt>
 8002200:	e024      	b.n	800224c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4413      	add	r3, r2
 800220a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002214:	2b80      	cmp	r3, #128	; 0x80
 8002216:	d119      	bne.n	800224c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002224:	461a      	mov	r2, r3
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	212c      	movs	r1, #44	; 0x2c
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	4413      	add	r3, r2
 8002236:	3361      	adds	r3, #97	; 0x61
 8002238:	2206      	movs	r2, #6
 800223a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	4611      	mov	r1, r2
 8002246:	4618      	mov	r0, r3
 8002248:	f004 f8b3 	bl	80063b2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4413      	add	r3, r2
 8002254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800225e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002262:	d112      	bne.n	800228a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	4611      	mov	r1, r2
 800226e:	4618      	mov	r0, r3
 8002270:	f004 f89f 	bl	80063b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4413      	add	r3, r2
 800227c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002280:	461a      	mov	r2, r3
 8002282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002286:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002288:	e24e      	b.n	8002728 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4413      	add	r3, r2
 8002292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b01      	cmp	r3, #1
 800229e:	f040 80df 	bne.w	8002460 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d019      	beq.n	80022de <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	212c      	movs	r1, #44	; 0x2c
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	3348      	adds	r3, #72	; 0x48
 80022b8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	0159      	lsls	r1, r3, #5
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	440b      	add	r3, r1
 80022c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022cc:	1ad2      	subs	r2, r2, r3
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	202c      	movs	r0, #44	; 0x2c
 80022d4:	fb00 f303 	mul.w	r3, r0, r3
 80022d8:	440b      	add	r3, r1
 80022da:	3350      	adds	r3, #80	; 0x50
 80022dc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	212c      	movs	r1, #44	; 0x2c
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	3361      	adds	r3, #97	; 0x61
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	212c      	movs	r1, #44	; 0x2c
 80022f6:	fb01 f303 	mul.w	r3, r1, r3
 80022fa:	4413      	add	r3, r2
 80022fc:	335c      	adds	r3, #92	; 0x5c
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4413      	add	r3, r2
 800230a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230e:	461a      	mov	r2, r3
 8002310:	2301      	movs	r3, #1
 8002312:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	212c      	movs	r1, #44	; 0x2c
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	4413      	add	r3, r2
 8002320:	333f      	adds	r3, #63	; 0x3f
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d009      	beq.n	800233c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	212c      	movs	r1, #44	; 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	333f      	adds	r3, #63	; 0x3f
 8002336:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002338:	2b02      	cmp	r3, #2
 800233a:	d111      	bne.n	8002360 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	4611      	mov	r1, r2
 8002346:	4618      	mov	r0, r3
 8002348:	f004 f833 	bl	80063b2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002358:	461a      	mov	r2, r3
 800235a:	2310      	movs	r3, #16
 800235c:	6093      	str	r3, [r2, #8]
 800235e:	e03a      	b.n	80023d6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	212c      	movs	r1, #44	; 0x2c
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	4413      	add	r3, r2
 800236c:	333f      	adds	r3, #63	; 0x3f
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d009      	beq.n	8002388 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	212c      	movs	r1, #44	; 0x2c
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	333f      	adds	r3, #63	; 0x3f
 8002382:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002384:	2b01      	cmp	r3, #1
 8002386:	d126      	bne.n	80023d6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4413      	add	r3, r2
 8002390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	0151      	lsls	r1, r2, #5
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	440a      	add	r2, r1
 800239e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023a6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	3360      	adds	r3, #96	; 0x60
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	b2d9      	uxtb	r1, r3
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	202c      	movs	r0, #44	; 0x2c
 80023c4:	fb00 f303 	mul.w	r3, r0, r3
 80023c8:	4413      	add	r3, r2
 80023ca:	3360      	adds	r3, #96	; 0x60
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f006 fa91 	bl	80088f8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d12b      	bne.n	8002436 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	212c      	movs	r1, #44	; 0x2c
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	3348      	adds	r3, #72	; 0x48
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	202c      	movs	r0, #44	; 0x2c
 80023f4:	fb00 f202 	mul.w	r2, r0, r2
 80023f8:	440a      	add	r2, r1
 80023fa:	3240      	adds	r2, #64	; 0x40
 80023fc:	8812      	ldrh	r2, [r2, #0]
 80023fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 818e 	beq.w	8002728 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	212c      	movs	r1, #44	; 0x2c
 8002412:	fb01 f303 	mul.w	r3, r1, r3
 8002416:	4413      	add	r3, r2
 8002418:	3354      	adds	r3, #84	; 0x54
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	f083 0301 	eor.w	r3, r3, #1
 8002420:	b2d8      	uxtb	r0, r3
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	212c      	movs	r1, #44	; 0x2c
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	4413      	add	r3, r2
 800242e:	3354      	adds	r3, #84	; 0x54
 8002430:	4602      	mov	r2, r0
 8002432:	701a      	strb	r2, [r3, #0]
}
 8002434:	e178      	b.n	8002728 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	3354      	adds	r3, #84	; 0x54
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	f083 0301 	eor.w	r3, r3, #1
 800244a:	b2d8      	uxtb	r0, r3
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	212c      	movs	r1, #44	; 0x2c
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	4413      	add	r3, r2
 8002458:	3354      	adds	r3, #84	; 0x54
 800245a:	4602      	mov	r2, r0
 800245c:	701a      	strb	r2, [r3, #0]
}
 800245e:	e163      	b.n	8002728 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4413      	add	r3, r2
 8002468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b02      	cmp	r3, #2
 8002474:	f040 80f6 	bne.w	8002664 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	3361      	adds	r3, #97	; 0x61
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d109      	bne.n	80024a0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	3360      	adds	r3, #96	; 0x60
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
 800249e:	e0c9      	b.n	8002634 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	212c      	movs	r1, #44	; 0x2c
 80024a6:	fb01 f303 	mul.w	r3, r1, r3
 80024aa:	4413      	add	r3, r2
 80024ac:	3361      	adds	r3, #97	; 0x61
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b05      	cmp	r3, #5
 80024b2:	d109      	bne.n	80024c8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	212c      	movs	r1, #44	; 0x2c
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4413      	add	r3, r2
 80024c0:	3360      	adds	r3, #96	; 0x60
 80024c2:	2205      	movs	r2, #5
 80024c4:	701a      	strb	r2, [r3, #0]
 80024c6:	e0b5      	b.n	8002634 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	212c      	movs	r1, #44	; 0x2c
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	3361      	adds	r3, #97	; 0x61
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b06      	cmp	r3, #6
 80024da:	d009      	beq.n	80024f0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	3361      	adds	r3, #97	; 0x61
 80024ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d150      	bne.n	8002592 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	212c      	movs	r1, #44	; 0x2c
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	335c      	adds	r3, #92	; 0x5c
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	202c      	movs	r0, #44	; 0x2c
 8002508:	fb00 f303 	mul.w	r3, r0, r3
 800250c:	440b      	add	r3, r1
 800250e:	335c      	adds	r3, #92	; 0x5c
 8002510:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	212c      	movs	r1, #44	; 0x2c
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	4413      	add	r3, r2
 800251e:	335c      	adds	r3, #92	; 0x5c
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d912      	bls.n	800254c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	212c      	movs	r1, #44	; 0x2c
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	335c      	adds	r3, #92	; 0x5c
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	212c      	movs	r1, #44	; 0x2c
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	4413      	add	r3, r2
 8002544:	3360      	adds	r3, #96	; 0x60
 8002546:	2204      	movs	r2, #4
 8002548:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800254a:	e073      	b.n	8002634 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	212c      	movs	r1, #44	; 0x2c
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	4413      	add	r3, r2
 8002558:	3360      	adds	r3, #96	; 0x60
 800255a:	2202      	movs	r2, #2
 800255c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4413      	add	r3, r2
 8002566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002574:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800257c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4413      	add	r3, r2
 8002586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258a:	461a      	mov	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002590:	e050      	b.n	8002634 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	212c      	movs	r1, #44	; 0x2c
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	4413      	add	r3, r2
 800259e:	3361      	adds	r3, #97	; 0x61
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d122      	bne.n	80025ec <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	3360      	adds	r3, #96	; 0x60
 80025b4:	2202      	movs	r2, #2
 80025b6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025ce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025d6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e4:	461a      	mov	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e023      	b.n	8002634 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	212c      	movs	r1, #44	; 0x2c
 80025f2:	fb01 f303 	mul.w	r3, r1, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	3361      	adds	r3, #97	; 0x61
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b07      	cmp	r3, #7
 80025fe:	d119      	bne.n	8002634 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	212c      	movs	r1, #44	; 0x2c
 8002606:	fb01 f303 	mul.w	r3, r1, r3
 800260a:	4413      	add	r3, r2
 800260c:	335c      	adds	r3, #92	; 0x5c
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	202c      	movs	r0, #44	; 0x2c
 8002618:	fb00 f303 	mul.w	r3, r0, r3
 800261c:	440b      	add	r3, r1
 800261e:	335c      	adds	r3, #92	; 0x5c
 8002620:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	212c      	movs	r1, #44	; 0x2c
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	4413      	add	r3, r2
 800262e:	3360      	adds	r3, #96	; 0x60
 8002630:	2204      	movs	r2, #4
 8002632:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	461a      	mov	r2, r3
 8002642:	2302      	movs	r3, #2
 8002644:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	b2d9      	uxtb	r1, r3
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	202c      	movs	r0, #44	; 0x2c
 8002650:	fb00 f303 	mul.w	r3, r0, r3
 8002654:	4413      	add	r3, r2
 8002656:	3360      	adds	r3, #96	; 0x60
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f006 f94b 	bl	80088f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002662:	e061      	b.n	8002728 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b10      	cmp	r3, #16
 8002678:	d156      	bne.n	8002728 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	333f      	adds	r3, #63	; 0x3f
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b03      	cmp	r3, #3
 800268c:	d111      	bne.n	80026b2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	212c      	movs	r1, #44	; 0x2c
 8002694:	fb01 f303 	mul.w	r3, r1, r3
 8002698:	4413      	add	r3, r2
 800269a:	335c      	adds	r3, #92	; 0x5c
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f003 fe81 	bl	80063b2 <USB_HC_Halt>
 80026b0:	e031      	b.n	8002716 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	333f      	adds	r3, #63	; 0x3f
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d009      	beq.n	80026da <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	212c      	movs	r1, #44	; 0x2c
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	333f      	adds	r3, #63	; 0x3f
 80026d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d11d      	bne.n	8002716 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	212c      	movs	r1, #44	; 0x2c
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	335c      	adds	r3, #92	; 0x5c
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d110      	bne.n	8002716 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	212c      	movs	r1, #44	; 0x2c
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	4413      	add	r3, r2
 8002700:	3361      	adds	r3, #97	; 0x61
 8002702:	2203      	movs	r2, #3
 8002704:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	4611      	mov	r1, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f003 fe4e 	bl	80063b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	015a      	lsls	r2, r3, #5
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4413      	add	r3, r2
 800271e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002722:	461a      	mov	r2, r3
 8002724:	2310      	movs	r3, #16
 8002726:	6093      	str	r3, [r2, #8]
}
 8002728:	bf00      	nop
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b04      	cmp	r3, #4
 800275e:	d11a      	bne.n	8002796 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	461a      	mov	r2, r3
 800276e:	2304      	movs	r3, #4
 8002770:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	212c      	movs	r1, #44	; 0x2c
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	4413      	add	r3, r2
 800277e:	3361      	adds	r3, #97	; 0x61
 8002780:	2206      	movs	r2, #6
 8002782:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f003 fe0f 	bl	80063b2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002794:	e331      	b.n	8002dfa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	4413      	add	r3, r2
 800279e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0320 	and.w	r3, r3, #32
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d12e      	bne.n	800280a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	461a      	mov	r2, r3
 80027ba:	2320      	movs	r3, #32
 80027bc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	212c      	movs	r1, #44	; 0x2c
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	333d      	adds	r3, #61	; 0x3d
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	f040 8313 	bne.w	8002dfa <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	333d      	adds	r3, #61	; 0x3d
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	3360      	adds	r3, #96	; 0x60
 80027f4:	2202      	movs	r2, #2
 80027f6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f003 fdd5 	bl	80063b2 <USB_HC_Halt>
}
 8002808:	e2f7      	b.n	8002dfa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	4413      	add	r3, r2
 8002812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800281c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002820:	d112      	bne.n	8002848 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	4413      	add	r3, r2
 800282a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282e:	461a      	mov	r2, r3
 8002830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002834:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f003 fdb6 	bl	80063b2 <USB_HC_Halt>
}
 8002846:	e2d8      	b.n	8002dfa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b01      	cmp	r3, #1
 800285c:	d140      	bne.n	80028e0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	212c      	movs	r1, #44	; 0x2c
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	4413      	add	r3, r2
 800286a:	335c      	adds	r3, #92	; 0x5c
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002882:	2b40      	cmp	r3, #64	; 0x40
 8002884:	d111      	bne.n	80028aa <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	212c      	movs	r1, #44	; 0x2c
 800288c:	fb01 f303 	mul.w	r3, r1, r3
 8002890:	4413      	add	r3, r2
 8002892:	333d      	adds	r3, #61	; 0x3d
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a4:	461a      	mov	r2, r3
 80028a6:	2340      	movs	r3, #64	; 0x40
 80028a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b6:	461a      	mov	r2, r3
 80028b8:	2301      	movs	r3, #1
 80028ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	3361      	adds	r3, #97	; 0x61
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f003 fd6a 	bl	80063b2 <USB_HC_Halt>
}
 80028de:	e28c      	b.n	8002dfa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f2:	2b40      	cmp	r3, #64	; 0x40
 80028f4:	d12c      	bne.n	8002950 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	212c      	movs	r1, #44	; 0x2c
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	4413      	add	r3, r2
 8002902:	3361      	adds	r3, #97	; 0x61
 8002904:	2204      	movs	r2, #4
 8002906:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	333d      	adds	r3, #61	; 0x3d
 8002916:	2201      	movs	r2, #1
 8002918:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	212c      	movs	r1, #44	; 0x2c
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	4413      	add	r3, r2
 8002926:	335c      	adds	r3, #92	; 0x5c
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f003 fd3b 	bl	80063b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	461a      	mov	r2, r3
 800294a:	2340      	movs	r3, #64	; 0x40
 800294c:	6093      	str	r3, [r2, #8]
}
 800294e:	e254      	b.n	8002dfa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b08      	cmp	r3, #8
 8002964:	d11a      	bne.n	800299c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	4413      	add	r3, r2
 800296e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002972:	461a      	mov	r2, r3
 8002974:	2308      	movs	r3, #8
 8002976:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	3361      	adds	r3, #97	; 0x61
 8002986:	2205      	movs	r2, #5
 8002988:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f003 fd0c 	bl	80063b2 <USB_HC_Halt>
}
 800299a:	e22e      	b.n	8002dfa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b10      	cmp	r3, #16
 80029b0:	d140      	bne.n	8002a34 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	335c      	adds	r3, #92	; 0x5c
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	3361      	adds	r3, #97	; 0x61
 80029d2:	2203      	movs	r2, #3
 80029d4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	333d      	adds	r3, #61	; 0x3d
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d112      	bne.n	8002a10 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	333c      	adds	r3, #60	; 0x3c
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d108      	bne.n	8002a10 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	212c      	movs	r1, #44	; 0x2c
 8002a04:	fb01 f303 	mul.w	r3, r1, r3
 8002a08:	4413      	add	r3, r2
 8002a0a:	333d      	adds	r3, #61	; 0x3d
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f003 fcc9 	bl	80063b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	2310      	movs	r3, #16
 8002a30:	6093      	str	r3, [r2, #8]
}
 8002a32:	e1e2      	b.n	8002dfa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a46:	2b80      	cmp	r3, #128	; 0x80
 8002a48:	d164      	bne.n	8002b14 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d111      	bne.n	8002a76 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	212c      	movs	r1, #44	; 0x2c
 8002a58:	fb01 f303 	mul.w	r3, r1, r3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3361      	adds	r3, #97	; 0x61
 8002a60:	2206      	movs	r2, #6
 8002a62:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 fc9f 	bl	80063b2 <USB_HC_Halt>
 8002a74:	e044      	b.n	8002b00 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	212c      	movs	r1, #44	; 0x2c
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	335c      	adds	r3, #92	; 0x5c
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	202c      	movs	r0, #44	; 0x2c
 8002a8e:	fb00 f303 	mul.w	r3, r0, r3
 8002a92:	440b      	add	r3, r1
 8002a94:	335c      	adds	r3, #92	; 0x5c
 8002a96:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	335c      	adds	r3, #92	; 0x5c
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d920      	bls.n	8002aee <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	335c      	adds	r3, #92	; 0x5c
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3360      	adds	r3, #96	; 0x60
 8002acc:	2204      	movs	r2, #4
 8002ace:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	b2d9      	uxtb	r1, r3
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	202c      	movs	r0, #44	; 0x2c
 8002ada:	fb00 f303 	mul.w	r3, r0, r3
 8002ade:	4413      	add	r3, r2
 8002ae0:	3360      	adds	r3, #96	; 0x60
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f005 ff06 	bl	80088f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002aec:	e008      	b.n	8002b00 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	3360      	adds	r3, #96	; 0x60
 8002afc:	2202      	movs	r2, #2
 8002afe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2380      	movs	r3, #128	; 0x80
 8002b10:	6093      	str	r3, [r2, #8]
}
 8002b12:	e172      	b.n	8002dfa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2a:	d11b      	bne.n	8002b64 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	212c      	movs	r1, #44	; 0x2c
 8002b32:	fb01 f303 	mul.w	r3, r1, r3
 8002b36:	4413      	add	r3, r2
 8002b38:	3361      	adds	r3, #97	; 0x61
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f003 fc32 	bl	80063b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b60:	6093      	str	r3, [r2, #8]
}
 8002b62:	e14a      	b.n	8002dfa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	f040 813f 	bne.w	8002dfa <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	3361      	adds	r3, #97	; 0x61
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d17d      	bne.n	8002c8c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3360      	adds	r3, #96	; 0x60
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	333f      	adds	r3, #63	; 0x3f
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d00a      	beq.n	8002bcc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	333f      	adds	r3, #63	; 0x3f
 8002bc4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	f040 8100 	bne.w	8002dcc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d113      	bne.n	8002bfc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3355      	adds	r3, #85	; 0x55
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	f083 0301 	eor.w	r3, r3, #1
 8002be8:	b2d8      	uxtb	r0, r3
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	212c      	movs	r1, #44	; 0x2c
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3355      	adds	r3, #85	; 0x55
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	f040 80e3 	bne.w	8002dcc <HCD_HC_OUT_IRQHandler+0x69c>
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	334c      	adds	r3, #76	; 0x4c
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 80d8 	beq.w	8002dcc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	334c      	adds	r3, #76	; 0x4c
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	202c      	movs	r0, #44	; 0x2c
 8002c32:	fb00 f202 	mul.w	r2, r0, r2
 8002c36:	440a      	add	r2, r1
 8002c38:	3240      	adds	r2, #64	; 0x40
 8002c3a:	8812      	ldrh	r2, [r2, #0]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	202c      	movs	r0, #44	; 0x2c
 8002c46:	fb00 f202 	mul.w	r2, r0, r2
 8002c4a:	440a      	add	r2, r1
 8002c4c:	3240      	adds	r2, #64	; 0x40
 8002c4e:	8812      	ldrh	r2, [r2, #0]
 8002c50:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80b5 	beq.w	8002dcc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3355      	adds	r3, #85	; 0x55
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	f083 0301 	eor.w	r3, r3, #1
 8002c76:	b2d8      	uxtb	r0, r3
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3355      	adds	r3, #85	; 0x55
 8002c86:	4602      	mov	r2, r0
 8002c88:	701a      	strb	r2, [r3, #0]
 8002c8a:	e09f      	b.n	8002dcc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	3361      	adds	r3, #97	; 0x61
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d109      	bne.n	8002cb4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	212c      	movs	r1, #44	; 0x2c
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	3360      	adds	r3, #96	; 0x60
 8002cae:	2202      	movs	r2, #2
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	e08b      	b.n	8002dcc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	212c      	movs	r1, #44	; 0x2c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3361      	adds	r3, #97	; 0x61
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d109      	bne.n	8002cdc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	212c      	movs	r1, #44	; 0x2c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3360      	adds	r3, #96	; 0x60
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	e077      	b.n	8002dcc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	212c      	movs	r1, #44	; 0x2c
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3361      	adds	r3, #97	; 0x61
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b05      	cmp	r3, #5
 8002cee:	d109      	bne.n	8002d04 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3360      	adds	r3, #96	; 0x60
 8002cfe:	2205      	movs	r2, #5
 8002d00:	701a      	strb	r2, [r3, #0]
 8002d02:	e063      	b.n	8002dcc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3361      	adds	r3, #97	; 0x61
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b06      	cmp	r3, #6
 8002d16:	d009      	beq.n	8002d2c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3361      	adds	r3, #97	; 0x61
 8002d26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d14f      	bne.n	8002dcc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	335c      	adds	r3, #92	; 0x5c
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	202c      	movs	r0, #44	; 0x2c
 8002d44:	fb00 f303 	mul.w	r3, r0, r3
 8002d48:	440b      	add	r3, r1
 8002d4a:	335c      	adds	r3, #92	; 0x5c
 8002d4c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	335c      	adds	r3, #92	; 0x5c
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d912      	bls.n	8002d88 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	335c      	adds	r3, #92	; 0x5c
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3360      	adds	r3, #96	; 0x60
 8002d82:	2204      	movs	r2, #4
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	e021      	b.n	8002dcc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	3360      	adds	r3, #96	; 0x60
 8002d96:	2202      	movs	r2, #2
 8002d98:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002db0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002db8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd8:	461a      	mov	r2, r3
 8002dda:	2302      	movs	r3, #2
 8002ddc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	b2d9      	uxtb	r1, r3
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	202c      	movs	r0, #44	; 0x2c
 8002de8:	fb00 f303 	mul.w	r3, r0, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	3360      	adds	r3, #96	; 0x60
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f005 fd7f 	bl	80088f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002dfa:	bf00      	nop
 8002dfc:	3720      	adds	r7, #32
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b08a      	sub	sp, #40	; 0x28
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	0c5b      	lsrs	r3, r3, #17
 8002e28:	f003 030f 	and.w	r3, r3, #15
 8002e2c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e36:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d004      	beq.n	8002e48 <HCD_RXQLVL_IRQHandler+0x46>
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b05      	cmp	r3, #5
 8002e42:	f000 80a9 	beq.w	8002f98 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e46:	e0aa      	b.n	8002f9e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 80a6 	beq.w	8002f9c <HCD_RXQLVL_IRQHandler+0x19a>
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	212c      	movs	r1, #44	; 0x2c
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3344      	adds	r3, #68	; 0x44
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 809b 	beq.w	8002f9c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3350      	adds	r3, #80	; 0x50
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	441a      	add	r2, r3
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	202c      	movs	r0, #44	; 0x2c
 8002e80:	fb00 f303 	mul.w	r3, r0, r3
 8002e84:	440b      	add	r3, r1
 8002e86:	334c      	adds	r3, #76	; 0x4c
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d87a      	bhi.n	8002f84 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3344      	adds	r3, #68	; 0x44
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	b292      	uxth	r2, r2
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	f002 fdda 	bl	8005a60 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3344      	adds	r3, #68	; 0x44
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	441a      	add	r2, r3
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	202c      	movs	r0, #44	; 0x2c
 8002ec6:	fb00 f303 	mul.w	r3, r0, r3
 8002eca:	440b      	add	r3, r1
 8002ecc:	3344      	adds	r3, #68	; 0x44
 8002ece:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	212c      	movs	r1, #44	; 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	3350      	adds	r3, #80	; 0x50
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	441a      	add	r2, r3
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	202c      	movs	r0, #44	; 0x2c
 8002eea:	fb00 f303 	mul.w	r3, r0, r3
 8002eee:	440b      	add	r3, r1
 8002ef0:	3350      	adds	r3, #80	; 0x50
 8002ef2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	0cdb      	lsrs	r3, r3, #19
 8002f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f08:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	212c      	movs	r1, #44	; 0x2c
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	4413      	add	r3, r2
 8002f16:	3340      	adds	r3, #64	; 0x40
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d13c      	bne.n	8002f9c <HCD_RXQLVL_IRQHandler+0x19a>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d039      	beq.n	8002f9c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f3e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f46:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f54:	461a      	mov	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	3354      	adds	r3, #84	; 0x54
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	f083 0301 	eor.w	r3, r3, #1
 8002f6e:	b2d8      	uxtb	r0, r3
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	212c      	movs	r1, #44	; 0x2c
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3354      	adds	r3, #84	; 0x54
 8002f7e:	4602      	mov	r2, r0
 8002f80:	701a      	strb	r2, [r3, #0]
      break;
 8002f82:	e00b      	b.n	8002f9c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	212c      	movs	r1, #44	; 0x2c
 8002f8a:	fb01 f303 	mul.w	r3, r1, r3
 8002f8e:	4413      	add	r3, r2
 8002f90:	3360      	adds	r3, #96	; 0x60
 8002f92:	2204      	movs	r2, #4
 8002f94:	701a      	strb	r2, [r3, #0]
      break;
 8002f96:	e001      	b.n	8002f9c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f98:	bf00      	nop
 8002f9a:	e000      	b.n	8002f9e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f9c:	bf00      	nop
  }
}
 8002f9e:	bf00      	nop
 8002fa0:	3728      	adds	r7, #40	; 0x28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b086      	sub	sp, #24
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002fd2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d10b      	bne.n	8002ff6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d102      	bne.n	8002fee <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f005 fc69 	bl	80088c0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f043 0302 	orr.w	r3, r3, #2
 8002ff4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d132      	bne.n	8003066 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f043 0308 	orr.w	r3, r3, #8
 8003006:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b04      	cmp	r3, #4
 8003010:	d126      	bne.n	8003060 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d113      	bne.n	8003042 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003020:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003024:	d106      	bne.n	8003034 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2102      	movs	r1, #2
 800302c:	4618      	mov	r0, r3
 800302e:	f002 fe85 	bl	8005d3c <USB_InitFSLSPClkSel>
 8003032:	e011      	b.n	8003058 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2101      	movs	r1, #1
 800303a:	4618      	mov	r0, r3
 800303c:	f002 fe7e 	bl	8005d3c <USB_InitFSLSPClkSel>
 8003040:	e00a      	b.n	8003058 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d106      	bne.n	8003058 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003050:	461a      	mov	r2, r3
 8003052:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003056:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f005 fc5b 	bl	8008914 <HAL_HCD_PortEnabled_Callback>
 800305e:	e002      	b.n	8003066 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f005 fc65 	bl	8008930 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f003 0320 	and.w	r3, r3, #32
 800306c:	2b20      	cmp	r3, #32
 800306e:	d103      	bne.n	8003078 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f043 0320 	orr.w	r3, r3, #32
 8003076:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800307e:	461a      	mov	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	6013      	str	r3, [r2, #0]
}
 8003084:	bf00      	nop
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e12b      	b.n	80032f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fd fe76 	bl	8000da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2224      	movs	r2, #36	; 0x24
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030f0:	f001 fe56 	bl	8004da0 <HAL_RCC_GetPCLK1Freq>
 80030f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4a81      	ldr	r2, [pc, #516]	; (8003300 <HAL_I2C_Init+0x274>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d807      	bhi.n	8003110 <HAL_I2C_Init+0x84>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4a80      	ldr	r2, [pc, #512]	; (8003304 <HAL_I2C_Init+0x278>)
 8003104:	4293      	cmp	r3, r2
 8003106:	bf94      	ite	ls
 8003108:	2301      	movls	r3, #1
 800310a:	2300      	movhi	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e006      	b.n	800311e <HAL_I2C_Init+0x92>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4a7d      	ldr	r2, [pc, #500]	; (8003308 <HAL_I2C_Init+0x27c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	bf94      	ite	ls
 8003118:	2301      	movls	r3, #1
 800311a:	2300      	movhi	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e0e7      	b.n	80032f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4a78      	ldr	r2, [pc, #480]	; (800330c <HAL_I2C_Init+0x280>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	0c9b      	lsrs	r3, r3, #18
 8003130:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	430a      	orrs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4a6a      	ldr	r2, [pc, #424]	; (8003300 <HAL_I2C_Init+0x274>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d802      	bhi.n	8003160 <HAL_I2C_Init+0xd4>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	3301      	adds	r3, #1
 800315e:	e009      	b.n	8003174 <HAL_I2C_Init+0xe8>
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	4a69      	ldr	r2, [pc, #420]	; (8003310 <HAL_I2C_Init+0x284>)
 800316c:	fba2 2303 	umull	r2, r3, r2, r3
 8003170:	099b      	lsrs	r3, r3, #6
 8003172:	3301      	adds	r3, #1
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	430b      	orrs	r3, r1
 800317a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003186:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	495c      	ldr	r1, [pc, #368]	; (8003300 <HAL_I2C_Init+0x274>)
 8003190:	428b      	cmp	r3, r1
 8003192:	d819      	bhi.n	80031c8 <HAL_I2C_Init+0x13c>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1e59      	subs	r1, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	fbb1 f3f3 	udiv	r3, r1, r3
 80031a2:	1c59      	adds	r1, r3, #1
 80031a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031a8:	400b      	ands	r3, r1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_I2C_Init+0x138>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1e59      	subs	r1, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031bc:	3301      	adds	r3, #1
 80031be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c2:	e051      	b.n	8003268 <HAL_I2C_Init+0x1dc>
 80031c4:	2304      	movs	r3, #4
 80031c6:	e04f      	b.n	8003268 <HAL_I2C_Init+0x1dc>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d111      	bne.n	80031f4 <HAL_I2C_Init+0x168>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1e58      	subs	r0, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	440b      	add	r3, r1
 80031de:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e2:	3301      	adds	r3, #1
 80031e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	e012      	b.n	800321a <HAL_I2C_Init+0x18e>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1e58      	subs	r0, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	0099      	lsls	r1, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	fbb0 f3f3 	udiv	r3, r0, r3
 800320a:	3301      	adds	r3, #1
 800320c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_I2C_Init+0x196>
 800321e:	2301      	movs	r3, #1
 8003220:	e022      	b.n	8003268 <HAL_I2C_Init+0x1dc>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10e      	bne.n	8003248 <HAL_I2C_Init+0x1bc>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1e58      	subs	r0, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6859      	ldr	r1, [r3, #4]
 8003232:	460b      	mov	r3, r1
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	440b      	add	r3, r1
 8003238:	fbb0 f3f3 	udiv	r3, r0, r3
 800323c:	3301      	adds	r3, #1
 800323e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003246:	e00f      	b.n	8003268 <HAL_I2C_Init+0x1dc>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1e58      	subs	r0, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6859      	ldr	r1, [r3, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	0099      	lsls	r1, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	fbb0 f3f3 	udiv	r3, r0, r3
 800325e:	3301      	adds	r3, #1
 8003260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	6809      	ldr	r1, [r1, #0]
 800326c:	4313      	orrs	r3, r2
 800326e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003296:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6911      	ldr	r1, [r2, #16]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68d2      	ldr	r2, [r2, #12]
 80032a2:	4311      	orrs	r1, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	430b      	orrs	r3, r1
 80032aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	000186a0 	.word	0x000186a0
 8003304:	001e847f 	.word	0x001e847f
 8003308:	003d08ff 	.word	0x003d08ff
 800330c:	431bde83 	.word	0x431bde83
 8003310:	10624dd3 	.word	0x10624dd3

08003314 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	461a      	mov	r2, r3
 8003320:	460b      	mov	r3, r1
 8003322:	817b      	strh	r3, [r7, #10]
 8003324:	4613      	mov	r3, r2
 8003326:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003328:	f7fd ffc6 	bl	80012b8 <HAL_GetTick>
 800332c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b20      	cmp	r3, #32
 8003338:	f040 80e0 	bne.w	80034fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2319      	movs	r3, #25
 8003342:	2201      	movs	r2, #1
 8003344:	4970      	ldr	r1, [pc, #448]	; (8003508 <HAL_I2C_Master_Transmit+0x1f4>)
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 fa92 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003352:	2302      	movs	r3, #2
 8003354:	e0d3      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_I2C_Master_Transmit+0x50>
 8003360:	2302      	movs	r3, #2
 8003362:	e0cc      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b01      	cmp	r3, #1
 8003378:	d007      	beq.n	800338a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0201 	orr.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003398:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2221      	movs	r2, #33	; 0x21
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2210      	movs	r2, #16
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	893a      	ldrh	r2, [r7, #8]
 80033ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4a50      	ldr	r2, [pc, #320]	; (800350c <HAL_I2C_Master_Transmit+0x1f8>)
 80033ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033cc:	8979      	ldrh	r1, [r7, #10]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	6a3a      	ldr	r2, [r7, #32]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f9ca 	bl	800376c <I2C_MasterRequestWrite>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e08d      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033f8:	e066      	b.n	80034c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	6a39      	ldr	r1, [r7, #32]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 fb0c 	bl	8003a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b04      	cmp	r3, #4
 8003410:	d107      	bne.n	8003422 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003420:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e06b      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	781a      	ldrb	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b04      	cmp	r3, #4
 8003462:	d11b      	bne.n	800349c <HAL_I2C_Master_Transmit+0x188>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	2b00      	cmp	r3, #0
 800346a:	d017      	beq.n	800349c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	781a      	ldrb	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	6a39      	ldr	r1, [r7, #32]
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 fafc 	bl	8003a9e <I2C_WaitOnBTFFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00d      	beq.n	80034c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d107      	bne.n	80034c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e01a      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d194      	bne.n	80033fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e000      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	00100002 	.word	0x00100002
 800350c:	ffff0000 	.word	0xffff0000

08003510 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	; 0x28
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	460b      	mov	r3, r1
 800351e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003520:	f7fd feca 	bl	80012b8 <HAL_GetTick>
 8003524:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b20      	cmp	r3, #32
 8003534:	f040 8111 	bne.w	800375a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	2319      	movs	r3, #25
 800353e:	2201      	movs	r2, #1
 8003540:	4988      	ldr	r1, [pc, #544]	; (8003764 <HAL_I2C_IsDeviceReady+0x254>)
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f994 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800354e:	2302      	movs	r3, #2
 8003550:	e104      	b.n	800375c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_I2C_IsDeviceReady+0x50>
 800355c:	2302      	movs	r3, #2
 800355e:	e0fd      	b.n	800375c <HAL_I2C_IsDeviceReady+0x24c>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b01      	cmp	r3, #1
 8003574:	d007      	beq.n	8003586 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0201 	orr.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003594:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2224      	movs	r2, #36	; 0x24
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4a70      	ldr	r2, [pc, #448]	; (8003768 <HAL_I2C_IsDeviceReady+0x258>)
 80035a8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f952 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00d      	beq.n	80035ee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e0:	d103      	bne.n	80035ea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e0b6      	b.n	800375c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ee:	897b      	ldrh	r3, [r7, #10]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035fc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80035fe:	f7fd fe5b 	bl	80012b8 <HAL_GetTick>
 8003602:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b02      	cmp	r3, #2
 8003610:	bf0c      	ite	eq
 8003612:	2301      	moveq	r3, #1
 8003614:	2300      	movne	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003628:	bf0c      	ite	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	2300      	movne	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003632:	e025      	b.n	8003680 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003634:	f7fd fe40 	bl	80012b8 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d302      	bcc.n	800364a <HAL_I2C_IsDeviceReady+0x13a>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d103      	bne.n	8003652 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	22a0      	movs	r2, #160	; 0xa0
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b02      	cmp	r3, #2
 800365e:	bf0c      	ite	eq
 8003660:	2301      	moveq	r3, #1
 8003662:	2300      	movne	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2ba0      	cmp	r3, #160	; 0xa0
 800368a:	d005      	beq.n	8003698 <HAL_I2C_IsDeviceReady+0x188>
 800368c:	7dfb      	ldrb	r3, [r7, #23]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d102      	bne.n	8003698 <HAL_I2C_IsDeviceReady+0x188>
 8003692:	7dbb      	ldrb	r3, [r7, #22]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0cd      	beq.n	8003634 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d129      	bne.n	8003702 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036bc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	2319      	movs	r3, #25
 80036da:	2201      	movs	r2, #1
 80036dc:	4921      	ldr	r1, [pc, #132]	; (8003764 <HAL_I2C_IsDeviceReady+0x254>)
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f8c6 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e036      	b.n	800375c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	e02c      	b.n	800375c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003710:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800371a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	2319      	movs	r3, #25
 8003722:	2201      	movs	r2, #1
 8003724:	490f      	ldr	r1, [pc, #60]	; (8003764 <HAL_I2C_IsDeviceReady+0x254>)
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f8a2 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e012      	b.n	800375c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	3301      	adds	r3, #1
 800373a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	429a      	cmp	r2, r3
 8003742:	f4ff af32 	bcc.w	80035aa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800375a:	2302      	movs	r3, #2
  }
}
 800375c:	4618      	mov	r0, r3
 800375e:	3720      	adds	r7, #32
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	00100002 	.word	0x00100002
 8003768:	ffff0000 	.word	0xffff0000

0800376c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af02      	add	r7, sp, #8
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	460b      	mov	r3, r1
 800377a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d006      	beq.n	8003796 <I2C_MasterRequestWrite+0x2a>
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d003      	beq.n	8003796 <I2C_MasterRequestWrite+0x2a>
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003794:	d108      	bne.n	80037a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	e00b      	b.n	80037c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	2b12      	cmp	r3, #18
 80037ae:	d107      	bne.n	80037c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f84f 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00d      	beq.n	80037f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e6:	d103      	bne.n	80037f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e035      	b.n	8003860 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037fc:	d108      	bne.n	8003810 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037fe:	897b      	ldrh	r3, [r7, #10]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800380c:	611a      	str	r2, [r3, #16]
 800380e:	e01b      	b.n	8003848 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003810:	897b      	ldrh	r3, [r7, #10]
 8003812:	11db      	asrs	r3, r3, #7
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f003 0306 	and.w	r3, r3, #6
 800381a:	b2db      	uxtb	r3, r3
 800381c:	f063 030f 	orn	r3, r3, #15
 8003820:	b2da      	uxtb	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	490e      	ldr	r1, [pc, #56]	; (8003868 <I2C_MasterRequestWrite+0xfc>)
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f875 	bl	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e010      	b.n	8003860 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800383e:	897b      	ldrh	r3, [r7, #10]
 8003840:	b2da      	uxtb	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	4907      	ldr	r1, [pc, #28]	; (800386c <I2C_MasterRequestWrite+0x100>)
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f865 	bl	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	00010008 	.word	0x00010008
 800386c:	00010002 	.word	0x00010002

08003870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003880:	e025      	b.n	80038ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d021      	beq.n	80038ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388a:	f7fd fd15 	bl	80012b8 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d116      	bne.n	80038ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f043 0220 	orr.w	r2, r3, #32
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e023      	b.n	8003916 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	0c1b      	lsrs	r3, r3, #16
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d10d      	bne.n	80038f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	43da      	mvns	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4013      	ands	r3, r2
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	bf0c      	ite	eq
 80038ea:	2301      	moveq	r3, #1
 80038ec:	2300      	movne	r3, #0
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	461a      	mov	r2, r3
 80038f2:	e00c      	b.n	800390e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	43da      	mvns	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4013      	ands	r3, r2
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	bf0c      	ite	eq
 8003906:	2301      	moveq	r3, #1
 8003908:	2300      	movne	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	429a      	cmp	r2, r3
 8003912:	d0b6      	beq.n	8003882 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800392c:	e051      	b.n	80039d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393c:	d123      	bne.n	8003986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003956:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f043 0204 	orr.w	r2, r3, #4
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e046      	b.n	8003a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398c:	d021      	beq.n	80039d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398e:	f7fd fc93 	bl	80012b8 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	429a      	cmp	r2, r3
 800399c:	d302      	bcc.n	80039a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d116      	bne.n	80039d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f043 0220 	orr.w	r2, r3, #32
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e020      	b.n	8003a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d10c      	bne.n	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	43da      	mvns	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4013      	ands	r3, r2
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bf14      	ite	ne
 80039ee:	2301      	movne	r3, #1
 80039f0:	2300      	moveq	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	e00b      	b.n	8003a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	43da      	mvns	r2, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	4013      	ands	r3, r2
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf14      	ite	ne
 8003a08:	2301      	movne	r3, #1
 8003a0a:	2300      	moveq	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d18d      	bne.n	800392e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a28:	e02d      	b.n	8003a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f878 	bl	8003b20 <I2C_IsAcknowledgeFailed>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e02d      	b.n	8003a96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a40:	d021      	beq.n	8003a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a42:	f7fd fc39 	bl	80012b8 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d302      	bcc.n	8003a58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d116      	bne.n	8003a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f043 0220 	orr.w	r2, r3, #32
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e007      	b.n	8003a96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a90:	2b80      	cmp	r3, #128	; 0x80
 8003a92:	d1ca      	bne.n	8003a2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aaa:	e02d      	b.n	8003b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f837 	bl	8003b20 <I2C_IsAcknowledgeFailed>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e02d      	b.n	8003b18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac2:	d021      	beq.n	8003b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac4:	f7fd fbf8 	bl	80012b8 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d302      	bcc.n	8003ada <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d116      	bne.n	8003b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	f043 0220 	orr.w	r2, r3, #32
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e007      	b.n	8003b18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d1ca      	bne.n	8003aac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b36:	d11b      	bne.n	8003b70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	f043 0204 	orr.w	r2, r3, #4
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e128      	b.n	8003de4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a90      	ldr	r2, [pc, #576]	; (8003dec <HAL_I2S_Init+0x26c>)
 8003baa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7fd f941 	bl	8000e34 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003bc8:	f023 030f 	bic.w	r3, r3, #15
 8003bcc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d060      	beq.n	8003ca0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d102      	bne.n	8003bec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003be6:	2310      	movs	r3, #16
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	e001      	b.n	8003bf0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003bec:	2320      	movs	r3, #32
 8003bee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d802      	bhi.n	8003bfe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003bfe:	2001      	movs	r0, #1
 8003c00:	f001 f9d2 	bl	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c04:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c0e:	d125      	bne.n	8003c5c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d010      	beq.n	8003c3a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c22:	4613      	mov	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c34:	3305      	adds	r3, #5
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	e01f      	b.n	8003c7a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c56:	3305      	adds	r3, #5
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	e00e      	b.n	8003c7a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c76:	3305      	adds	r3, #5
 8003c78:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	4a5c      	ldr	r2, [pc, #368]	; (8003df0 <HAL_I2S_Init+0x270>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	08db      	lsrs	r3, r3, #3
 8003c84:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	085b      	lsrs	r3, r3, #1
 8003c96:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	61bb      	str	r3, [r7, #24]
 8003c9e:	e003      	b.n	8003ca8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d902      	bls.n	8003cb4 <HAL_I2S_Init+0x134>
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	2bff      	cmp	r3, #255	; 0xff
 8003cb2:	d907      	bls.n	8003cc4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	f043 0210 	orr.w	r2, r3, #16
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e08f      	b.n	8003de4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	ea42 0103 	orr.w	r1, r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ce2:	f023 030f 	bic.w	r3, r3, #15
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6851      	ldr	r1, [r2, #4]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6892      	ldr	r2, [r2, #8]
 8003cee:	4311      	orrs	r1, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	68d2      	ldr	r2, [r2, #12]
 8003cf4:	4311      	orrs	r1, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6992      	ldr	r2, [r2, #24]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d06:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d161      	bne.n	8003dd4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a38      	ldr	r2, [pc, #224]	; (8003df4 <HAL_I2S_Init+0x274>)
 8003d14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a37      	ldr	r2, [pc, #220]	; (8003df8 <HAL_I2S_Init+0x278>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d101      	bne.n	8003d24 <HAL_I2S_Init+0x1a4>
 8003d20:	4b36      	ldr	r3, [pc, #216]	; (8003dfc <HAL_I2S_Init+0x27c>)
 8003d22:	e001      	b.n	8003d28 <HAL_I2S_Init+0x1a8>
 8003d24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6812      	ldr	r2, [r2, #0]
 8003d2e:	4932      	ldr	r1, [pc, #200]	; (8003df8 <HAL_I2S_Init+0x278>)
 8003d30:	428a      	cmp	r2, r1
 8003d32:	d101      	bne.n	8003d38 <HAL_I2S_Init+0x1b8>
 8003d34:	4a31      	ldr	r2, [pc, #196]	; (8003dfc <HAL_I2S_Init+0x27c>)
 8003d36:	e001      	b.n	8003d3c <HAL_I2S_Init+0x1bc>
 8003d38:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003d3c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d40:	f023 030f 	bic.w	r3, r3, #15
 8003d44:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2b      	ldr	r2, [pc, #172]	; (8003df8 <HAL_I2S_Init+0x278>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d101      	bne.n	8003d54 <HAL_I2S_Init+0x1d4>
 8003d50:	4b2a      	ldr	r3, [pc, #168]	; (8003dfc <HAL_I2S_Init+0x27c>)
 8003d52:	e001      	b.n	8003d58 <HAL_I2S_Init+0x1d8>
 8003d54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d58:	2202      	movs	r2, #2
 8003d5a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a25      	ldr	r2, [pc, #148]	; (8003df8 <HAL_I2S_Init+0x278>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d101      	bne.n	8003d6a <HAL_I2S_Init+0x1ea>
 8003d66:	4b25      	ldr	r3, [pc, #148]	; (8003dfc <HAL_I2S_Init+0x27c>)
 8003d68:	e001      	b.n	8003d6e <HAL_I2S_Init+0x1ee>
 8003d6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d7a:	d003      	beq.n	8003d84 <HAL_I2S_Init+0x204>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d103      	bne.n	8003d8c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	e001      	b.n	8003d90 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003da4:	4313      	orrs	r3, r2
 8003da6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003dae:	4313      	orrs	r3, r2
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	897b      	ldrh	r3, [r7, #10]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003dbc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a0d      	ldr	r2, [pc, #52]	; (8003df8 <HAL_I2S_Init+0x278>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d101      	bne.n	8003dcc <HAL_I2S_Init+0x24c>
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <HAL_I2S_Init+0x27c>)
 8003dca:	e001      	b.n	8003dd0 <HAL_I2S_Init+0x250>
 8003dcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dd0:	897a      	ldrh	r2, [r7, #10]
 8003dd2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3720      	adds	r7, #32
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	08003ef7 	.word	0x08003ef7
 8003df0:	cccccccd 	.word	0xcccccccd
 8003df4:	0800400d 	.word	0x0800400d
 8003df8:	40003800 	.word	0x40003800
 8003dfc:	40003400 	.word	0x40003400

08003e00 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	881a      	ldrh	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	1c9a      	adds	r2, r3, #2
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10e      	bne.n	8003e90 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e80:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff ffb8 	bl	8003e00 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e90:	bf00      	nop
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	b292      	uxth	r2, r2
 8003eac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	1c9a      	adds	r2, r3, #2
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10e      	bne.n	8003eee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ede:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff ff93 	bl	8003e14 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b086      	sub	sp, #24
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d13a      	bne.n	8003f88 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d109      	bne.n	8003f30 <I2S_IRQHandler+0x3a>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b40      	cmp	r3, #64	; 0x40
 8003f28:	d102      	bne.n	8003f30 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff ffb4 	bl	8003e98 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	d126      	bne.n	8003f88 <I2S_IRQHandler+0x92>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	d11f      	bne.n	8003f88 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f58:	2300      	movs	r3, #0
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	f043 0202 	orr.w	r2, r3, #2
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff ff50 	bl	8003e28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b03      	cmp	r3, #3
 8003f92:	d136      	bne.n	8004002 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d109      	bne.n	8003fb2 <I2S_IRQHandler+0xbc>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa8:	2b80      	cmp	r3, #128	; 0x80
 8003faa:	d102      	bne.n	8003fb2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff ff45 	bl	8003e3c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d122      	bne.n	8004002 <I2S_IRQHandler+0x10c>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b20      	cmp	r3, #32
 8003fc8:	d11b      	bne.n	8004002 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fd8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff4:	f043 0204 	orr.w	r2, r3, #4
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7ff ff13 	bl	8003e28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004002:	bf00      	nop
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a92      	ldr	r2, [pc, #584]	; (800426c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d101      	bne.n	800402a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004026:	4b92      	ldr	r3, [pc, #584]	; (8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004028:	e001      	b.n	800402e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800402a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a8b      	ldr	r2, [pc, #556]	; (800426c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d101      	bne.n	8004048 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004044:	4b8a      	ldr	r3, [pc, #552]	; (8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004046:	e001      	b.n	800404c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004048:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004058:	d004      	beq.n	8004064 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	f040 8099 	bne.w	8004196 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b02      	cmp	r3, #2
 800406c:	d107      	bne.n	800407e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f925 	bl	80042c8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b01      	cmp	r3, #1
 8004086:	d107      	bne.n	8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f9c8 	bl	8004428 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409e:	2b40      	cmp	r3, #64	; 0x40
 80040a0:	d13a      	bne.n	8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f003 0320 	and.w	r3, r3, #32
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d035      	beq.n	8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a6e      	ldr	r2, [pc, #440]	; (800426c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d101      	bne.n	80040ba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80040b6:	4b6e      	ldr	r3, [pc, #440]	; (8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040b8:	e001      	b.n	80040be <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80040ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4969      	ldr	r1, [pc, #420]	; (800426c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040c6:	428b      	cmp	r3, r1
 80040c8:	d101      	bne.n	80040ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80040ca:	4b69      	ldr	r3, [pc, #420]	; (8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040cc:	e001      	b.n	80040d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80040ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040d6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	f043 0202 	orr.w	r2, r3, #2
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff fe88 	bl	8003e28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b08      	cmp	r3, #8
 8004120:	f040 80c3 	bne.w	80042aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 80bd 	beq.w	80042aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800413e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a49      	ldr	r2, [pc, #292]	; (800426c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d101      	bne.n	800414e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800414a:	4b49      	ldr	r3, [pc, #292]	; (8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800414c:	e001      	b.n	8004152 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800414e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4944      	ldr	r1, [pc, #272]	; (800426c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800415a:	428b      	cmp	r3, r1
 800415c:	d101      	bne.n	8004162 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800415e:	4b44      	ldr	r3, [pc, #272]	; (8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004160:	e001      	b.n	8004166 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004162:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004166:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800416a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800416c:	2300      	movs	r3, #0
 800416e:	60bb      	str	r3, [r7, #8]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	60bb      	str	r3, [r7, #8]
 8004178:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	f043 0204 	orr.w	r2, r3, #4
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff fe4a 	bl	8003e28 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004194:	e089      	b.n	80042aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b02      	cmp	r3, #2
 800419e:	d107      	bne.n	80041b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f8be 	bl	800432c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d107      	bne.n	80041ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f8fd 	bl	80043c4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d0:	2b40      	cmp	r3, #64	; 0x40
 80041d2:	d12f      	bne.n	8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d02a      	beq.n	8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041ec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a1e      	ldr	r2, [pc, #120]	; (800426c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d101      	bne.n	80041fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80041f8:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041fa:	e001      	b.n	8004200 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80041fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4919      	ldr	r1, [pc, #100]	; (800426c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004208:	428b      	cmp	r3, r1
 800420a:	d101      	bne.n	8004210 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800420c:	4b18      	ldr	r3, [pc, #96]	; (8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800420e:	e001      	b.n	8004214 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004210:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004214:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004218:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	f043 0202 	orr.w	r2, r3, #2
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff fdfa 	bl	8003e28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b08      	cmp	r3, #8
 800423c:	d136      	bne.n	80042ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d031      	beq.n	80042ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a07      	ldr	r2, [pc, #28]	; (800426c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d101      	bne.n	8004256 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004252:	4b07      	ldr	r3, [pc, #28]	; (8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004254:	e001      	b.n	800425a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004256:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4902      	ldr	r1, [pc, #8]	; (800426c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004262:	428b      	cmp	r3, r1
 8004264:	d106      	bne.n	8004274 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004266:	4b02      	ldr	r3, [pc, #8]	; (8004270 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004268:	e006      	b.n	8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800426a:	bf00      	nop
 800426c:	40003800 	.word	0x40003800
 8004270:	40003400 	.word	0x40003400
 8004274:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004278:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800427c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800428c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	f043 0204 	orr.w	r2, r3, #4
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7ff fdc0 	bl	8003e28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042a8:	e000      	b.n	80042ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042aa:	bf00      	nop
}
 80042ac:	bf00      	nop
 80042ae:	3720      	adds	r7, #32
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	1c99      	adds	r1, r3, #2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6251      	str	r1, [r2, #36]	; 0x24
 80042da:	881a      	ldrh	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d113      	bne.n	8004322 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004308:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800430e:	b29b      	uxth	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d106      	bne.n	8004322 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff ffc9 	bl	80042b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	1c99      	adds	r1, r3, #2
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6251      	str	r1, [r2, #36]	; 0x24
 800433e:	8819      	ldrh	r1, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a1d      	ldr	r2, [pc, #116]	; (80043bc <I2SEx_TxISR_I2SExt+0x90>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d101      	bne.n	800434e <I2SEx_TxISR_I2SExt+0x22>
 800434a:	4b1d      	ldr	r3, [pc, #116]	; (80043c0 <I2SEx_TxISR_I2SExt+0x94>)
 800434c:	e001      	b.n	8004352 <I2SEx_TxISR_I2SExt+0x26>
 800434e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004352:	460a      	mov	r2, r1
 8004354:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435a:	b29b      	uxth	r3, r3
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004368:	b29b      	uxth	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d121      	bne.n	80043b2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a12      	ldr	r2, [pc, #72]	; (80043bc <I2SEx_TxISR_I2SExt+0x90>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d101      	bne.n	800437c <I2SEx_TxISR_I2SExt+0x50>
 8004378:	4b11      	ldr	r3, [pc, #68]	; (80043c0 <I2SEx_TxISR_I2SExt+0x94>)
 800437a:	e001      	b.n	8004380 <I2SEx_TxISR_I2SExt+0x54>
 800437c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	490d      	ldr	r1, [pc, #52]	; (80043bc <I2SEx_TxISR_I2SExt+0x90>)
 8004388:	428b      	cmp	r3, r1
 800438a:	d101      	bne.n	8004390 <I2SEx_TxISR_I2SExt+0x64>
 800438c:	4b0c      	ldr	r3, [pc, #48]	; (80043c0 <I2SEx_TxISR_I2SExt+0x94>)
 800438e:	e001      	b.n	8004394 <I2SEx_TxISR_I2SExt+0x68>
 8004390:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004394:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004398:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d106      	bne.n	80043b2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff ff81 	bl	80042b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40003800 	.word	0x40003800
 80043c0:	40003400 	.word	0x40003400

080043c4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68d8      	ldr	r0, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	1c99      	adds	r1, r3, #2
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	62d1      	str	r1, [r2, #44]	; 0x2c
 80043dc:	b282      	uxth	r2, r0
 80043de:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d113      	bne.n	8004420 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004406:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff ff4a 	bl	80042b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a20      	ldr	r2, [pc, #128]	; (80044b8 <I2SEx_RxISR_I2SExt+0x90>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d101      	bne.n	800443e <I2SEx_RxISR_I2SExt+0x16>
 800443a:	4b20      	ldr	r3, [pc, #128]	; (80044bc <I2SEx_RxISR_I2SExt+0x94>)
 800443c:	e001      	b.n	8004442 <I2SEx_RxISR_I2SExt+0x1a>
 800443e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004442:	68d8      	ldr	r0, [r3, #12]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	1c99      	adds	r1, r3, #2
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800444e:	b282      	uxth	r2, r0
 8004450:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d121      	bne.n	80044ae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a12      	ldr	r2, [pc, #72]	; (80044b8 <I2SEx_RxISR_I2SExt+0x90>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d101      	bne.n	8004478 <I2SEx_RxISR_I2SExt+0x50>
 8004474:	4b11      	ldr	r3, [pc, #68]	; (80044bc <I2SEx_RxISR_I2SExt+0x94>)
 8004476:	e001      	b.n	800447c <I2SEx_RxISR_I2SExt+0x54>
 8004478:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	490d      	ldr	r1, [pc, #52]	; (80044b8 <I2SEx_RxISR_I2SExt+0x90>)
 8004484:	428b      	cmp	r3, r1
 8004486:	d101      	bne.n	800448c <I2SEx_RxISR_I2SExt+0x64>
 8004488:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <I2SEx_RxISR_I2SExt+0x94>)
 800448a:	e001      	b.n	8004490 <I2SEx_RxISR_I2SExt+0x68>
 800448c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004490:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004494:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d106      	bne.n	80044ae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff ff03 	bl	80042b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40003800 	.word	0x40003800
 80044bc:	40003400 	.word	0x40003400

080044c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e267      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d075      	beq.n	80045ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044de:	4b88      	ldr	r3, [pc, #544]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 030c 	and.w	r3, r3, #12
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d00c      	beq.n	8004504 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ea:	4b85      	ldr	r3, [pc, #532]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d112      	bne.n	800451c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044f6:	4b82      	ldr	r3, [pc, #520]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004502:	d10b      	bne.n	800451c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004504:	4b7e      	ldr	r3, [pc, #504]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d05b      	beq.n	80045c8 <HAL_RCC_OscConfig+0x108>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d157      	bne.n	80045c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e242      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004524:	d106      	bne.n	8004534 <HAL_RCC_OscConfig+0x74>
 8004526:	4b76      	ldr	r3, [pc, #472]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a75      	ldr	r2, [pc, #468]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 800452c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	e01d      	b.n	8004570 <HAL_RCC_OscConfig+0xb0>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800453c:	d10c      	bne.n	8004558 <HAL_RCC_OscConfig+0x98>
 800453e:	4b70      	ldr	r3, [pc, #448]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a6f      	ldr	r2, [pc, #444]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	4b6d      	ldr	r3, [pc, #436]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a6c      	ldr	r2, [pc, #432]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	e00b      	b.n	8004570 <HAL_RCC_OscConfig+0xb0>
 8004558:	4b69      	ldr	r3, [pc, #420]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a68      	ldr	r2, [pc, #416]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 800455e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	4b66      	ldr	r3, [pc, #408]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a65      	ldr	r2, [pc, #404]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 800456a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800456e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d013      	beq.n	80045a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004578:	f7fc fe9e 	bl	80012b8 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004580:	f7fc fe9a 	bl	80012b8 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	; 0x64
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e207      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004592:	4b5b      	ldr	r3, [pc, #364]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0f0      	beq.n	8004580 <HAL_RCC_OscConfig+0xc0>
 800459e:	e014      	b.n	80045ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a0:	f7fc fe8a 	bl	80012b8 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045a8:	f7fc fe86 	bl	80012b8 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b64      	cmp	r3, #100	; 0x64
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e1f3      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ba:	4b51      	ldr	r3, [pc, #324]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0xe8>
 80045c6:	e000      	b.n	80045ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d063      	beq.n	800469e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045d6:	4b4a      	ldr	r3, [pc, #296]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 030c 	and.w	r3, r3, #12
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045e2:	4b47      	ldr	r3, [pc, #284]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d11c      	bne.n	8004628 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ee:	4b44      	ldr	r3, [pc, #272]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d116      	bne.n	8004628 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fa:	4b41      	ldr	r3, [pc, #260]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <HAL_RCC_OscConfig+0x152>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d001      	beq.n	8004612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e1c7      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004612:	4b3b      	ldr	r3, [pc, #236]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	4937      	ldr	r1, [pc, #220]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004622:	4313      	orrs	r3, r2
 8004624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004626:	e03a      	b.n	800469e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d020      	beq.n	8004672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004630:	4b34      	ldr	r3, [pc, #208]	; (8004704 <HAL_RCC_OscConfig+0x244>)
 8004632:	2201      	movs	r2, #1
 8004634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004636:	f7fc fe3f 	bl	80012b8 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800463e:	f7fc fe3b 	bl	80012b8 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e1a8      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004650:	4b2b      	ldr	r3, [pc, #172]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465c:	4b28      	ldr	r3, [pc, #160]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4925      	ldr	r1, [pc, #148]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 800466c:	4313      	orrs	r3, r2
 800466e:	600b      	str	r3, [r1, #0]
 8004670:	e015      	b.n	800469e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004672:	4b24      	ldr	r3, [pc, #144]	; (8004704 <HAL_RCC_OscConfig+0x244>)
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7fc fe1e 	bl	80012b8 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004680:	f7fc fe1a 	bl	80012b8 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e187      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004692:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d036      	beq.n	8004718 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d016      	beq.n	80046e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046b2:	4b15      	ldr	r3, [pc, #84]	; (8004708 <HAL_RCC_OscConfig+0x248>)
 80046b4:	2201      	movs	r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b8:	f7fc fdfe 	bl	80012b8 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046c0:	f7fc fdfa 	bl	80012b8 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e167      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d2:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <HAL_RCC_OscConfig+0x240>)
 80046d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0x200>
 80046de:	e01b      	b.n	8004718 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046e0:	4b09      	ldr	r3, [pc, #36]	; (8004708 <HAL_RCC_OscConfig+0x248>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e6:	f7fc fde7 	bl	80012b8 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ec:	e00e      	b.n	800470c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046ee:	f7fc fde3 	bl	80012b8 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d907      	bls.n	800470c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e150      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
 8004700:	40023800 	.word	0x40023800
 8004704:	42470000 	.word	0x42470000
 8004708:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800470c:	4b88      	ldr	r3, [pc, #544]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 800470e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1ea      	bne.n	80046ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 8097 	beq.w	8004854 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004726:	2300      	movs	r3, #0
 8004728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800472a:	4b81      	ldr	r3, [pc, #516]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10f      	bne.n	8004756 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004736:	2300      	movs	r3, #0
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	4b7d      	ldr	r3, [pc, #500]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	4a7c      	ldr	r2, [pc, #496]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 8004740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004744:	6413      	str	r3, [r2, #64]	; 0x40
 8004746:	4b7a      	ldr	r3, [pc, #488]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474e:	60bb      	str	r3, [r7, #8]
 8004750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004752:	2301      	movs	r3, #1
 8004754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004756:	4b77      	ldr	r3, [pc, #476]	; (8004934 <HAL_RCC_OscConfig+0x474>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475e:	2b00      	cmp	r3, #0
 8004760:	d118      	bne.n	8004794 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004762:	4b74      	ldr	r3, [pc, #464]	; (8004934 <HAL_RCC_OscConfig+0x474>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a73      	ldr	r2, [pc, #460]	; (8004934 <HAL_RCC_OscConfig+0x474>)
 8004768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800476c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800476e:	f7fc fda3 	bl	80012b8 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004776:	f7fc fd9f 	bl	80012b8 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e10c      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004788:	4b6a      	ldr	r3, [pc, #424]	; (8004934 <HAL_RCC_OscConfig+0x474>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d106      	bne.n	80047aa <HAL_RCC_OscConfig+0x2ea>
 800479c:	4b64      	ldr	r3, [pc, #400]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	4a63      	ldr	r2, [pc, #396]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	6713      	str	r3, [r2, #112]	; 0x70
 80047a8:	e01c      	b.n	80047e4 <HAL_RCC_OscConfig+0x324>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b05      	cmp	r3, #5
 80047b0:	d10c      	bne.n	80047cc <HAL_RCC_OscConfig+0x30c>
 80047b2:	4b5f      	ldr	r3, [pc, #380]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b6:	4a5e      	ldr	r2, [pc, #376]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80047b8:	f043 0304 	orr.w	r3, r3, #4
 80047bc:	6713      	str	r3, [r2, #112]	; 0x70
 80047be:	4b5c      	ldr	r3, [pc, #368]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	4a5b      	ldr	r2, [pc, #364]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	6713      	str	r3, [r2, #112]	; 0x70
 80047ca:	e00b      	b.n	80047e4 <HAL_RCC_OscConfig+0x324>
 80047cc:	4b58      	ldr	r3, [pc, #352]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d0:	4a57      	ldr	r2, [pc, #348]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80047d2:	f023 0301 	bic.w	r3, r3, #1
 80047d6:	6713      	str	r3, [r2, #112]	; 0x70
 80047d8:	4b55      	ldr	r3, [pc, #340]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	4a54      	ldr	r2, [pc, #336]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80047de:	f023 0304 	bic.w	r3, r3, #4
 80047e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d015      	beq.n	8004818 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ec:	f7fc fd64 	bl	80012b8 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f2:	e00a      	b.n	800480a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047f4:	f7fc fd60 	bl	80012b8 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e0cb      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480a:	4b49      	ldr	r3, [pc, #292]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 800480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0ee      	beq.n	80047f4 <HAL_RCC_OscConfig+0x334>
 8004816:	e014      	b.n	8004842 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004818:	f7fc fd4e 	bl	80012b8 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800481e:	e00a      	b.n	8004836 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004820:	f7fc fd4a 	bl	80012b8 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	f241 3288 	movw	r2, #5000	; 0x1388
 800482e:	4293      	cmp	r3, r2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e0b5      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004836:	4b3e      	ldr	r3, [pc, #248]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1ee      	bne.n	8004820 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004842:	7dfb      	ldrb	r3, [r7, #23]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d105      	bne.n	8004854 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004848:	4b39      	ldr	r3, [pc, #228]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	4a38      	ldr	r2, [pc, #224]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 800484e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004852:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80a1 	beq.w	80049a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800485e:	4b34      	ldr	r3, [pc, #208]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 030c 	and.w	r3, r3, #12
 8004866:	2b08      	cmp	r3, #8
 8004868:	d05c      	beq.n	8004924 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d141      	bne.n	80048f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004872:	4b31      	ldr	r3, [pc, #196]	; (8004938 <HAL_RCC_OscConfig+0x478>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004878:	f7fc fd1e 	bl	80012b8 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004880:	f7fc fd1a 	bl	80012b8 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e087      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004892:	4b27      	ldr	r3, [pc, #156]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69da      	ldr	r2, [r3, #28]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	019b      	lsls	r3, r3, #6
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	3b01      	subs	r3, #1
 80048b8:	041b      	lsls	r3, r3, #16
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	061b      	lsls	r3, r3, #24
 80048c2:	491b      	ldr	r1, [pc, #108]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c8:	4b1b      	ldr	r3, [pc, #108]	; (8004938 <HAL_RCC_OscConfig+0x478>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ce:	f7fc fcf3 	bl	80012b8 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d6:	f7fc fcef 	bl	80012b8 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e05c      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e8:	4b11      	ldr	r3, [pc, #68]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0f0      	beq.n	80048d6 <HAL_RCC_OscConfig+0x416>
 80048f4:	e054      	b.n	80049a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f6:	4b10      	ldr	r3, [pc, #64]	; (8004938 <HAL_RCC_OscConfig+0x478>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fc fcdc 	bl	80012b8 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004904:	f7fc fcd8 	bl	80012b8 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e045      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004916:	4b06      	ldr	r3, [pc, #24]	; (8004930 <HAL_RCC_OscConfig+0x470>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x444>
 8004922:	e03d      	b.n	80049a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d107      	bne.n	800493c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e038      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
 8004930:	40023800 	.word	0x40023800
 8004934:	40007000 	.word	0x40007000
 8004938:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800493c:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <HAL_RCC_OscConfig+0x4ec>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d028      	beq.n	800499c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004954:	429a      	cmp	r2, r3
 8004956:	d121      	bne.n	800499c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004962:	429a      	cmp	r2, r3
 8004964:	d11a      	bne.n	800499c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800496c:	4013      	ands	r3, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004972:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004974:	4293      	cmp	r3, r2
 8004976:	d111      	bne.n	800499c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004982:	085b      	lsrs	r3, r3, #1
 8004984:	3b01      	subs	r3, #1
 8004986:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004988:	429a      	cmp	r2, r3
 800498a:	d107      	bne.n	800499c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004998:	429a      	cmp	r2, r3
 800499a:	d001      	beq.n	80049a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e000      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	40023800 	.word	0x40023800

080049b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0cc      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049c4:	4b68      	ldr	r3, [pc, #416]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d90c      	bls.n	80049ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d2:	4b65      	ldr	r3, [pc, #404]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049da:	4b63      	ldr	r3, [pc, #396]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d001      	beq.n	80049ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e0b8      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d020      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a04:	4b59      	ldr	r3, [pc, #356]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	4a58      	ldr	r2, [pc, #352]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a1c:	4b53      	ldr	r3, [pc, #332]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4a52      	ldr	r2, [pc, #328]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a28:	4b50      	ldr	r3, [pc, #320]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	494d      	ldr	r1, [pc, #308]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d044      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d107      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a4e:	4b47      	ldr	r3, [pc, #284]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d119      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e07f      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d003      	beq.n	8004a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	d107      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a6e:	4b3f      	ldr	r3, [pc, #252]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d109      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e06f      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7e:	4b3b      	ldr	r3, [pc, #236]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e067      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a8e:	4b37      	ldr	r3, [pc, #220]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f023 0203 	bic.w	r2, r3, #3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	4934      	ldr	r1, [pc, #208]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aa0:	f7fc fc0a 	bl	80012b8 <HAL_GetTick>
 8004aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa6:	e00a      	b.n	8004abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa8:	f7fc fc06 	bl	80012b8 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e04f      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004abe:	4b2b      	ldr	r3, [pc, #172]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 020c 	and.w	r2, r3, #12
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d1eb      	bne.n	8004aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ad0:	4b25      	ldr	r3, [pc, #148]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d20c      	bcs.n	8004af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ade:	4b22      	ldr	r3, [pc, #136]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae6:	4b20      	ldr	r3, [pc, #128]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d001      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e032      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b04:	4b19      	ldr	r3, [pc, #100]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4916      	ldr	r1, [pc, #88]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b22:	4b12      	ldr	r3, [pc, #72]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	490e      	ldr	r1, [pc, #56]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b36:	f000 f821 	bl	8004b7c <HAL_RCC_GetSysClockFreq>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	490a      	ldr	r1, [pc, #40]	; (8004b70 <HAL_RCC_ClockConfig+0x1c0>)
 8004b48:	5ccb      	ldrb	r3, [r1, r3]
 8004b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4e:	4a09      	ldr	r2, [pc, #36]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b52:	4b09      	ldr	r3, [pc, #36]	; (8004b78 <HAL_RCC_ClockConfig+0x1c8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fc fb6a 	bl	8001230 <HAL_InitTick>

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40023c00 	.word	0x40023c00
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	08008fd0 	.word	0x08008fd0
 8004b74:	20000000 	.word	0x20000000
 8004b78:	20000004 	.word	0x20000004

08004b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b80:	b094      	sub	sp, #80	; 0x50
 8004b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	647b      	str	r3, [r7, #68]	; 0x44
 8004b88:	2300      	movs	r3, #0
 8004b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b94:	4b79      	ldr	r3, [pc, #484]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 030c 	and.w	r3, r3, #12
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d00d      	beq.n	8004bbc <HAL_RCC_GetSysClockFreq+0x40>
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	f200 80e1 	bhi.w	8004d68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d003      	beq.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004bae:	e0db      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bb0:	4b73      	ldr	r3, [pc, #460]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bb2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004bb4:	e0db      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bb6:	4b73      	ldr	r3, [pc, #460]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bba:	e0d8      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bbc:	4b6f      	ldr	r3, [pc, #444]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bc4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bc6:	4b6d      	ldr	r3, [pc, #436]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d063      	beq.n	8004c9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bd2:	4b6a      	ldr	r3, [pc, #424]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	099b      	lsrs	r3, r3, #6
 8004bd8:	2200      	movs	r2, #0
 8004bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bdc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be4:	633b      	str	r3, [r7, #48]	; 0x30
 8004be6:	2300      	movs	r3, #0
 8004be8:	637b      	str	r3, [r7, #52]	; 0x34
 8004bea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004bee:	4622      	mov	r2, r4
 8004bf0:	462b      	mov	r3, r5
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f04f 0100 	mov.w	r1, #0
 8004bfa:	0159      	lsls	r1, r3, #5
 8004bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c00:	0150      	lsls	r0, r2, #5
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4621      	mov	r1, r4
 8004c08:	1a51      	subs	r1, r2, r1
 8004c0a:	6139      	str	r1, [r7, #16]
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c20:	4659      	mov	r1, fp
 8004c22:	018b      	lsls	r3, r1, #6
 8004c24:	4651      	mov	r1, sl
 8004c26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c2a:	4651      	mov	r1, sl
 8004c2c:	018a      	lsls	r2, r1, #6
 8004c2e:	4651      	mov	r1, sl
 8004c30:	ebb2 0801 	subs.w	r8, r2, r1
 8004c34:	4659      	mov	r1, fp
 8004c36:	eb63 0901 	sbc.w	r9, r3, r1
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c4e:	4690      	mov	r8, r2
 8004c50:	4699      	mov	r9, r3
 8004c52:	4623      	mov	r3, r4
 8004c54:	eb18 0303 	adds.w	r3, r8, r3
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	462b      	mov	r3, r5
 8004c5c:	eb49 0303 	adc.w	r3, r9, r3
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c6e:	4629      	mov	r1, r5
 8004c70:	024b      	lsls	r3, r1, #9
 8004c72:	4621      	mov	r1, r4
 8004c74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c78:	4621      	mov	r1, r4
 8004c7a:	024a      	lsls	r2, r1, #9
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	4619      	mov	r1, r3
 8004c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c82:	2200      	movs	r2, #0
 8004c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c8c:	f7fb faa4 	bl	80001d8 <__aeabi_uldivmod>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4613      	mov	r3, r2
 8004c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c98:	e058      	b.n	8004d4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c9a:	4b38      	ldr	r3, [pc, #224]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	099b      	lsrs	r3, r3, #6
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004caa:	623b      	str	r3, [r7, #32]
 8004cac:	2300      	movs	r3, #0
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cb4:	4642      	mov	r2, r8
 8004cb6:	464b      	mov	r3, r9
 8004cb8:	f04f 0000 	mov.w	r0, #0
 8004cbc:	f04f 0100 	mov.w	r1, #0
 8004cc0:	0159      	lsls	r1, r3, #5
 8004cc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cc6:	0150      	lsls	r0, r2, #5
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4641      	mov	r1, r8
 8004cce:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ce4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ce8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cec:	ebb2 040a 	subs.w	r4, r2, sl
 8004cf0:	eb63 050b 	sbc.w	r5, r3, fp
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	00eb      	lsls	r3, r5, #3
 8004cfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d02:	00e2      	lsls	r2, r4, #3
 8004d04:	4614      	mov	r4, r2
 8004d06:	461d      	mov	r5, r3
 8004d08:	4643      	mov	r3, r8
 8004d0a:	18e3      	adds	r3, r4, r3
 8004d0c:	603b      	str	r3, [r7, #0]
 8004d0e:	464b      	mov	r3, r9
 8004d10:	eb45 0303 	adc.w	r3, r5, r3
 8004d14:	607b      	str	r3, [r7, #4]
 8004d16:	f04f 0200 	mov.w	r2, #0
 8004d1a:	f04f 0300 	mov.w	r3, #0
 8004d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d22:	4629      	mov	r1, r5
 8004d24:	028b      	lsls	r3, r1, #10
 8004d26:	4621      	mov	r1, r4
 8004d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	028a      	lsls	r2, r1, #10
 8004d30:	4610      	mov	r0, r2
 8004d32:	4619      	mov	r1, r3
 8004d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d36:	2200      	movs	r2, #0
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	61fa      	str	r2, [r7, #28]
 8004d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d40:	f7fb fa4a 	bl	80001d8 <__aeabi_uldivmod>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4613      	mov	r3, r2
 8004d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	0c1b      	lsrs	r3, r3, #16
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	3301      	adds	r3, #1
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d66:	e002      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d68:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3750      	adds	r7, #80	; 0x50
 8004d74:	46bd      	mov	sp, r7
 8004d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	00f42400 	.word	0x00f42400
 8004d84:	007a1200 	.word	0x007a1200

08004d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d8c:	4b03      	ldr	r3, [pc, #12]	; (8004d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	20000000 	.word	0x20000000

08004da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004da4:	f7ff fff0 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8004da8:	4602      	mov	r2, r0
 8004daa:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	0a9b      	lsrs	r3, r3, #10
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	4903      	ldr	r1, [pc, #12]	; (8004dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004db6:	5ccb      	ldrb	r3, [r1, r3]
 8004db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	08008fe0 	.word	0x08008fe0

08004dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d105      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d038      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004df0:	4b68      	ldr	r3, [pc, #416]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004df6:	f7fc fa5f 	bl	80012b8 <HAL_GetTick>
 8004dfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dfc:	e008      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004dfe:	f7fc fa5b 	bl	80012b8 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e0bd      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e10:	4b61      	ldr	r3, [pc, #388]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1f0      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	019b      	lsls	r3, r3, #6
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	071b      	lsls	r3, r3, #28
 8004e2e:	495a      	ldr	r1, [pc, #360]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e36:	4b57      	ldr	r3, [pc, #348]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e3c:	f7fc fa3c 	bl	80012b8 <HAL_GetTick>
 8004e40:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e44:	f7fc fa38 	bl	80012b8 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e09a      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e56:	4b50      	ldr	r3, [pc, #320]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0f0      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 8083 	beq.w	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	4b48      	ldr	r3, [pc, #288]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	4a47      	ldr	r2, [pc, #284]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8004e80:	4b45      	ldr	r3, [pc, #276]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e8c:	4b43      	ldr	r3, [pc, #268]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a42      	ldr	r2, [pc, #264]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e96:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e98:	f7fc fa0e 	bl	80012b8 <HAL_GetTick>
 8004e9c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ea0:	f7fc fa0a 	bl	80012b8 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e06c      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004eb2:	4b3a      	ldr	r3, [pc, #232]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ebe:	4b36      	ldr	r3, [pc, #216]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d02f      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d028      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004edc:	4b2e      	ldr	r3, [pc, #184]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ee6:	4b2e      	ldr	r3, [pc, #184]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ee8:	2201      	movs	r2, #1
 8004eea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eec:	4b2c      	ldr	r3, [pc, #176]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ef2:	4a29      	ldr	r2, [pc, #164]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ef8:	4b27      	ldr	r3, [pc, #156]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d114      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f04:	f7fc f9d8 	bl	80012b8 <HAL_GetTick>
 8004f08:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f0a:	e00a      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f0c:	f7fc f9d4 	bl	80012b8 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e034      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f22:	4b1d      	ldr	r3, [pc, #116]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0ee      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f3a:	d10d      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004f3c:	4b16      	ldr	r3, [pc, #88]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f50:	4911      	ldr	r1, [pc, #68]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	608b      	str	r3, [r1, #8]
 8004f56:	e005      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004f58:	4b0f      	ldr	r3, [pc, #60]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	4a0e      	ldr	r2, [pc, #56]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f62:	6093      	str	r3, [r2, #8]
 8004f64:	4b0c      	ldr	r3, [pc, #48]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f70:	4909      	ldr	r1, [pc, #36]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	7d1a      	ldrb	r2, [r3, #20]
 8004f86:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f88:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	42470068 	.word	0x42470068
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	40007000 	.word	0x40007000
 8004fa0:	42470e40 	.word	0x42470e40
 8004fa4:	424711e0 	.word	0x424711e0

08004fa8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d140      	bne.n	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004fc6:	4b24      	ldr	r3, [pc, #144]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d131      	bne.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fdc:	4b1f      	ldr	r3, [pc, #124]	; (800505c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004fde:	617b      	str	r3, [r7, #20]
          break;
 8004fe0:	e031      	b.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004fe2:	4b1d      	ldr	r3, [pc, #116]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fee:	d109      	bne.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004ff0:	4b19      	ldr	r3, [pc, #100]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ff6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ffa:	4a19      	ldr	r2, [pc, #100]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	e008      	b.n	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005004:	4b14      	ldr	r3, [pc, #80]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800500e:	4a15      	ldr	r2, [pc, #84]	; (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005010:	fbb2 f3f3 	udiv	r3, r2, r3
 8005014:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005016:	4b10      	ldr	r3, [pc, #64]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800501c:	099b      	lsrs	r3, r3, #6
 800501e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	fb02 f303 	mul.w	r3, r2, r3
 8005028:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800502a:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800502c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005030:	0f1b      	lsrs	r3, r3, #28
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	fbb2 f3f3 	udiv	r3, r2, r3
 800503c:	617b      	str	r3, [r7, #20]
          break;
 800503e:	e002      	b.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]
          break;
 8005044:	bf00      	nop
        }
      }
      break;
 8005046:	bf00      	nop
    }
  }
  return frequency;
 8005048:	697b      	ldr	r3, [r7, #20]
}
 800504a:	4618      	mov	r0, r3
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40023800 	.word	0x40023800
 800505c:	00bb8000 	.word	0x00bb8000
 8005060:	007a1200 	.word	0x007a1200
 8005064:	00f42400 	.word	0x00f42400

08005068 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e07b      	b.n	8005172 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	2b00      	cmp	r3, #0
 8005080:	d108      	bne.n	8005094 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800508a:	d009      	beq.n	80050a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	61da      	str	r2, [r3, #28]
 8005092:	e005      	b.n	80050a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fb ff88 	bl	8000fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	431a      	orrs	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005124:	ea42 0103 	orr.w	r1, r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	0c1b      	lsrs	r3, r3, #16
 800513e:	f003 0104 	and.w	r1, r3, #4
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	f003 0210 	and.w	r2, r3, #16
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005160:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b082      	sub	sp, #8
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e041      	b.n	8005210 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d106      	bne.n	80051a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7fb ff5d 	bl	8001060 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2202      	movs	r2, #2
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3304      	adds	r3, #4
 80051b6:	4619      	mov	r1, r3
 80051b8:	4610      	mov	r0, r2
 80051ba:	f000 f957 	bl	800546c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b01      	cmp	r3, #1
 800522a:	d001      	beq.n	8005230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e044      	b.n	80052ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0201 	orr.w	r2, r2, #1
 8005246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a1e      	ldr	r2, [pc, #120]	; (80052c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d018      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x6c>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525a:	d013      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x6c>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1a      	ldr	r2, [pc, #104]	; (80052cc <HAL_TIM_Base_Start_IT+0xb4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00e      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x6c>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a19      	ldr	r2, [pc, #100]	; (80052d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d009      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x6c>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a17      	ldr	r2, [pc, #92]	; (80052d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d004      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x6c>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a16      	ldr	r2, [pc, #88]	; (80052d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d111      	bne.n	80052a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b06      	cmp	r3, #6
 8005294:	d010      	beq.n	80052b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0201 	orr.w	r2, r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a6:	e007      	b.n	80052b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40010000 	.word	0x40010000
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800
 80052d4:	40000c00 	.word	0x40000c00
 80052d8:	40014000 	.word	0x40014000

080052dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <HAL_TIM_ConfigClockSource+0x1c>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e0b4      	b.n	8005462 <HAL_TIM_ConfigClockSource+0x186>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800531e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005330:	d03e      	beq.n	80053b0 <HAL_TIM_ConfigClockSource+0xd4>
 8005332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005336:	f200 8087 	bhi.w	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 800533a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533e:	f000 8086 	beq.w	800544e <HAL_TIM_ConfigClockSource+0x172>
 8005342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005346:	d87f      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005348:	2b70      	cmp	r3, #112	; 0x70
 800534a:	d01a      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0xa6>
 800534c:	2b70      	cmp	r3, #112	; 0x70
 800534e:	d87b      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005350:	2b60      	cmp	r3, #96	; 0x60
 8005352:	d050      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0x11a>
 8005354:	2b60      	cmp	r3, #96	; 0x60
 8005356:	d877      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005358:	2b50      	cmp	r3, #80	; 0x50
 800535a:	d03c      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0xfa>
 800535c:	2b50      	cmp	r3, #80	; 0x50
 800535e:	d873      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005360:	2b40      	cmp	r3, #64	; 0x40
 8005362:	d058      	beq.n	8005416 <HAL_TIM_ConfigClockSource+0x13a>
 8005364:	2b40      	cmp	r3, #64	; 0x40
 8005366:	d86f      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005368:	2b30      	cmp	r3, #48	; 0x30
 800536a:	d064      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0x15a>
 800536c:	2b30      	cmp	r3, #48	; 0x30
 800536e:	d86b      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005370:	2b20      	cmp	r3, #32
 8005372:	d060      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0x15a>
 8005374:	2b20      	cmp	r3, #32
 8005376:	d867      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005378:	2b00      	cmp	r3, #0
 800537a:	d05c      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0x15a>
 800537c:	2b10      	cmp	r3, #16
 800537e:	d05a      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0x15a>
 8005380:	e062      	b.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	6899      	ldr	r1, [r3, #8]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f000 f965 	bl	8005660 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	609a      	str	r2, [r3, #8]
      break;
 80053ae:	e04f      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6818      	ldr	r0, [r3, #0]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	6899      	ldr	r1, [r3, #8]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f000 f94e 	bl	8005660 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689a      	ldr	r2, [r3, #8]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053d2:	609a      	str	r2, [r3, #8]
      break;
 80053d4:	e03c      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6818      	ldr	r0, [r3, #0]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	6859      	ldr	r1, [r3, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	461a      	mov	r2, r3
 80053e4:	f000 f8c2 	bl	800556c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2150      	movs	r1, #80	; 0x50
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 f91b 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 80053f4:	e02c      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6859      	ldr	r1, [r3, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	461a      	mov	r2, r3
 8005404:	f000 f8e1 	bl	80055ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2160      	movs	r1, #96	; 0x60
 800540e:	4618      	mov	r0, r3
 8005410:	f000 f90b 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 8005414:	e01c      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	6859      	ldr	r1, [r3, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	461a      	mov	r2, r3
 8005424:	f000 f8a2 	bl	800556c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2140      	movs	r1, #64	; 0x40
 800542e:	4618      	mov	r0, r3
 8005430:	f000 f8fb 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 8005434:	e00c      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4619      	mov	r1, r3
 8005440:	4610      	mov	r0, r2
 8005442:	f000 f8f2 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 8005446:	e003      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	73fb      	strb	r3, [r7, #15]
      break;
 800544c:	e000      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800544e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005460:	7bfb      	ldrb	r3, [r7, #15]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a34      	ldr	r2, [pc, #208]	; (8005550 <TIM_Base_SetConfig+0xe4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d00f      	beq.n	80054a4 <TIM_Base_SetConfig+0x38>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548a:	d00b      	beq.n	80054a4 <TIM_Base_SetConfig+0x38>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a31      	ldr	r2, [pc, #196]	; (8005554 <TIM_Base_SetConfig+0xe8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d007      	beq.n	80054a4 <TIM_Base_SetConfig+0x38>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a30      	ldr	r2, [pc, #192]	; (8005558 <TIM_Base_SetConfig+0xec>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d003      	beq.n	80054a4 <TIM_Base_SetConfig+0x38>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a2f      	ldr	r2, [pc, #188]	; (800555c <TIM_Base_SetConfig+0xf0>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d108      	bne.n	80054b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a25      	ldr	r2, [pc, #148]	; (8005550 <TIM_Base_SetConfig+0xe4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d01b      	beq.n	80054f6 <TIM_Base_SetConfig+0x8a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c4:	d017      	beq.n	80054f6 <TIM_Base_SetConfig+0x8a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a22      	ldr	r2, [pc, #136]	; (8005554 <TIM_Base_SetConfig+0xe8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d013      	beq.n	80054f6 <TIM_Base_SetConfig+0x8a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a21      	ldr	r2, [pc, #132]	; (8005558 <TIM_Base_SetConfig+0xec>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00f      	beq.n	80054f6 <TIM_Base_SetConfig+0x8a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a20      	ldr	r2, [pc, #128]	; (800555c <TIM_Base_SetConfig+0xf0>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00b      	beq.n	80054f6 <TIM_Base_SetConfig+0x8a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a1f      	ldr	r2, [pc, #124]	; (8005560 <TIM_Base_SetConfig+0xf4>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d007      	beq.n	80054f6 <TIM_Base_SetConfig+0x8a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a1e      	ldr	r2, [pc, #120]	; (8005564 <TIM_Base_SetConfig+0xf8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d003      	beq.n	80054f6 <TIM_Base_SetConfig+0x8a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a1d      	ldr	r2, [pc, #116]	; (8005568 <TIM_Base_SetConfig+0xfc>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d108      	bne.n	8005508 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a08      	ldr	r2, [pc, #32]	; (8005550 <TIM_Base_SetConfig+0xe4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d103      	bne.n	800553c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	615a      	str	r2, [r3, #20]
}
 8005542:	bf00      	nop
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40010000 	.word	0x40010000
 8005554:	40000400 	.word	0x40000400
 8005558:	40000800 	.word	0x40000800
 800555c:	40000c00 	.word	0x40000c00
 8005560:	40014000 	.word	0x40014000
 8005564:	40014400 	.word	0x40014400
 8005568:	40014800 	.word	0x40014800

0800556c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	f023 0201 	bic.w	r2, r3, #1
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	4313      	orrs	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f023 030a 	bic.w	r3, r3, #10
 80055a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	621a      	str	r2, [r3, #32]
}
 80055be:	bf00      	nop
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b087      	sub	sp, #28
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	f023 0210 	bic.w	r2, r3, #16
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	031b      	lsls	r3, r3, #12
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005606:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	621a      	str	r2, [r3, #32]
}
 800561e:	bf00      	nop
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	f043 0307 	orr.w	r3, r3, #7
 800564c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	609a      	str	r2, [r3, #8]
}
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800567a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	021a      	lsls	r2, r3, #8
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	431a      	orrs	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4313      	orrs	r3, r2
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	609a      	str	r2, [r3, #8]
}
 8005694:	bf00      	nop
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e050      	b.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a1c      	ldr	r2, [pc, #112]	; (8005768 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d018      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005704:	d013      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a18      	ldr	r2, [pc, #96]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d00e      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a16      	ldr	r2, [pc, #88]	; (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d009      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a15      	ldr	r2, [pc, #84]	; (8005774 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d004      	beq.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a13      	ldr	r2, [pc, #76]	; (8005778 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d10c      	bne.n	8005748 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005734:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	4313      	orrs	r3, r2
 800573e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40010000 	.word	0x40010000
 800576c:	40000400 	.word	0x40000400
 8005770:	40000800 	.word	0x40000800
 8005774:	40000c00 	.word	0x40000c00
 8005778:	40014000 	.word	0x40014000

0800577c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800577c:	b084      	sub	sp, #16
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	f107 001c 	add.w	r0, r7, #28
 800578a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	2b01      	cmp	r3, #1
 8005792:	d122      	bne.n	80057da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d105      	bne.n	80057ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f9c0 	bl	8005b54 <USB_CoreReset>
 80057d4:	4603      	mov	r3, r0
 80057d6:	73fb      	strb	r3, [r7, #15]
 80057d8:	e01a      	b.n	8005810 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f9b4 	bl	8005b54 <USB_CoreReset>
 80057ec:	4603      	mov	r3, r0
 80057ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	639a      	str	r2, [r3, #56]	; 0x38
 8005802:	e005      	b.n	8005810 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	2b01      	cmp	r3, #1
 8005814:	d10b      	bne.n	800582e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f043 0206 	orr.w	r2, r3, #6
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f043 0220 	orr.w	r2, r3, #32
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800582e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800583a:	b004      	add	sp, #16
 800583c:	4770      	bx	lr

0800583e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f043 0201 	orr.w	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f023 0201 	bic.w	r2, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	460b      	mov	r3, r1
 800588c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d115      	bne.n	80058d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058b0:	2001      	movs	r0, #1
 80058b2:	f7fb fd0d 	bl	80012d0 <HAL_Delay>
      ms++;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3301      	adds	r3, #1
 80058ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f93a 	bl	8005b36 <USB_GetMode>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d01e      	beq.n	8005906 <USB_SetCurrentMode+0x84>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b31      	cmp	r3, #49	; 0x31
 80058cc:	d9f0      	bls.n	80058b0 <USB_SetCurrentMode+0x2e>
 80058ce:	e01a      	b.n	8005906 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058d0:	78fb      	ldrb	r3, [r7, #3]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d115      	bne.n	8005902 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058e2:	2001      	movs	r0, #1
 80058e4:	f7fb fcf4 	bl	80012d0 <HAL_Delay>
      ms++;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3301      	adds	r3, #1
 80058ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f921 	bl	8005b36 <USB_GetMode>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d005      	beq.n	8005906 <USB_SetCurrentMode+0x84>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2b31      	cmp	r3, #49	; 0x31
 80058fe:	d9f0      	bls.n	80058e2 <USB_SetCurrentMode+0x60>
 8005900:	e001      	b.n	8005906 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e005      	b.n	8005912 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b32      	cmp	r3, #50	; 0x32
 800590a:	d101      	bne.n	8005910 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e000      	b.n	8005912 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3301      	adds	r3, #1
 800592e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a13      	ldr	r2, [pc, #76]	; (8005980 <USB_FlushTxFifo+0x64>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d901      	bls.n	800593c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e01b      	b.n	8005974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	daf2      	bge.n	800592a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	019b      	lsls	r3, r3, #6
 800594c:	f043 0220 	orr.w	r2, r3, #32
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	3301      	adds	r3, #1
 8005958:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4a08      	ldr	r2, [pc, #32]	; (8005980 <USB_FlushTxFifo+0x64>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d901      	bls.n	8005966 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e006      	b.n	8005974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0320 	and.w	r3, r3, #32
 800596e:	2b20      	cmp	r3, #32
 8005970:	d0f0      	beq.n	8005954 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	00030d40 	.word	0x00030d40

08005984 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3301      	adds	r3, #1
 8005994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4a11      	ldr	r2, [pc, #68]	; (80059e0 <USB_FlushRxFifo+0x5c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d901      	bls.n	80059a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e018      	b.n	80059d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	daf2      	bge.n	8005990 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2210      	movs	r2, #16
 80059b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3301      	adds	r3, #1
 80059b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4a08      	ldr	r2, [pc, #32]	; (80059e0 <USB_FlushRxFifo+0x5c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e006      	b.n	80059d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0310 	and.w	r3, r3, #16
 80059ce:	2b10      	cmp	r3, #16
 80059d0:	d0f0      	beq.n	80059b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	00030d40 	.word	0x00030d40

080059e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b089      	sub	sp, #36	; 0x24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	4611      	mov	r1, r2
 80059f0:	461a      	mov	r2, r3
 80059f2:	460b      	mov	r3, r1
 80059f4:	71fb      	strb	r3, [r7, #7]
 80059f6:	4613      	mov	r3, r2
 80059f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d123      	bne.n	8005a52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a0a:	88bb      	ldrh	r3, [r7, #4]
 8005a0c:	3303      	adds	r3, #3
 8005a0e:	089b      	lsrs	r3, r3, #2
 8005a10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a12:	2300      	movs	r3, #0
 8005a14:	61bb      	str	r3, [r7, #24]
 8005a16:	e018      	b.n	8005a4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a18:	79fb      	ldrb	r3, [r7, #7]
 8005a1a:	031a      	lsls	r2, r3, #12
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a24:	461a      	mov	r2, r3
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	3301      	adds	r3, #1
 8005a36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	3301      	adds	r3, #1
 8005a42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	3301      	adds	r3, #1
 8005a48:	61bb      	str	r3, [r7, #24]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d3e2      	bcc.n	8005a18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3724      	adds	r7, #36	; 0x24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b08b      	sub	sp, #44	; 0x2c
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a76:	88fb      	ldrh	r3, [r7, #6]
 8005a78:	089b      	lsrs	r3, r3, #2
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a7e:	88fb      	ldrh	r3, [r7, #6]
 8005a80:	f003 0303 	and.w	r3, r3, #3
 8005a84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a86:	2300      	movs	r3, #0
 8005a88:	623b      	str	r3, [r7, #32]
 8005a8a:	e014      	b.n	8005ab6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	3301      	adds	r3, #1
 8005aae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	623b      	str	r3, [r7, #32]
 8005ab6:	6a3a      	ldr	r2, [r7, #32]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d3e6      	bcc.n	8005a8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005abe:	8bfb      	ldrh	r3, [r7, #30]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01e      	beq.n	8005b02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f107 0310 	add.w	r3, r7, #16
 8005ad4:	6812      	ldr	r2, [r2, #0]
 8005ad6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	701a      	strb	r2, [r3, #0]
      i++;
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	3301      	adds	r3, #1
 8005aee:	623b      	str	r3, [r7, #32]
      pDest++;
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	3301      	adds	r3, #1
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005af6:	8bfb      	ldrh	r3, [r7, #30]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005afc:	8bfb      	ldrh	r3, [r7, #30]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1ea      	bne.n	8005ad8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	372c      	adds	r7, #44	; 0x2c
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4013      	ands	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b28:	68fb      	ldr	r3, [r7, #12]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	f003 0301 	and.w	r3, r3, #1
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
	...

08005b54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	3301      	adds	r3, #1
 8005b64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4a13      	ldr	r2, [pc, #76]	; (8005bb8 <USB_CoreReset+0x64>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d901      	bls.n	8005b72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e01b      	b.n	8005baa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	daf2      	bge.n	8005b60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f043 0201 	orr.w	r2, r3, #1
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4a09      	ldr	r2, [pc, #36]	; (8005bb8 <USB_CoreReset+0x64>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d901      	bls.n	8005b9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e006      	b.n	8005baa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d0f0      	beq.n	8005b8a <USB_CoreReset+0x36>

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	00030d40 	.word	0x00030d40

08005bbc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b086      	sub	sp, #24
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005bca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bdc:	461a      	mov	r2, r3
 8005bde:	2300      	movs	r3, #0
 8005be0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d018      	beq.n	8005c44 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d10a      	bne.n	8005c2e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c26:	f043 0304 	orr.w	r3, r3, #4
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	e014      	b.n	8005c58 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c3c:	f023 0304 	bic.w	r3, r3, #4
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	e009      	b.n	8005c58 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c52:	f023 0304 	bic.w	r3, r3, #4
 8005c56:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c58:	2110      	movs	r1, #16
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7ff fe5e 	bl	800591c <USB_FlushTxFifo>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7ff fe8a 	bl	8005984 <USB_FlushRxFifo>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	613b      	str	r3, [r7, #16]
 8005c7e:	e015      	b.n	8005cac <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c92:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d3e5      	bcc.n	8005c80 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00b      	beq.n	8005ce6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a13      	ldr	r2, [pc, #76]	; (8005d28 <USB_HostInit+0x16c>)
 8005cda:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a13      	ldr	r2, [pc, #76]	; (8005d2c <USB_HostInit+0x170>)
 8005ce0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005ce4:	e009      	b.n	8005cfa <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2280      	movs	r2, #128	; 0x80
 8005cea:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a10      	ldr	r2, [pc, #64]	; (8005d30 <USB_HostInit+0x174>)
 8005cf0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a0f      	ldr	r2, [pc, #60]	; (8005d34 <USB_HostInit+0x178>)
 8005cf6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d105      	bne.n	8005d0c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	f043 0210 	orr.w	r2, r3, #16
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	699a      	ldr	r2, [r3, #24]
 8005d10:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <USB_HostInit+0x17c>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d24:	b004      	add	sp, #16
 8005d26:	4770      	bx	lr
 8005d28:	01000200 	.word	0x01000200
 8005d2c:	00e00300 	.word	0x00e00300
 8005d30:	00600080 	.word	0x00600080
 8005d34:	004000e0 	.word	0x004000e0
 8005d38:	a3200008 	.word	0xa3200008

08005d3c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d5a:	f023 0303 	bic.w	r3, r3, #3
 8005d5e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	68f9      	ldr	r1, [r7, #12]
 8005d70:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d74:	4313      	orrs	r3, r2
 8005d76:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d107      	bne.n	8005d8e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d84:	461a      	mov	r2, r3
 8005d86:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d8a:	6053      	str	r3, [r2, #4]
 8005d8c:	e009      	b.n	8005da2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005d8e:	78fb      	ldrb	r3, [r7, #3]
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d106      	bne.n	8005da2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005da0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005dd0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dde:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005de0:	2064      	movs	r0, #100	; 0x64
 8005de2:	f7fb fa75 	bl	80012d0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005df2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005df4:	200a      	movs	r0, #10
 8005df6:	f7fb fa6b 	bl	80012d0 <HAL_Delay>

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e14:	2300      	movs	r3, #0
 8005e16:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e28:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d109      	bne.n	8005e48 <USB_DriveVbus+0x44>
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d106      	bne.n	8005e48 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e46:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e52:	d109      	bne.n	8005e68 <USB_DriveVbus+0x64>
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d106      	bne.n	8005e68 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e66:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b085      	sub	sp, #20
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	0c5b      	lsrs	r3, r3, #17
 8005e94:	f003 0303 	and.w	r3, r3, #3
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	b29b      	uxth	r3, r3
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
	...

08005ec8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	70fb      	strb	r3, [r7, #3]
 8005eda:	460b      	mov	r3, r1
 8005edc:	70bb      	strb	r3, [r7, #2]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005eea:	78fb      	ldrb	r3, [r7, #3]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8005efc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005efe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d87e      	bhi.n	8006004 <USB_HC_Init+0x13c>
 8005f06:	a201      	add	r2, pc, #4	; (adr r2, 8005f0c <USB_HC_Init+0x44>)
 8005f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0c:	08005f1d 	.word	0x08005f1d
 8005f10:	08005fc7 	.word	0x08005fc7
 8005f14:	08005f1d 	.word	0x08005f1d
 8005f18:	08005f89 	.word	0x08005f89
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f28:	461a      	mov	r2, r3
 8005f2a:	f240 439d 	movw	r3, #1181	; 0x49d
 8005f2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	da10      	bge.n	8005f5a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	78fa      	ldrb	r2, [r7, #3]
 8005f48:	0151      	lsls	r1, r2, #5
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	440a      	add	r2, r1
 8005f4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f56:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005f58:	e057      	b.n	800600a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d051      	beq.n	800600a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005f66:	78fb      	ldrb	r3, [r7, #3]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	78fa      	ldrb	r2, [r7, #3]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f84:	60d3      	str	r3, [r2, #12]
      break;
 8005f86:	e040      	b.n	800600a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f94:	461a      	mov	r2, r3
 8005f96:	f240 639d 	movw	r3, #1693	; 0x69d
 8005f9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	da34      	bge.n	800600e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	78fa      	ldrb	r2, [r7, #3]
 8005fb4:	0151      	lsls	r1, r2, #5
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	440a      	add	r2, r1
 8005fba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005fc4:	e023      	b.n	800600e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f240 2325 	movw	r3, #549	; 0x225
 8005fd8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005fda:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	da17      	bge.n	8006012 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	78fa      	ldrb	r2, [r7, #3]
 8005ff2:	0151      	lsls	r1, r2, #5
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	440a      	add	r2, r1
 8005ff8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ffc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006000:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006002:	e006      	b.n	8006012 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	77fb      	strb	r3, [r7, #31]
      break;
 8006008:	e004      	b.n	8006014 <USB_HC_Init+0x14c>
      break;
 800600a:	bf00      	nop
 800600c:	e002      	b.n	8006014 <USB_HC_Init+0x14c>
      break;
 800600e:	bf00      	nop
 8006010:	e000      	b.n	8006014 <USB_HC_Init+0x14c>
      break;
 8006012:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	4413      	add	r3, r2
 800601c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	78fa      	ldrb	r2, [r7, #3]
 8006024:	0151      	lsls	r1, r2, #5
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	440a      	add	r2, r1
 800602a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800602e:	f043 0302 	orr.w	r3, r3, #2
 8006032:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800603a:	699a      	ldr	r2, [r3, #24]
 800603c:	78fb      	ldrb	r3, [r7, #3]
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	2101      	movs	r1, #1
 8006044:	fa01 f303 	lsl.w	r3, r1, r3
 8006048:	6939      	ldr	r1, [r7, #16]
 800604a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800604e:	4313      	orrs	r3, r2
 8006050:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800605e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006062:	2b00      	cmp	r3, #0
 8006064:	da03      	bge.n	800606e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	e001      	b.n	8006072 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff feff 	bl	8005e76 <USB_GetHostSpeed>
 8006078:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800607a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800607e:	2b02      	cmp	r3, #2
 8006080:	d106      	bne.n	8006090 <USB_HC_Init+0x1c8>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2b02      	cmp	r3, #2
 8006086:	d003      	beq.n	8006090 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	e001      	b.n	8006094 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006094:	787b      	ldrb	r3, [r7, #1]
 8006096:	059b      	lsls	r3, r3, #22
 8006098:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800609c:	78bb      	ldrb	r3, [r7, #2]
 800609e:	02db      	lsls	r3, r3, #11
 80060a0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060a4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060aa:	049b      	lsls	r3, r3, #18
 80060ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060b0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80060b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060b8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060be:	78fb      	ldrb	r3, [r7, #3]
 80060c0:	0159      	lsls	r1, r3, #5
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	440b      	add	r3, r1
 80060c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ca:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060d0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80060d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d003      	beq.n	80060e2 <USB_HC_Init+0x21a>
 80060da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d10f      	bne.n	8006102 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80060e2:	78fb      	ldrb	r3, [r7, #3]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	78fa      	ldrb	r2, [r7, #3]
 80060f2:	0151      	lsls	r1, r2, #5
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	440a      	add	r2, r1
 80060f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006100:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006102:	7ffb      	ldrb	r3, [r7, #31]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3720      	adds	r7, #32
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b08c      	sub	sp, #48	; 0x30
 8006110:	af02      	add	r7, sp, #8
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	4613      	mov	r3, r2
 8006118:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	785b      	ldrb	r3, [r3, #1]
 8006122:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006124:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006128:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006132:	2b00      	cmp	r3, #0
 8006134:	d02d      	beq.n	8006192 <USB_HC_StartXfer+0x86>
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	791b      	ldrb	r3, [r3, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d129      	bne.n	8006192 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d117      	bne.n	8006174 <USB_HC_StartXfer+0x68>
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	79db      	ldrb	r3, [r3, #7]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <USB_HC_StartXfer+0x48>
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	79db      	ldrb	r3, [r3, #7]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d10f      	bne.n	8006174 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	4413      	add	r3, r2
 800615c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	69fa      	ldr	r2, [r7, #28]
 8006164:	0151      	lsls	r1, r2, #5
 8006166:	6a3a      	ldr	r2, [r7, #32]
 8006168:	440a      	add	r2, r1
 800616a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800616e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006172:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006174:	79fb      	ldrb	r3, [r7, #7]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10b      	bne.n	8006192 <USB_HC_StartXfer+0x86>
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	795b      	ldrb	r3, [r3, #5]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d107      	bne.n	8006192 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	785b      	ldrb	r3, [r3, #1]
 8006186:	4619      	mov	r1, r3
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 fa0f 	bl	80065ac <USB_DoPing>
      return HAL_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	e0f8      	b.n	8006384 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d018      	beq.n	80061cc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	8912      	ldrh	r2, [r2, #8]
 80061a2:	4413      	add	r3, r2
 80061a4:	3b01      	subs	r3, #1
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	8912      	ldrh	r2, [r2, #8]
 80061aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80061ae:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80061b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061b2:	8b7b      	ldrh	r3, [r7, #26]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d90b      	bls.n	80061d0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80061b8:	8b7b      	ldrh	r3, [r7, #26]
 80061ba:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	8912      	ldrh	r2, [r2, #8]
 80061c2:	fb03 f202 	mul.w	r2, r3, r2
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	611a      	str	r2, [r3, #16]
 80061ca:	e001      	b.n	80061d0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80061cc:	2301      	movs	r3, #1
 80061ce:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	78db      	ldrb	r3, [r3, #3]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d007      	beq.n	80061e8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	8912      	ldrh	r2, [r2, #8]
 80061de:	fb03 f202 	mul.w	r2, r3, r2
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	611a      	str	r2, [r3, #16]
 80061e6:	e003      	b.n	80061f0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	695a      	ldr	r2, [r3, #20]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80061f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061fa:	04d9      	lsls	r1, r3, #19
 80061fc:	4b63      	ldr	r3, [pc, #396]	; (800638c <USB_HC_StartXfer+0x280>)
 80061fe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006200:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	7a9b      	ldrb	r3, [r3, #10]
 8006206:	075b      	lsls	r3, r3, #29
 8006208:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800620c:	69f9      	ldr	r1, [r7, #28]
 800620e:	0148      	lsls	r0, r1, #5
 8006210:	6a39      	ldr	r1, [r7, #32]
 8006212:	4401      	add	r1, r0
 8006214:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006218:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800621a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800621c:	79fb      	ldrb	r3, [r7, #7]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	68d9      	ldr	r1, [r3, #12]
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	4413      	add	r3, r2
 800622e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006232:	460a      	mov	r2, r1
 8006234:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	bf0c      	ite	eq
 8006246:	2301      	moveq	r3, #1
 8006248:	2300      	movne	r3, #0
 800624a:	b2db      	uxtb	r3, r3
 800624c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	4413      	add	r3, r2
 8006256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	6a3a      	ldr	r2, [r7, #32]
 8006262:	440a      	add	r2, r1
 8006264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006268:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800626c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	4413      	add	r3, r2
 8006276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	7e7b      	ldrb	r3, [r7, #25]
 800627e:	075b      	lsls	r3, r3, #29
 8006280:	69f9      	ldr	r1, [r7, #28]
 8006282:	0148      	lsls	r0, r1, #5
 8006284:	6a39      	ldr	r1, [r7, #32]
 8006286:	4401      	add	r1, r0
 8006288:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800628c:	4313      	orrs	r3, r2
 800628e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	4413      	add	r3, r2
 8006298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062a6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	78db      	ldrb	r3, [r3, #3]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d004      	beq.n	80062ba <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b6:	613b      	str	r3, [r7, #16]
 80062b8:	e003      	b.n	80062c2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062c0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062c8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d6:	461a      	mov	r2, r3
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80062dc:	79fb      	ldrb	r3, [r7, #7]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	e04e      	b.n	8006384 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	78db      	ldrb	r3, [r3, #3]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d149      	bne.n	8006382 <USB_HC_StartXfer+0x276>
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d045      	beq.n	8006382 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	79db      	ldrb	r3, [r3, #7]
 80062fa:	2b03      	cmp	r3, #3
 80062fc:	d830      	bhi.n	8006360 <USB_HC_StartXfer+0x254>
 80062fe:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <USB_HC_StartXfer+0x1f8>)
 8006300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006304:	08006315 	.word	0x08006315
 8006308:	08006339 	.word	0x08006339
 800630c:	08006315 	.word	0x08006315
 8006310:	08006339 	.word	0x08006339
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	3303      	adds	r3, #3
 800631a:	089b      	lsrs	r3, r3, #2
 800631c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800631e:	8afa      	ldrh	r2, [r7, #22]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	b29b      	uxth	r3, r3
 8006326:	429a      	cmp	r2, r3
 8006328:	d91c      	bls.n	8006364 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	f043 0220 	orr.w	r2, r3, #32
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	619a      	str	r2, [r3, #24]
        }
        break;
 8006336:	e015      	b.n	8006364 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	3303      	adds	r3, #3
 800633e:	089b      	lsrs	r3, r3, #2
 8006340:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006342:	8afa      	ldrh	r2, [r7, #22]
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	b29b      	uxth	r3, r3
 800634e:	429a      	cmp	r2, r3
 8006350:	d90a      	bls.n	8006368 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	619a      	str	r2, [r3, #24]
        }
        break;
 800635e:	e003      	b.n	8006368 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006360:	bf00      	nop
 8006362:	e002      	b.n	800636a <USB_HC_StartXfer+0x25e>
        break;
 8006364:	bf00      	nop
 8006366:	e000      	b.n	800636a <USB_HC_StartXfer+0x25e>
        break;
 8006368:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	68d9      	ldr	r1, [r3, #12]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	785a      	ldrb	r2, [r3, #1]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	b29b      	uxth	r3, r3
 8006378:	2000      	movs	r0, #0
 800637a:	9000      	str	r0, [sp, #0]
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f7ff fb31 	bl	80059e4 <USB_WritePacket>
  }

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3728      	adds	r7, #40	; 0x28
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	1ff80000 	.word	0x1ff80000

08006390 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	b29b      	uxth	r3, r3
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b089      	sub	sp, #36	; 0x24
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	460b      	mov	r3, r1
 80063bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80063c2:	78fb      	ldrb	r3, [r7, #3]
 80063c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	0c9b      	lsrs	r3, r3, #18
 80063da:	f003 0303 	and.w	r3, r3, #3
 80063de:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	0fdb      	lsrs	r3, r3, #31
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 0320 	and.w	r3, r3, #32
 80063fe:	2b20      	cmp	r3, #32
 8006400:	d104      	bne.n	800640c <USB_HC_Halt+0x5a>
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	e0c8      	b.n	800659e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <USB_HC_Halt+0x66>
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2b02      	cmp	r3, #2
 8006416:	d163      	bne.n	80064e0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	4413      	add	r3, r2
 8006420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69ba      	ldr	r2, [r7, #24]
 8006428:	0151      	lsls	r1, r2, #5
 800642a:	69fa      	ldr	r2, [r7, #28]
 800642c:	440a      	add	r2, r1
 800642e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006432:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006436:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f003 0320 	and.w	r3, r3, #32
 8006440:	2b00      	cmp	r3, #0
 8006442:	f040 80ab 	bne.w	800659c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d133      	bne.n	80064ba <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	4413      	add	r3, r2
 800645a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	0151      	lsls	r1, r2, #5
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	440a      	add	r2, r1
 8006468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800646c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006470:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	4413      	add	r3, r2
 800647a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	0151      	lsls	r1, r2, #5
 8006484:	69fa      	ldr	r2, [r7, #28]
 8006486:	440a      	add	r2, r1
 8006488:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800648c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006490:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3301      	adds	r3, #1
 8006496:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800649e:	d81d      	bhi.n	80064dc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064b6:	d0ec      	beq.n	8006492 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064b8:	e070      	b.n	800659c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	0151      	lsls	r1, r2, #5
 80064cc:	69fa      	ldr	r2, [r7, #28]
 80064ce:	440a      	add	r2, r1
 80064d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064d8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064da:	e05f      	b.n	800659c <USB_HC_Halt+0x1ea>
            break;
 80064dc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064de:	e05d      	b.n	800659c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	0151      	lsls	r1, r2, #5
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	440a      	add	r2, r1
 80064f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064fe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d133      	bne.n	8006578 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	4413      	add	r3, r2
 8006518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	69fa      	ldr	r2, [r7, #28]
 8006524:	440a      	add	r2, r1
 8006526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800652a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800652e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	4413      	add	r3, r2
 8006538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	0151      	lsls	r1, r2, #5
 8006542:	69fa      	ldr	r2, [r7, #28]
 8006544:	440a      	add	r2, r1
 8006546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800654a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800654e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3301      	adds	r3, #1
 8006554:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800655c:	d81d      	bhi.n	800659a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	4413      	add	r3, r2
 8006566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006574:	d0ec      	beq.n	8006550 <USB_HC_Halt+0x19e>
 8006576:	e011      	b.n	800659c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	4413      	add	r3, r2
 8006580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	0151      	lsls	r1, r2, #5
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	440a      	add	r2, r1
 800658e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006592:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	e000      	b.n	800659c <USB_HC_Halt+0x1ea>
          break;
 800659a:	bf00      	nop
    }
  }

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3724      	adds	r7, #36	; 0x24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
	...

080065ac <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	460b      	mov	r3, r1
 80065b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80065c0:	2301      	movs	r3, #1
 80065c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	04da      	lsls	r2, r3, #19
 80065c8:	4b15      	ldr	r3, [pc, #84]	; (8006620 <USB_DoPing+0x74>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	0151      	lsls	r1, r2, #5
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	440a      	add	r2, r1
 80065d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065dc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065f4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065fc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	4413      	add	r3, r2
 8006606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660a:	461a      	mov	r2, r3
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	1ff80000 	.word	0x1ff80000

08006624 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b088      	sub	sp, #32
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff f911 	bl	8005860 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800663e:	2110      	movs	r1, #16
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7ff f96b 	bl	800591c <USB_FlushTxFifo>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff f997 	bl	8005984 <USB_FlushRxFifo>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006660:	2300      	movs	r3, #0
 8006662:	61bb      	str	r3, [r7, #24]
 8006664:	e01f      	b.n	80066a6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	4413      	add	r3, r2
 800666e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800667c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006684:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800668c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	4413      	add	r3, r2
 8006696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669a:	461a      	mov	r2, r3
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	3301      	adds	r3, #1
 80066a4:	61bb      	str	r3, [r7, #24]
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	2b0f      	cmp	r3, #15
 80066aa:	d9dc      	bls.n	8006666 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80066ac:	2300      	movs	r3, #0
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	e034      	b.n	800671c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066d8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e6:	461a      	mov	r2, r3
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066f8:	d80c      	bhi.n	8006714 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	4413      	add	r3, r2
 8006702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800670c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006710:	d0ec      	beq.n	80066ec <USB_StopHost+0xc8>
 8006712:	e000      	b.n	8006716 <USB_StopHost+0xf2>
        break;
 8006714:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	3301      	adds	r3, #1
 800671a:	61bb      	str	r3, [r7, #24]
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	2b0f      	cmp	r3, #15
 8006720:	d9c7      	bls.n	80066b2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006728:	461a      	mov	r2, r3
 800672a:	f04f 33ff 	mov.w	r3, #4294967295
 800672e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f04f 32ff 	mov.w	r2, #4294967295
 8006736:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff f880 	bl	800583e <USB_EnableGlobalInt>

  return ret;
 800673e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3720      	adds	r7, #32
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006748:	b590      	push	{r4, r7, lr}
 800674a:	b089      	sub	sp, #36	; 0x24
 800674c:	af04      	add	r7, sp, #16
 800674e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006750:	2301      	movs	r3, #1
 8006752:	2202      	movs	r2, #2
 8006754:	2102      	movs	r1, #2
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fc66 	bl	8007028 <USBH_FindInterface>
 800675c:	4603      	mov	r3, r0
 800675e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006760:	7bfb      	ldrb	r3, [r7, #15]
 8006762:	2bff      	cmp	r3, #255	; 0xff
 8006764:	d002      	beq.n	800676c <USBH_CDC_InterfaceInit+0x24>
 8006766:	7bfb      	ldrb	r3, [r7, #15]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d901      	bls.n	8006770 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800676c:	2302      	movs	r3, #2
 800676e:	e13d      	b.n	80069ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fc3b 	bl	8006ff0 <USBH_SelectInterface>
 800677a:	4603      	mov	r3, r0
 800677c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800677e:	7bbb      	ldrb	r3, [r7, #14]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006784:	2302      	movs	r3, #2
 8006786:	e131      	b.n	80069ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800678e:	2050      	movs	r0, #80	; 0x50
 8006790:	f002 fafa 	bl	8008d88 <malloc>
 8006794:	4603      	mov	r3, r0
 8006796:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80067a8:	2302      	movs	r3, #2
 80067aa:	e11f      	b.n	80069ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80067ac:	2250      	movs	r2, #80	; 0x50
 80067ae:	2100      	movs	r1, #0
 80067b0:	68b8      	ldr	r0, [r7, #8]
 80067b2:	f002 faf9 	bl	8008da8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	211a      	movs	r1, #26
 80067bc:	fb01 f303 	mul.w	r3, r1, r3
 80067c0:	4413      	add	r3, r2
 80067c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	b25b      	sxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	da15      	bge.n	80067fa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	211a      	movs	r1, #26
 80067d4:	fb01 f303 	mul.w	r3, r1, r3
 80067d8:	4413      	add	r3, r2
 80067da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067de:	781a      	ldrb	r2, [r3, #0]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	211a      	movs	r1, #26
 80067ea:	fb01 f303 	mul.w	r3, r1, r3
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80067f4:	881a      	ldrh	r2, [r3, #0]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	785b      	ldrb	r3, [r3, #1]
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 ff2c 	bl	800865e <USBH_AllocPipe>
 8006806:	4603      	mov	r3, r0
 8006808:	461a      	mov	r2, r3
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	7819      	ldrb	r1, [r3, #0]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	7858      	ldrb	r0, [r3, #1]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	8952      	ldrh	r2, [r2, #10]
 8006826:	9202      	str	r2, [sp, #8]
 8006828:	2203      	movs	r2, #3
 800682a:	9201      	str	r2, [sp, #4]
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	4623      	mov	r3, r4
 8006830:	4602      	mov	r2, r0
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f001 fee4 	bl	8008600 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2200      	movs	r2, #0
 800683e:	4619      	mov	r1, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f002 f9f3 	bl	8008c2c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006846:	2300      	movs	r3, #0
 8006848:	2200      	movs	r2, #0
 800684a:	210a      	movs	r1, #10
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fbeb 	bl	8007028 <USBH_FindInterface>
 8006852:	4603      	mov	r3, r0
 8006854:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006856:	7bfb      	ldrb	r3, [r7, #15]
 8006858:	2bff      	cmp	r3, #255	; 0xff
 800685a:	d002      	beq.n	8006862 <USBH_CDC_InterfaceInit+0x11a>
 800685c:	7bfb      	ldrb	r3, [r7, #15]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d901      	bls.n	8006866 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006862:	2302      	movs	r3, #2
 8006864:	e0c2      	b.n	80069ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006866:	7bfb      	ldrb	r3, [r7, #15]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	211a      	movs	r1, #26
 800686c:	fb01 f303 	mul.w	r3, r1, r3
 8006870:	4413      	add	r3, r2
 8006872:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	b25b      	sxtb	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	da16      	bge.n	80068ac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800687e:	7bfb      	ldrb	r3, [r7, #15]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	211a      	movs	r1, #26
 8006884:	fb01 f303 	mul.w	r3, r1, r3
 8006888:	4413      	add	r3, r2
 800688a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800688e:	781a      	ldrb	r2, [r3, #0]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	211a      	movs	r1, #26
 800689a:	fb01 f303 	mul.w	r3, r1, r3
 800689e:	4413      	add	r3, r2
 80068a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068a4:	881a      	ldrh	r2, [r3, #0]
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	835a      	strh	r2, [r3, #26]
 80068aa:	e015      	b.n	80068d8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	211a      	movs	r1, #26
 80068b2:	fb01 f303 	mul.w	r3, r1, r3
 80068b6:	4413      	add	r3, r2
 80068b8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068bc:	781a      	ldrb	r2, [r3, #0]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	211a      	movs	r1, #26
 80068c8:	fb01 f303 	mul.w	r3, r1, r3
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068d2:	881a      	ldrh	r2, [r3, #0]
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	211a      	movs	r1, #26
 80068de:	fb01 f303 	mul.w	r3, r1, r3
 80068e2:	4413      	add	r3, r2
 80068e4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	b25b      	sxtb	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	da16      	bge.n	800691e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	211a      	movs	r1, #26
 80068f6:	fb01 f303 	mul.w	r3, r1, r3
 80068fa:	4413      	add	r3, r2
 80068fc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006900:	781a      	ldrb	r2, [r3, #0]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006906:	7bfb      	ldrb	r3, [r7, #15]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	211a      	movs	r1, #26
 800690c:	fb01 f303 	mul.w	r3, r1, r3
 8006910:	4413      	add	r3, r2
 8006912:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006916:	881a      	ldrh	r2, [r3, #0]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	835a      	strh	r2, [r3, #26]
 800691c:	e015      	b.n	800694a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	211a      	movs	r1, #26
 8006924:	fb01 f303 	mul.w	r3, r1, r3
 8006928:	4413      	add	r3, r2
 800692a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800692e:	781a      	ldrb	r2, [r3, #0]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006934:	7bfb      	ldrb	r3, [r7, #15]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	211a      	movs	r1, #26
 800693a:	fb01 f303 	mul.w	r3, r1, r3
 800693e:	4413      	add	r3, r2
 8006940:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006944:	881a      	ldrh	r2, [r3, #0]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	7b9b      	ldrb	r3, [r3, #14]
 800694e:	4619      	mov	r1, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 fe84 	bl	800865e <USBH_AllocPipe>
 8006956:	4603      	mov	r3, r0
 8006958:	461a      	mov	r2, r3
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	7bdb      	ldrb	r3, [r3, #15]
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f001 fe7a 	bl	800865e <USBH_AllocPipe>
 800696a:	4603      	mov	r3, r0
 800696c:	461a      	mov	r2, r3
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	7b59      	ldrb	r1, [r3, #13]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	7b98      	ldrb	r0, [r3, #14]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	8b12      	ldrh	r2, [r2, #24]
 800698a:	9202      	str	r2, [sp, #8]
 800698c:	2202      	movs	r2, #2
 800698e:	9201      	str	r2, [sp, #4]
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	4623      	mov	r3, r4
 8006994:	4602      	mov	r2, r0
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f001 fe32 	bl	8008600 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	7b19      	ldrb	r1, [r3, #12]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	7bd8      	ldrb	r0, [r3, #15]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	8b52      	ldrh	r2, [r2, #26]
 80069b4:	9202      	str	r2, [sp, #8]
 80069b6:	2202      	movs	r2, #2
 80069b8:	9201      	str	r2, [sp, #4]
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	4623      	mov	r3, r4
 80069be:	4602      	mov	r2, r0
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f001 fe1d 	bl	8008600 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	7b5b      	ldrb	r3, [r3, #13]
 80069d2:	2200      	movs	r2, #0
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f002 f928 	bl	8008c2c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	7b1b      	ldrb	r3, [r3, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f002 f921 	bl	8008c2c <USBH_LL_SetToggle>

  return USBH_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd90      	pop	{r4, r7, pc}

080069f4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00e      	beq.n	8006a2c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 fe12 	bl	800863e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 fe3d 	bl	80086a0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	7b1b      	ldrb	r3, [r3, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00e      	beq.n	8006a52 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	7b1b      	ldrb	r3, [r3, #12]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f001 fdff 	bl	800863e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	7b1b      	ldrb	r3, [r3, #12]
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 fe2a 	bl	80086a0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	7b5b      	ldrb	r3, [r3, #13]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00e      	beq.n	8006a78 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	7b5b      	ldrb	r3, [r3, #13]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 fdec 	bl	800863e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	7b5b      	ldrb	r3, [r3, #13]
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f001 fe17 	bl	80086a0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00b      	beq.n	8006a9c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f002 f983 	bl	8008d98 <free>
    phost->pActiveClass->pData = 0U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a98:	2200      	movs	r2, #0
 8006a9a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3340      	adds	r3, #64	; 0x40
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f8b1 	bl	8006c26 <GetLineCoding>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006ac8:	7afb      	ldrb	r3, [r7, #11]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d105      	bne.n	8006ada <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ad4:	2102      	movs	r1, #2
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006ada:	7afb      	ldrb	r3, [r7, #11]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006aec:	2301      	movs	r3, #1
 8006aee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d877      	bhi.n	8006bf8 <USBH_CDC_Process+0x114>
 8006b08:	a201      	add	r2, pc, #4	; (adr r2, 8006b10 <USBH_CDC_Process+0x2c>)
 8006b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0e:	bf00      	nop
 8006b10:	08006b25 	.word	0x08006b25
 8006b14:	08006b2b 	.word	0x08006b2b
 8006b18:	08006b5b 	.word	0x08006b5b
 8006b1c:	08006bcf 	.word	0x08006bcf
 8006b20:	08006bdd 	.word	0x08006bdd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	73fb      	strb	r3, [r7, #15]
      break;
 8006b28:	e06d      	b.n	8006c06 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f897 	bl	8006c64 <SetLineCoding>
 8006b36:	4603      	mov	r3, r0
 8006b38:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d104      	bne.n	8006b4a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b48:	e058      	b.n	8006bfc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006b4a:	7bbb      	ldrb	r3, [r7, #14]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d055      	beq.n	8006bfc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2204      	movs	r2, #4
 8006b54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b58:	e050      	b.n	8006bfc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	3340      	adds	r3, #64	; 0x40
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f860 	bl	8006c26 <GetLineCoding>
 8006b66:	4603      	mov	r3, r0
 8006b68:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d126      	bne.n	8006bbe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b82:	791b      	ldrb	r3, [r3, #4]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d13b      	bne.n	8006c00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b92:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d133      	bne.n	8006c00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ba2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d12b      	bne.n	8006c00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d124      	bne.n	8006c00 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f958 	bl	8006e6c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006bbc:	e020      	b.n	8006c00 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006bbe:	7bbb      	ldrb	r3, [r7, #14]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d01d      	beq.n	8006c00 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2204      	movs	r2, #4
 8006bc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006bcc:	e018      	b.n	8006c00 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f867 	bl	8006ca2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f8da 	bl	8006d8e <CDC_ProcessReception>
      break;
 8006bda:	e014      	b.n	8006c06 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006bdc:	2100      	movs	r1, #0
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 ffef 	bl	8007bc2 <USBH_ClrFeature>
 8006be4:	4603      	mov	r3, r0
 8006be6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10a      	bne.n	8006c04 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006bf6:	e005      	b.n	8006c04 <USBH_CDC_Process+0x120>

    default:
      break;
 8006bf8:	bf00      	nop
 8006bfa:	e004      	b.n	8006c06 <USBH_CDC_Process+0x122>
      break;
 8006bfc:	bf00      	nop
 8006bfe:	e002      	b.n	8006c06 <USBH_CDC_Process+0x122>
      break;
 8006c00:	bf00      	nop
 8006c02:	e000      	b.n	8006c06 <USBH_CDC_Process+0x122>
      break;
 8006c04:	bf00      	nop

  }

  return status;
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b082      	sub	sp, #8
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	22a1      	movs	r2, #161	; 0xa1
 8006c34:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2221      	movs	r2, #33	; 0x21
 8006c3a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2207      	movs	r2, #7
 8006c4c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2207      	movs	r2, #7
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 fa81 	bl	800815c <USBH_CtlReq>
 8006c5a:	4603      	mov	r3, r0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2221      	movs	r2, #33	; 0x21
 8006c72:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2220      	movs	r2, #32
 8006c78:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2207      	movs	r2, #7
 8006c8a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	2207      	movs	r2, #7
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f001 fa62 	bl	800815c <USBH_CtlReq>
 8006c98:	4603      	mov	r3, r0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b086      	sub	sp, #24
 8006ca6:	af02      	add	r7, sp, #8
 8006ca8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d002      	beq.n	8006cc8 <CDC_ProcessTransmission+0x26>
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d023      	beq.n	8006d0e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006cc6:	e05e      	b.n	8006d86 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	8b12      	ldrh	r2, [r2, #24]
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d90b      	bls.n	8006cec <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	69d9      	ldr	r1, [r3, #28]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8b1a      	ldrh	r2, [r3, #24]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	7b5b      	ldrb	r3, [r3, #13]
 8006ce0:	2001      	movs	r0, #1
 8006ce2:	9000      	str	r0, [sp, #0]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f001 fc48 	bl	800857a <USBH_BulkSendData>
 8006cea:	e00b      	b.n	8006d04 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	7b5b      	ldrb	r3, [r3, #13]
 8006cfa:	2001      	movs	r0, #1
 8006cfc:	9000      	str	r0, [sp, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 fc3b 	bl	800857a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d0c:	e03b      	b.n	8006d86 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	7b5b      	ldrb	r3, [r3, #13]
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 ff5f 	bl	8008bd8 <USBH_LL_GetURBState>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006d1e:	7afb      	ldrb	r3, [r7, #11]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d128      	bne.n	8006d76 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	8b12      	ldrh	r2, [r2, #24]
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d90e      	bls.n	8006d4e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	8b12      	ldrh	r2, [r2, #24]
 8006d38:	1a9a      	subs	r2, r3, r2
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	8b12      	ldrh	r2, [r2, #24]
 8006d46:	441a      	add	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	61da      	str	r2, [r3, #28]
 8006d4c:	e002      	b.n	8006d54 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d004      	beq.n	8006d66 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d64:	e00e      	b.n	8006d84 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f868 	bl	8006e44 <USBH_CDC_TransmitCallback>
      break;
 8006d74:	e006      	b.n	8006d84 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006d76:	7afb      	ldrb	r3, [r7, #11]
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d103      	bne.n	8006d84 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d84:	bf00      	nop
  }
}
 8006d86:	bf00      	nop
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b086      	sub	sp, #24
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006da0:	2300      	movs	r3, #0
 8006da2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d002      	beq.n	8006db4 <CDC_ProcessReception+0x26>
 8006dae:	2b04      	cmp	r3, #4
 8006db0:	d00e      	beq.n	8006dd0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006db2:	e043      	b.n	8006e3c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	6a19      	ldr	r1, [r3, #32]
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	8b5a      	ldrh	r2, [r3, #26]
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	7b1b      	ldrb	r3, [r3, #12]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 fbff 	bl	80085c4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2204      	movs	r2, #4
 8006dca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006dce:	e035      	b.n	8006e3c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	7b1b      	ldrb	r3, [r3, #12]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f001 fefe 	bl	8008bd8 <USBH_LL_GetURBState>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006de0:	7cfb      	ldrb	r3, [r7, #19]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d129      	bne.n	8006e3a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	7b1b      	ldrb	r3, [r3, #12]
 8006dea:	4619      	mov	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 fe61 	bl	8008ab4 <USBH_LL_GetLastXferSize>
 8006df2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d016      	beq.n	8006e2c <CDC_ProcessReception+0x9e>
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	8b5b      	ldrh	r3, [r3, #26]
 8006e02:	461a      	mov	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d910      	bls.n	8006e2c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	1ad2      	subs	r2, r2, r3
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	6a1a      	ldr	r2, [r3, #32]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	441a      	add	r2, r3
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	2203      	movs	r2, #3
 8006e26:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e2a:	e006      	b.n	8006e3a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f80f 	bl	8006e58 <USBH_CDC_ReceiveCallback>
      break;
 8006e3a:	bf00      	nop
  }
}
 8006e3c:	bf00      	nop
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006e94:	2302      	movs	r3, #2
 8006e96:	e029      	b.n	8006eec <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	79fa      	ldrb	r2, [r7, #7]
 8006e9c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f000 f81f 	bl	8006ef4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f001 fd31 	bl	800894c <USBH_LL_Init>

  return USBH_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	e009      	b.n	8006f1a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	33e0      	adds	r3, #224	; 0xe0
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	2200      	movs	r2, #0
 8006f12:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	3301      	adds	r3, #1
 8006f18:	60fb      	str	r3, [r7, #12]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b0f      	cmp	r3, #15
 8006f1e:	d9f2      	bls.n	8006f06 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f20:	2300      	movs	r3, #0
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	e009      	b.n	8006f3a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3301      	adds	r3, #1
 8006f38:	60fb      	str	r3, [r7, #12]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f40:	d3f1      	bcc.n	8006f26 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2240      	movs	r2, #64	; 0x40
 8006f66:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d016      	beq.n	8006fde <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10e      	bne.n	8006fd8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fc0:	1c59      	adds	r1, r3, #1
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	33de      	adds	r3, #222	; 0xde
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73fb      	strb	r3, [r7, #15]
 8006fd6:	e004      	b.n	8006fe2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006fd8:	2302      	movs	r3, #2
 8006fda:	73fb      	strb	r3, [r7, #15]
 8006fdc:	e001      	b.n	8006fe2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006fde:	2302      	movs	r3, #2
 8006fe0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007006:	78fa      	ldrb	r2, [r7, #3]
 8007008:	429a      	cmp	r2, r3
 800700a:	d204      	bcs.n	8007016 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	78fa      	ldrb	r2, [r7, #3]
 8007010:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007014:	e001      	b.n	800701a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007016:	2302      	movs	r3, #2
 8007018:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800701a:	7bfb      	ldrb	r3, [r7, #15]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	4608      	mov	r0, r1
 8007032:	4611      	mov	r1, r2
 8007034:	461a      	mov	r2, r3
 8007036:	4603      	mov	r3, r0
 8007038:	70fb      	strb	r3, [r7, #3]
 800703a:	460b      	mov	r3, r1
 800703c:	70bb      	strb	r3, [r7, #2]
 800703e:	4613      	mov	r3, r2
 8007040:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007046:	2300      	movs	r3, #0
 8007048:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007050:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007052:	e025      	b.n	80070a0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007054:	7dfb      	ldrb	r3, [r7, #23]
 8007056:	221a      	movs	r2, #26
 8007058:	fb02 f303 	mul.w	r3, r2, r3
 800705c:	3308      	adds	r3, #8
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4413      	add	r3, r2
 8007062:	3302      	adds	r3, #2
 8007064:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	795b      	ldrb	r3, [r3, #5]
 800706a:	78fa      	ldrb	r2, [r7, #3]
 800706c:	429a      	cmp	r2, r3
 800706e:	d002      	beq.n	8007076 <USBH_FindInterface+0x4e>
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	2bff      	cmp	r3, #255	; 0xff
 8007074:	d111      	bne.n	800709a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800707a:	78ba      	ldrb	r2, [r7, #2]
 800707c:	429a      	cmp	r2, r3
 800707e:	d002      	beq.n	8007086 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007080:	78bb      	ldrb	r3, [r7, #2]
 8007082:	2bff      	cmp	r3, #255	; 0xff
 8007084:	d109      	bne.n	800709a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800708a:	787a      	ldrb	r2, [r7, #1]
 800708c:	429a      	cmp	r2, r3
 800708e:	d002      	beq.n	8007096 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007090:	787b      	ldrb	r3, [r7, #1]
 8007092:	2bff      	cmp	r3, #255	; 0xff
 8007094:	d101      	bne.n	800709a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007096:	7dfb      	ldrb	r3, [r7, #23]
 8007098:	e006      	b.n	80070a8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800709a:	7dfb      	ldrb	r3, [r7, #23]
 800709c:	3301      	adds	r3, #1
 800709e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d9d6      	bls.n	8007054 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80070a6:	23ff      	movs	r3, #255	; 0xff
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	371c      	adds	r7, #28
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 fc81 	bl	80089c4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80070c2:	2101      	movs	r1, #1
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 fd9a 	bl	8008bfe <USBH_LL_DriverVBUS>

  return USBH_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b088      	sub	sp, #32
 80070d8:	af04      	add	r7, sp, #16
 80070da:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80070dc:	2302      	movs	r3, #2
 80070de:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d102      	bne.n	80070f6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2203      	movs	r2, #3
 80070f4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b0b      	cmp	r3, #11
 80070fe:	f200 81be 	bhi.w	800747e <USBH_Process+0x3aa>
 8007102:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <USBH_Process+0x34>)
 8007104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007108:	08007139 	.word	0x08007139
 800710c:	0800716b 	.word	0x0800716b
 8007110:	080071d3 	.word	0x080071d3
 8007114:	08007419 	.word	0x08007419
 8007118:	0800747f 	.word	0x0800747f
 800711c:	08007277 	.word	0x08007277
 8007120:	080073bf 	.word	0x080073bf
 8007124:	080072ad 	.word	0x080072ad
 8007128:	080072cd 	.word	0x080072cd
 800712c:	080072ed 	.word	0x080072ed
 8007130:	08007331 	.word	0x08007331
 8007134:	08007401 	.word	0x08007401
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 819e 	beq.w	8007482 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800714c:	20c8      	movs	r0, #200	; 0xc8
 800714e:	f001 fd9d 	bl	8008c8c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f001 fc93 	bl	8008a7e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007168:	e18b      	b.n	8007482 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007170:	2b01      	cmp	r3, #1
 8007172:	d107      	bne.n	8007184 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007182:	e18d      	b.n	80074a0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800718a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800718e:	d914      	bls.n	80071ba <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007196:	3301      	adds	r3, #1
 8007198:	b2da      	uxtb	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d903      	bls.n	80071b2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	220d      	movs	r2, #13
 80071ae:	701a      	strb	r2, [r3, #0]
      break;
 80071b0:	e176      	b.n	80074a0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	701a      	strb	r2, [r3, #0]
      break;
 80071b8:	e172      	b.n	80074a0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071c0:	f103 020a 	add.w	r2, r3, #10
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80071ca:	200a      	movs	r0, #10
 80071cc:	f001 fd5e 	bl	8008c8c <USBH_Delay>
      break;
 80071d0:	e166      	b.n	80074a0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d005      	beq.n	80071e8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071e2:	2104      	movs	r1, #4
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80071e8:	2064      	movs	r0, #100	; 0x64
 80071ea:	f001 fd4f 	bl	8008c8c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f001 fc1e 	bl	8008a30 <USBH_LL_GetSpeed>
 80071f4:	4603      	mov	r3, r0
 80071f6:	461a      	mov	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2205      	movs	r2, #5
 8007202:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007204:	2100      	movs	r1, #0
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f001 fa29 	bl	800865e <USBH_AllocPipe>
 800720c:	4603      	mov	r3, r0
 800720e:	461a      	mov	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007214:	2180      	movs	r1, #128	; 0x80
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f001 fa21 	bl	800865e <USBH_AllocPipe>
 800721c:	4603      	mov	r3, r0
 800721e:	461a      	mov	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	7919      	ldrb	r1, [r3, #4]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007238:	b292      	uxth	r2, r2
 800723a:	9202      	str	r2, [sp, #8]
 800723c:	2200      	movs	r2, #0
 800723e:	9201      	str	r2, [sp, #4]
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	4603      	mov	r3, r0
 8007244:	2280      	movs	r2, #128	; 0x80
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f001 f9da 	bl	8008600 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	7959      	ldrb	r1, [r3, #5]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007260:	b292      	uxth	r2, r2
 8007262:	9202      	str	r2, [sp, #8]
 8007264:	2200      	movs	r2, #0
 8007266:	9201      	str	r2, [sp, #4]
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	4603      	mov	r3, r0
 800726c:	2200      	movs	r2, #0
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f001 f9c6 	bl	8008600 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007274:	e114      	b.n	80074a0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f918 	bl	80074ac <USBH_HandleEnum>
 800727c:	4603      	mov	r3, r0
 800727e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b00      	cmp	r3, #0
 8007286:	f040 80fe 	bne.w	8007486 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007298:	2b01      	cmp	r3, #1
 800729a:	d103      	bne.n	80072a4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2208      	movs	r2, #8
 80072a0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072a2:	e0f0      	b.n	8007486 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2207      	movs	r2, #7
 80072a8:	701a      	strb	r2, [r3, #0]
      break;
 80072aa:	e0ec      	b.n	8007486 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 80e9 	beq.w	800748a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072be:	2101      	movs	r1, #1
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2208      	movs	r2, #8
 80072c8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80072ca:	e0de      	b.n	800748a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fc2c 	bl	8007b34 <USBH_SetCfg>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f040 80d5 	bne.w	800748e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2209      	movs	r2, #9
 80072e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072ea:	e0d0      	b.n	800748e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d016      	beq.n	8007328 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80072fa:	2101      	movs	r1, #1
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fc3c 	bl	8007b7a <USBH_SetFeature>
 8007302:	4603      	mov	r3, r0
 8007304:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007306:	7bbb      	ldrb	r3, [r7, #14]
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d103      	bne.n	8007316 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	220a      	movs	r2, #10
 8007312:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007314:	e0bd      	b.n	8007492 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007316:	7bbb      	ldrb	r3, [r7, #14]
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b03      	cmp	r3, #3
 800731c:	f040 80b9 	bne.w	8007492 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	220a      	movs	r2, #10
 8007324:	701a      	strb	r2, [r3, #0]
      break;
 8007326:	e0b4      	b.n	8007492 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	220a      	movs	r2, #10
 800732c:	701a      	strb	r2, [r3, #0]
      break;
 800732e:	e0b0      	b.n	8007492 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 80ad 	beq.w	8007496 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007344:	2300      	movs	r3, #0
 8007346:	73fb      	strb	r3, [r7, #15]
 8007348:	e016      	b.n	8007378 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800734a:	7bfa      	ldrb	r2, [r7, #15]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	32de      	adds	r2, #222	; 0xde
 8007350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007354:	791a      	ldrb	r2, [r3, #4]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800735c:	429a      	cmp	r2, r3
 800735e:	d108      	bne.n	8007372 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007360:	7bfa      	ldrb	r2, [r7, #15]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	32de      	adds	r2, #222	; 0xde
 8007366:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007370:	e005      	b.n	800737e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007372:	7bfb      	ldrb	r3, [r7, #15]
 8007374:	3301      	adds	r3, #1
 8007376:	73fb      	strb	r3, [r7, #15]
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0e5      	beq.n	800734a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007384:	2b00      	cmp	r3, #0
 8007386:	d016      	beq.n	80073b6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	4798      	blx	r3
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d109      	bne.n	80073ae <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2206      	movs	r2, #6
 800739e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073a6:	2103      	movs	r1, #3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073ac:	e073      	b.n	8007496 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	220d      	movs	r2, #13
 80073b2:	701a      	strb	r2, [r3, #0]
      break;
 80073b4:	e06f      	b.n	8007496 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	220d      	movs	r2, #13
 80073ba:	701a      	strb	r2, [r3, #0]
      break;
 80073bc:	e06b      	b.n	8007496 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d017      	beq.n	80073f8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	4798      	blx	r3
 80073d4:	4603      	mov	r3, r0
 80073d6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d103      	bne.n	80073e8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	220b      	movs	r2, #11
 80073e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073e6:	e058      	b.n	800749a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d154      	bne.n	800749a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	220d      	movs	r2, #13
 80073f4:	701a      	strb	r2, [r3, #0]
      break;
 80073f6:	e050      	b.n	800749a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	220d      	movs	r2, #13
 80073fc:	701a      	strb	r2, [r3, #0]
      break;
 80073fe:	e04c      	b.n	800749a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007406:	2b00      	cmp	r3, #0
 8007408:	d049      	beq.n	800749e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	4798      	blx	r3
      }
      break;
 8007416:	e042      	b.n	800749e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff fd67 	bl	8006ef4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800742c:	2b00      	cmp	r3, #0
 800742e:	d009      	beq.n	8007444 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800744a:	2b00      	cmp	r3, #0
 800744c:	d005      	beq.n	800745a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007454:	2105      	movs	r1, #5
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b01      	cmp	r3, #1
 8007464:	d107      	bne.n	8007476 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7ff fe20 	bl	80070b4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007474:	e014      	b.n	80074a0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f001 faa4 	bl	80089c4 <USBH_LL_Start>
      break;
 800747c:	e010      	b.n	80074a0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800747e:	bf00      	nop
 8007480:	e00e      	b.n	80074a0 <USBH_Process+0x3cc>
      break;
 8007482:	bf00      	nop
 8007484:	e00c      	b.n	80074a0 <USBH_Process+0x3cc>
      break;
 8007486:	bf00      	nop
 8007488:	e00a      	b.n	80074a0 <USBH_Process+0x3cc>
    break;
 800748a:	bf00      	nop
 800748c:	e008      	b.n	80074a0 <USBH_Process+0x3cc>
      break;
 800748e:	bf00      	nop
 8007490:	e006      	b.n	80074a0 <USBH_Process+0x3cc>
      break;
 8007492:	bf00      	nop
 8007494:	e004      	b.n	80074a0 <USBH_Process+0x3cc>
      break;
 8007496:	bf00      	nop
 8007498:	e002      	b.n	80074a0 <USBH_Process+0x3cc>
      break;
 800749a:	bf00      	nop
 800749c:	e000      	b.n	80074a0 <USBH_Process+0x3cc>
      break;
 800749e:	bf00      	nop
  }
  return USBH_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop

080074ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b088      	sub	sp, #32
 80074b0:	af04      	add	r7, sp, #16
 80074b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80074b4:	2301      	movs	r3, #1
 80074b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80074b8:	2301      	movs	r3, #1
 80074ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	785b      	ldrb	r3, [r3, #1]
 80074c0:	2b07      	cmp	r3, #7
 80074c2:	f200 81c1 	bhi.w	8007848 <USBH_HandleEnum+0x39c>
 80074c6:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <USBH_HandleEnum+0x20>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	080074ed 	.word	0x080074ed
 80074d0:	080075ab 	.word	0x080075ab
 80074d4:	08007615 	.word	0x08007615
 80074d8:	080076a3 	.word	0x080076a3
 80074dc:	0800770d 	.word	0x0800770d
 80074e0:	0800777d 	.word	0x0800777d
 80074e4:	080077c3 	.word	0x080077c3
 80074e8:	08007809 	.word	0x08007809
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80074ec:	2108      	movs	r1, #8
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fa50 	bl	8007994 <USBH_Get_DevDesc>
 80074f4:	4603      	mov	r3, r0
 80074f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074f8:	7bbb      	ldrb	r3, [r7, #14]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d130      	bne.n	8007560 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	7919      	ldrb	r1, [r3, #4]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007522:	b292      	uxth	r2, r2
 8007524:	9202      	str	r2, [sp, #8]
 8007526:	2200      	movs	r2, #0
 8007528:	9201      	str	r2, [sp, #4]
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	4603      	mov	r3, r0
 800752e:	2280      	movs	r2, #128	; 0x80
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f001 f865 	bl	8008600 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	7959      	ldrb	r1, [r3, #5]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800754a:	b292      	uxth	r2, r2
 800754c:	9202      	str	r2, [sp, #8]
 800754e:	2200      	movs	r2, #0
 8007550:	9201      	str	r2, [sp, #4]
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	4603      	mov	r3, r0
 8007556:	2200      	movs	r2, #0
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 f851 	bl	8008600 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800755e:	e175      	b.n	800784c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	2b03      	cmp	r3, #3
 8007564:	f040 8172 	bne.w	800784c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800756e:	3301      	adds	r3, #1
 8007570:	b2da      	uxtb	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800757e:	2b03      	cmp	r3, #3
 8007580:	d903      	bls.n	800758a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	220d      	movs	r2, #13
 8007586:	701a      	strb	r2, [r3, #0]
      break;
 8007588:	e160      	b.n	800784c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	795b      	ldrb	r3, [r3, #5]
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 f885 	bl	80086a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	791b      	ldrb	r3, [r3, #4]
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 f87f 	bl	80086a0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	701a      	strb	r2, [r3, #0]
      break;
 80075a8:	e150      	b.n	800784c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80075aa:	2112      	movs	r1, #18
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f9f1 	bl	8007994 <USBH_Get_DevDesc>
 80075b2:	4603      	mov	r3, r0
 80075b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075b6:	7bbb      	ldrb	r3, [r7, #14]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d103      	bne.n	80075c4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2202      	movs	r2, #2
 80075c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075c2:	e145      	b.n	8007850 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	f040 8142 	bne.w	8007850 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075d2:	3301      	adds	r3, #1
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d903      	bls.n	80075ee <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	220d      	movs	r2, #13
 80075ea:	701a      	strb	r2, [r3, #0]
      break;
 80075ec:	e130      	b.n	8007850 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	795b      	ldrb	r3, [r3, #5]
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 f853 	bl	80086a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	791b      	ldrb	r3, [r3, #4]
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f001 f84d 	bl	80086a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	701a      	strb	r2, [r3, #0]
      break;
 8007612:	e11d      	b.n	8007850 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007614:	2101      	movs	r1, #1
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fa68 	bl	8007aec <USBH_SetAddress>
 800761c:	4603      	mov	r3, r0
 800761e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007620:	7bbb      	ldrb	r3, [r7, #14]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d132      	bne.n	800768c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007626:	2002      	movs	r0, #2
 8007628:	f001 fb30 	bl	8008c8c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2203      	movs	r2, #3
 8007638:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	7919      	ldrb	r1, [r3, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800764e:	b292      	uxth	r2, r2
 8007650:	9202      	str	r2, [sp, #8]
 8007652:	2200      	movs	r2, #0
 8007654:	9201      	str	r2, [sp, #4]
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	4603      	mov	r3, r0
 800765a:	2280      	movs	r2, #128	; 0x80
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 ffcf 	bl	8008600 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	7959      	ldrb	r1, [r3, #5]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007676:	b292      	uxth	r2, r2
 8007678:	9202      	str	r2, [sp, #8]
 800767a:	2200      	movs	r2, #0
 800767c:	9201      	str	r2, [sp, #4]
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	4603      	mov	r3, r0
 8007682:	2200      	movs	r2, #0
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 ffbb 	bl	8008600 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800768a:	e0e3      	b.n	8007854 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800768c:	7bbb      	ldrb	r3, [r7, #14]
 800768e:	2b03      	cmp	r3, #3
 8007690:	f040 80e0 	bne.w	8007854 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	220d      	movs	r2, #13
 8007698:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	705a      	strb	r2, [r3, #1]
      break;
 80076a0:	e0d8      	b.n	8007854 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80076a2:	2109      	movs	r1, #9
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f99d 	bl	80079e4 <USBH_Get_CfgDesc>
 80076aa:	4603      	mov	r3, r0
 80076ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d103      	bne.n	80076bc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2204      	movs	r2, #4
 80076b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076ba:	e0cd      	b.n	8007858 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
 80076be:	2b03      	cmp	r3, #3
 80076c0:	f040 80ca 	bne.w	8007858 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076ca:	3301      	adds	r3, #1
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d903      	bls.n	80076e6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	220d      	movs	r2, #13
 80076e2:	701a      	strb	r2, [r3, #0]
      break;
 80076e4:	e0b8      	b.n	8007858 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	795b      	ldrb	r3, [r3, #5]
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 ffd7 	bl	80086a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	791b      	ldrb	r3, [r3, #4]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 ffd1 	bl	80086a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	701a      	strb	r2, [r3, #0]
      break;
 800770a:	e0a5      	b.n	8007858 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f965 	bl	80079e4 <USBH_Get_CfgDesc>
 800771a:	4603      	mov	r3, r0
 800771c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800771e:	7bbb      	ldrb	r3, [r7, #14]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d103      	bne.n	800772c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2205      	movs	r2, #5
 8007728:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800772a:	e097      	b.n	800785c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	2b03      	cmp	r3, #3
 8007730:	f040 8094 	bne.w	800785c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800773a:	3301      	adds	r3, #1
 800773c:	b2da      	uxtb	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800774a:	2b03      	cmp	r3, #3
 800774c:	d903      	bls.n	8007756 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	220d      	movs	r2, #13
 8007752:	701a      	strb	r2, [r3, #0]
      break;
 8007754:	e082      	b.n	800785c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	795b      	ldrb	r3, [r3, #5]
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 ff9f 	bl	80086a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	791b      	ldrb	r3, [r3, #4]
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 ff99 	bl	80086a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	701a      	strb	r2, [r3, #0]
      break;
 800777a:	e06f      	b.n	800785c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007782:	2b00      	cmp	r3, #0
 8007784:	d019      	beq.n	80077ba <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007792:	23ff      	movs	r3, #255	; 0xff
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f949 	bl	8007a2c <USBH_Get_StringDesc>
 800779a:	4603      	mov	r3, r0
 800779c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800779e:	7bbb      	ldrb	r3, [r7, #14]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d103      	bne.n	80077ac <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2206      	movs	r2, #6
 80077a8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077aa:	e059      	b.n	8007860 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077ac:	7bbb      	ldrb	r3, [r7, #14]
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d156      	bne.n	8007860 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2206      	movs	r2, #6
 80077b6:	705a      	strb	r2, [r3, #1]
      break;
 80077b8:	e052      	b.n	8007860 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2206      	movs	r2, #6
 80077be:	705a      	strb	r2, [r3, #1]
      break;
 80077c0:	e04e      	b.n	8007860 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d019      	beq.n	8007800 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077d8:	23ff      	movs	r3, #255	; 0xff
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f926 	bl	8007a2c <USBH_Get_StringDesc>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d103      	bne.n	80077f2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2207      	movs	r2, #7
 80077ee:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077f0:	e038      	b.n	8007864 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d135      	bne.n	8007864 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2207      	movs	r2, #7
 80077fc:	705a      	strb	r2, [r3, #1]
      break;
 80077fe:	e031      	b.n	8007864 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2207      	movs	r2, #7
 8007804:	705a      	strb	r2, [r3, #1]
      break;
 8007806:	e02d      	b.n	8007864 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800780e:	2b00      	cmp	r3, #0
 8007810:	d017      	beq.n	8007842 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800781e:	23ff      	movs	r3, #255	; 0xff
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f903 	bl	8007a2c <USBH_Get_StringDesc>
 8007826:	4603      	mov	r3, r0
 8007828:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800782a:	7bbb      	ldrb	r3, [r7, #14]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d102      	bne.n	8007836 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007834:	e018      	b.n	8007868 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007836:	7bbb      	ldrb	r3, [r7, #14]
 8007838:	2b03      	cmp	r3, #3
 800783a:	d115      	bne.n	8007868 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	73fb      	strb	r3, [r7, #15]
      break;
 8007840:	e012      	b.n	8007868 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	73fb      	strb	r3, [r7, #15]
      break;
 8007846:	e00f      	b.n	8007868 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007848:	bf00      	nop
 800784a:	e00e      	b.n	800786a <USBH_HandleEnum+0x3be>
      break;
 800784c:	bf00      	nop
 800784e:	e00c      	b.n	800786a <USBH_HandleEnum+0x3be>
      break;
 8007850:	bf00      	nop
 8007852:	e00a      	b.n	800786a <USBH_HandleEnum+0x3be>
      break;
 8007854:	bf00      	nop
 8007856:	e008      	b.n	800786a <USBH_HandleEnum+0x3be>
      break;
 8007858:	bf00      	nop
 800785a:	e006      	b.n	800786a <USBH_HandleEnum+0x3be>
      break;
 800785c:	bf00      	nop
 800785e:	e004      	b.n	800786a <USBH_HandleEnum+0x3be>
      break;
 8007860:	bf00      	nop
 8007862:	e002      	b.n	800786a <USBH_HandleEnum+0x3be>
      break;
 8007864:	bf00      	nop
 8007866:	e000      	b.n	800786a <USBH_HandleEnum+0x3be>
      break;
 8007868:	bf00      	nop
  }
  return Status;
 800786a:	7bfb      	ldrb	r3, [r7, #15]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f804 	bl	80078b6 <USBH_HandleSof>
}
 80078ae:	bf00      	nop
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b082      	sub	sp, #8
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b0b      	cmp	r3, #11
 80078c6:	d10a      	bne.n	80078de <USBH_HandleSof+0x28>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d005      	beq.n	80078de <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	4798      	blx	r3
  }
}
 80078de:	bf00      	nop
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80078f6:	bf00      	nop
}
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007912:	bf00      	nop
}
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800791e:	b480      	push	{r7}
 8007920:	b083      	sub	sp, #12
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f001 f844 	bl	80089fa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	791b      	ldrb	r3, [r3, #4]
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fe91 	bl	80086a0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	795b      	ldrb	r3, [r3, #5]
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fe8b 	bl	80086a0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af02      	add	r7, sp, #8
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80079a6:	78fb      	ldrb	r3, [r7, #3]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	4613      	mov	r3, r2
 80079ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079b2:	2100      	movs	r1, #0
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f864 	bl	8007a82 <USBH_GetDescriptor>
 80079ba:	4603      	mov	r3, r0
 80079bc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80079be:	7bfb      	ldrb	r3, [r7, #15]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10a      	bne.n	80079da <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80079d0:	78fa      	ldrb	r2, [r7, #3]
 80079d2:	b292      	uxth	r2, r2
 80079d4:	4619      	mov	r1, r3
 80079d6:	f000 f918 	bl	8007c0a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80079da:	7bfb      	ldrb	r3, [r7, #15]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af02      	add	r7, sp, #8
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	460b      	mov	r3, r1
 80079ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	331c      	adds	r3, #28
 80079f4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80079f6:	887b      	ldrh	r3, [r7, #2]
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a00:	2100      	movs	r1, #0
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f83d 	bl	8007a82 <USBH_GetDescriptor>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d107      	bne.n	8007a22 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007a12:	887b      	ldrh	r3, [r7, #2]
 8007a14:	461a      	mov	r2, r3
 8007a16:	68b9      	ldr	r1, [r7, #8]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f987 	bl	8007d2c <USBH_ParseCfgDesc>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b088      	sub	sp, #32
 8007a30:	af02      	add	r7, sp, #8
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	607a      	str	r2, [r7, #4]
 8007a36:	461a      	mov	r2, r3
 8007a38:	460b      	mov	r3, r1
 8007a3a:	72fb      	strb	r3, [r7, #11]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007a40:	7afb      	ldrb	r3, [r7, #11]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007a48:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a50:	893b      	ldrh	r3, [r7, #8]
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	460b      	mov	r3, r1
 8007a56:	2100      	movs	r1, #0
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 f812 	bl	8007a82 <USBH_GetDescriptor>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007a62:	7dfb      	ldrb	r3, [r7, #23]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d107      	bne.n	8007a78 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a6e:	893a      	ldrh	r2, [r7, #8]
 8007a70:	6879      	ldr	r1, [r7, #4]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 fb24 	bl	80080c0 <USBH_ParseStringDesc>
  }

  return status;
 8007a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	60f8      	str	r0, [r7, #12]
 8007a8a:	607b      	str	r3, [r7, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	72fb      	strb	r3, [r7, #11]
 8007a90:	4613      	mov	r3, r2
 8007a92:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	789b      	ldrb	r3, [r3, #2]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d11c      	bne.n	8007ad6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007a9c:	7afb      	ldrb	r3, [r7, #11]
 8007a9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2206      	movs	r2, #6
 8007aac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	893a      	ldrh	r2, [r7, #8]
 8007ab2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007ab4:	893b      	ldrh	r3, [r7, #8]
 8007ab6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007aba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007abe:	d104      	bne.n	8007aca <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f240 4209 	movw	r2, #1033	; 0x409
 8007ac6:	829a      	strh	r2, [r3, #20]
 8007ac8:	e002      	b.n	8007ad0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8b3a      	ldrh	r2, [r7, #24]
 8007ad4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007ad6:	8b3b      	ldrh	r3, [r7, #24]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 fb3d 	bl	800815c <USBH_CtlReq>
 8007ae2:	4603      	mov	r3, r0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	789b      	ldrb	r3, [r3, #2]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d10f      	bne.n	8007b20 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2205      	movs	r2, #5
 8007b0a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007b0c:	78fb      	ldrb	r3, [r7, #3]
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b20:	2200      	movs	r2, #0
 8007b22:	2100      	movs	r1, #0
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fb19 	bl	800815c <USBH_CtlReq>
 8007b2a:	4603      	mov	r3, r0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	789b      	ldrb	r3, [r3, #2]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d10e      	bne.n	8007b66 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2209      	movs	r2, #9
 8007b52:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	887a      	ldrh	r2, [r7, #2]
 8007b58:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b66:	2200      	movs	r2, #0
 8007b68:	2100      	movs	r1, #0
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 faf6 	bl	800815c <USBH_CtlReq>
 8007b70:	4603      	mov	r3, r0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b082      	sub	sp, #8
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	460b      	mov	r3, r1
 8007b84:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	789b      	ldrb	r3, [r3, #2]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d10f      	bne.n	8007bae <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2203      	movs	r2, #3
 8007b98:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007b9a:	78fb      	ldrb	r3, [r7, #3]
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007bae:	2200      	movs	r2, #0
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fad2 	bl	800815c <USBH_CtlReq>
 8007bb8:	4603      	mov	r3, r0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b082      	sub	sp, #8
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	460b      	mov	r3, r1
 8007bcc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	789b      	ldrb	r3, [r3, #2]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d10f      	bne.n	8007bf6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2202      	movs	r2, #2
 8007bda:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007be8:	78fb      	ldrb	r3, [r7, #3]
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 faae 	bl	800815c <USBH_CtlReq>
 8007c00:	4603      	mov	r3, r0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b085      	sub	sp, #20
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	60f8      	str	r0, [r7, #12]
 8007c12:	60b9      	str	r1, [r7, #8]
 8007c14:	4613      	mov	r3, r2
 8007c16:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	781a      	ldrb	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	785a      	ldrb	r2, [r3, #1]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	3302      	adds	r3, #2
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	3303      	adds	r3, #3
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	021b      	lsls	r3, r3, #8
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	791a      	ldrb	r2, [r3, #4]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	795a      	ldrb	r2, [r3, #5]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	799a      	ldrb	r2, [r3, #6]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	79da      	ldrb	r2, [r3, #7]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	79db      	ldrb	r3, [r3, #7]
 8007c68:	2b20      	cmp	r3, #32
 8007c6a:	dc11      	bgt.n	8007c90 <USBH_ParseDevDesc+0x86>
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	db16      	blt.n	8007c9e <USBH_ParseDevDesc+0x94>
 8007c70:	3b08      	subs	r3, #8
 8007c72:	2201      	movs	r2, #1
 8007c74:	fa02 f303 	lsl.w	r3, r2, r3
 8007c78:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	bf14      	ite	ne
 8007c84:	2301      	movne	r3, #1
 8007c86:	2300      	moveq	r3, #0
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d102      	bne.n	8007c94 <USBH_ParseDevDesc+0x8a>
 8007c8e:	e006      	b.n	8007c9e <USBH_ParseDevDesc+0x94>
 8007c90:	2b40      	cmp	r3, #64	; 0x40
 8007c92:	d104      	bne.n	8007c9e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	79da      	ldrb	r2, [r3, #7]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	71da      	strb	r2, [r3, #7]
      break;
 8007c9c:	e003      	b.n	8007ca6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2240      	movs	r2, #64	; 0x40
 8007ca2:	71da      	strb	r2, [r3, #7]
      break;
 8007ca4:	bf00      	nop
  }

  if (length > 8U)
 8007ca6:	88fb      	ldrh	r3, [r7, #6]
 8007ca8:	2b08      	cmp	r3, #8
 8007caa:	d939      	bls.n	8007d20 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	3308      	adds	r3, #8
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	3309      	adds	r3, #9
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	021b      	lsls	r3, r3, #8
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	330a      	adds	r3, #10
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	330b      	adds	r3, #11
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	021b      	lsls	r3, r3, #8
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	330c      	adds	r3, #12
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	330d      	adds	r3, #13
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	021b      	lsls	r3, r3, #8
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	7b9a      	ldrb	r2, [r3, #14]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	7bda      	ldrb	r2, [r3, #15]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	7c1a      	ldrb	r2, [r3, #16]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	7c5a      	ldrb	r2, [r3, #17]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	745a      	strb	r2, [r3, #17]
  }
}
 8007d20:	bf00      	nop
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08c      	sub	sp, #48	; 0x30
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	4613      	mov	r3, r2
 8007d38:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d40:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007d52:	2300      	movs	r3, #0
 8007d54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	781a      	ldrb	r2, [r3, #0]
 8007d60:	6a3b      	ldr	r3, [r7, #32]
 8007d62:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	785a      	ldrb	r2, [r3, #1]
 8007d68:	6a3b      	ldr	r3, [r7, #32]
 8007d6a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	3302      	adds	r3, #2
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	3303      	adds	r3, #3
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	021b      	lsls	r3, r3, #8
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	4313      	orrs	r3, r2
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d88:	bf28      	it	cs
 8007d8a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	791a      	ldrb	r2, [r3, #4]
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	795a      	ldrb	r2, [r3, #5]
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	799a      	ldrb	r2, [r3, #6]
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	79da      	ldrb	r2, [r3, #7]
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	7a1a      	ldrb	r2, [r3, #8]
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	2b09      	cmp	r3, #9
 8007dc2:	d002      	beq.n	8007dca <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	2209      	movs	r2, #9
 8007dc8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007dca:	88fb      	ldrh	r3, [r7, #6]
 8007dcc:	2b09      	cmp	r3, #9
 8007dce:	f240 809d 	bls.w	8007f0c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007dd2:	2309      	movs	r3, #9
 8007dd4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007dda:	e081      	b.n	8007ee0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ddc:	f107 0316 	add.w	r3, r7, #22
 8007de0:	4619      	mov	r1, r3
 8007de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007de4:	f000 f99f 	bl	8008126 <USBH_GetNextDesc>
 8007de8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	785b      	ldrb	r3, [r3, #1]
 8007dee:	2b04      	cmp	r3, #4
 8007df0:	d176      	bne.n	8007ee0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	2b09      	cmp	r3, #9
 8007df8:	d002      	beq.n	8007e00 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfc:	2209      	movs	r2, #9
 8007dfe:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e04:	221a      	movs	r2, #26
 8007e06:	fb02 f303 	mul.w	r3, r2, r3
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	6a3a      	ldr	r2, [r7, #32]
 8007e0e:	4413      	add	r3, r2
 8007e10:	3302      	adds	r3, #2
 8007e12:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e16:	69f8      	ldr	r0, [r7, #28]
 8007e18:	f000 f87e 	bl	8007f18 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007e22:	2300      	movs	r3, #0
 8007e24:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007e26:	e043      	b.n	8007eb0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e28:	f107 0316 	add.w	r3, r7, #22
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e30:	f000 f979 	bl	8008126 <USBH_GetNextDesc>
 8007e34:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e38:	785b      	ldrb	r3, [r3, #1]
 8007e3a:	2b05      	cmp	r3, #5
 8007e3c:	d138      	bne.n	8007eb0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	795b      	ldrb	r3, [r3, #5]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d10f      	bne.n	8007e66 <USBH_ParseCfgDesc+0x13a>
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	799b      	ldrb	r3, [r3, #6]
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d10b      	bne.n	8007e66 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	79db      	ldrb	r3, [r3, #7]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10f      	bne.n	8007e76 <USBH_ParseCfgDesc+0x14a>
 8007e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	2b09      	cmp	r3, #9
 8007e5c:	d00b      	beq.n	8007e76 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	2209      	movs	r2, #9
 8007e62:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e64:	e007      	b.n	8007e76 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	2b07      	cmp	r3, #7
 8007e6c:	d004      	beq.n	8007e78 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e70:	2207      	movs	r2, #7
 8007e72:	701a      	strb	r2, [r3, #0]
 8007e74:	e000      	b.n	8007e78 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e76:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e7c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007e80:	3201      	adds	r2, #1
 8007e82:	00d2      	lsls	r2, r2, #3
 8007e84:	211a      	movs	r1, #26
 8007e86:	fb01 f303 	mul.w	r3, r1, r3
 8007e8a:	4413      	add	r3, r2
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	6a3a      	ldr	r2, [r7, #32]
 8007e90:	4413      	add	r3, r2
 8007e92:	3304      	adds	r3, #4
 8007e94:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e98:	69b9      	ldr	r1, [r7, #24]
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f000 f86b 	bl	8007f76 <USBH_ParseEPDesc>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007ea6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007eaa:	3301      	adds	r3, #1
 8007eac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	791b      	ldrb	r3, [r3, #4]
 8007eb4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d204      	bcs.n	8007ec6 <USBH_ParseCfgDesc+0x19a>
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	885a      	ldrh	r2, [r3, #2]
 8007ec0:	8afb      	ldrh	r3, [r7, #22]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d8b0      	bhi.n	8007e28 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	791b      	ldrb	r3, [r3, #4]
 8007eca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d201      	bcs.n	8007ed6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e01c      	b.n	8007f10 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eda:	3301      	adds	r3, #1
 8007edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d805      	bhi.n	8007ef4 <USBH_ParseCfgDesc+0x1c8>
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	885a      	ldrh	r2, [r3, #2]
 8007eec:	8afb      	ldrh	r3, [r7, #22]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	f63f af74 	bhi.w	8007ddc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	791b      	ldrb	r3, [r3, #4]
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	bf28      	it	cs
 8007efc:	2302      	movcs	r3, #2
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d201      	bcs.n	8007f0c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e001      	b.n	8007f10 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007f0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3730      	adds	r7, #48	; 0x30
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781a      	ldrb	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	785a      	ldrb	r2, [r3, #1]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	789a      	ldrb	r2, [r3, #2]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	78da      	ldrb	r2, [r3, #3]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	791a      	ldrb	r2, [r3, #4]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	795a      	ldrb	r2, [r3, #5]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	799a      	ldrb	r2, [r3, #6]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	79da      	ldrb	r2, [r3, #7]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	7a1a      	ldrb	r2, [r3, #8]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	721a      	strb	r2, [r3, #8]
}
 8007f6a:	bf00      	nop
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b087      	sub	sp, #28
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	60f8      	str	r0, [r7, #12]
 8007f7e:	60b9      	str	r1, [r7, #8]
 8007f80:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	781a      	ldrb	r2, [r3, #0]
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	785a      	ldrb	r2, [r3, #1]
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	789a      	ldrb	r2, [r3, #2]
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	78da      	ldrb	r2, [r3, #3]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	3304      	adds	r3, #4
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	3305      	adds	r3, #5
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	021b      	lsls	r3, r3, #8
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	799a      	ldrb	r2, [r3, #6]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	889b      	ldrh	r3, [r3, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d102      	bne.n	8007fd8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	75fb      	strb	r3, [r7, #23]
 8007fd6:	e033      	b.n	8008040 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	889b      	ldrh	r3, [r3, #4]
 8007fdc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007fe0:	f023 0307 	bic.w	r3, r3, #7
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	889b      	ldrh	r3, [r3, #4]
 8007fee:	b21a      	sxth	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	b299      	uxth	r1, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	3305      	adds	r3, #5
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	021b      	lsls	r3, r3, #8
 8008002:	b29b      	uxth	r3, r3
 8008004:	430b      	orrs	r3, r1
 8008006:	b29b      	uxth	r3, r3
 8008008:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800800c:	2b00      	cmp	r3, #0
 800800e:	d110      	bne.n	8008032 <USBH_ParseEPDesc+0xbc>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	3304      	adds	r3, #4
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	b299      	uxth	r1, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	3305      	adds	r3, #5
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	b29b      	uxth	r3, r3
 8008020:	021b      	lsls	r3, r3, #8
 8008022:	b29b      	uxth	r3, r3
 8008024:	430b      	orrs	r3, r1
 8008026:	b29b      	uxth	r3, r3
 8008028:	b21b      	sxth	r3, r3
 800802a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800802e:	b21b      	sxth	r3, r3
 8008030:	e001      	b.n	8008036 <USBH_ParseEPDesc+0xc0>
 8008032:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008036:	4313      	orrs	r3, r2
 8008038:	b21b      	sxth	r3, r3
 800803a:	b29a      	uxth	r2, r3
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008046:	2b00      	cmp	r3, #0
 8008048:	d116      	bne.n	8008078 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	78db      	ldrb	r3, [r3, #3]
 800804e:	f003 0303 	and.w	r3, r3, #3
 8008052:	2b01      	cmp	r3, #1
 8008054:	d005      	beq.n	8008062 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	78db      	ldrb	r3, [r3, #3]
 800805a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800805e:	2b03      	cmp	r3, #3
 8008060:	d127      	bne.n	80080b2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	799b      	ldrb	r3, [r3, #6]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <USBH_ParseEPDesc+0xfc>
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	799b      	ldrb	r3, [r3, #6]
 800806e:	2b10      	cmp	r3, #16
 8008070:	d91f      	bls.n	80080b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008072:	2303      	movs	r3, #3
 8008074:	75fb      	strb	r3, [r7, #23]
 8008076:	e01c      	b.n	80080b2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	78db      	ldrb	r3, [r3, #3]
 800807c:	f003 0303 	and.w	r3, r3, #3
 8008080:	2b01      	cmp	r3, #1
 8008082:	d10a      	bne.n	800809a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	799b      	ldrb	r3, [r3, #6]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d003      	beq.n	8008094 <USBH_ParseEPDesc+0x11e>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	799b      	ldrb	r3, [r3, #6]
 8008090:	2b10      	cmp	r3, #16
 8008092:	d90e      	bls.n	80080b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008094:	2303      	movs	r3, #3
 8008096:	75fb      	strb	r3, [r7, #23]
 8008098:	e00b      	b.n	80080b2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	78db      	ldrb	r3, [r3, #3]
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d105      	bne.n	80080b2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	799b      	ldrb	r3, [r3, #6]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80080ae:	2303      	movs	r3, #3
 80080b0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80080b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	371c      	adds	r7, #28
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b087      	sub	sp, #28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	4613      	mov	r3, r2
 80080cc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3301      	adds	r3, #1
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d120      	bne.n	800811a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	1e9a      	subs	r2, r3, #2
 80080de:	88fb      	ldrh	r3, [r7, #6]
 80080e0:	4293      	cmp	r3, r2
 80080e2:	bf28      	it	cs
 80080e4:	4613      	movcs	r3, r2
 80080e6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	3302      	adds	r3, #2
 80080ec:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80080ee:	2300      	movs	r3, #0
 80080f0:	82fb      	strh	r3, [r7, #22]
 80080f2:	e00b      	b.n	800810c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80080f4:	8afb      	ldrh	r3, [r7, #22]
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	4413      	add	r3, r2
 80080fa:	781a      	ldrb	r2, [r3, #0]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	3301      	adds	r3, #1
 8008104:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008106:	8afb      	ldrh	r3, [r7, #22]
 8008108:	3302      	adds	r3, #2
 800810a:	82fb      	strh	r3, [r7, #22]
 800810c:	8afa      	ldrh	r2, [r7, #22]
 800810e:	8abb      	ldrh	r3, [r7, #20]
 8008110:	429a      	cmp	r2, r3
 8008112:	d3ef      	bcc.n	80080f4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	2200      	movs	r2, #0
 8008118:	701a      	strb	r2, [r3, #0]
  }
}
 800811a:	bf00      	nop
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008126:	b480      	push	{r7}
 8008128:	b085      	sub	sp, #20
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	881a      	ldrh	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	b29b      	uxth	r3, r3
 800813a:	4413      	add	r3, r2
 800813c:	b29a      	uxth	r2, r3
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4413      	add	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800814e:	68fb      	ldr	r3, [r7, #12]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	4613      	mov	r3, r2
 8008168:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800816a:	2301      	movs	r3, #1
 800816c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	789b      	ldrb	r3, [r3, #2]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d002      	beq.n	800817c <USBH_CtlReq+0x20>
 8008176:	2b02      	cmp	r3, #2
 8008178:	d00f      	beq.n	800819a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800817a:	e027      	b.n	80081cc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	88fa      	ldrh	r2, [r7, #6]
 8008186:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2201      	movs	r2, #1
 800818c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2202      	movs	r2, #2
 8008192:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008194:	2301      	movs	r3, #1
 8008196:	75fb      	strb	r3, [r7, #23]
      break;
 8008198:	e018      	b.n	80081cc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f000 f81c 	bl	80081d8 <USBH_HandleControl>
 80081a0:	4603      	mov	r3, r0
 80081a2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <USBH_CtlReq+0x54>
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d106      	bne.n	80081be <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2201      	movs	r2, #1
 80081b4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	761a      	strb	r2, [r3, #24]
      break;
 80081bc:	e005      	b.n	80081ca <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80081be:	7dfb      	ldrb	r3, [r7, #23]
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d102      	bne.n	80081ca <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2201      	movs	r2, #1
 80081c8:	709a      	strb	r2, [r3, #2]
      break;
 80081ca:	bf00      	nop
  }
  return status;
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af02      	add	r7, sp, #8
 80081de:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80081e0:	2301      	movs	r3, #1
 80081e2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80081e4:	2300      	movs	r3, #0
 80081e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	7e1b      	ldrb	r3, [r3, #24]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	2b0a      	cmp	r3, #10
 80081f0:	f200 8156 	bhi.w	80084a0 <USBH_HandleControl+0x2c8>
 80081f4:	a201      	add	r2, pc, #4	; (adr r2, 80081fc <USBH_HandleControl+0x24>)
 80081f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fa:	bf00      	nop
 80081fc:	08008229 	.word	0x08008229
 8008200:	08008243 	.word	0x08008243
 8008204:	080082ad 	.word	0x080082ad
 8008208:	080082d3 	.word	0x080082d3
 800820c:	0800830b 	.word	0x0800830b
 8008210:	08008335 	.word	0x08008335
 8008214:	08008387 	.word	0x08008387
 8008218:	080083a9 	.word	0x080083a9
 800821c:	080083e5 	.word	0x080083e5
 8008220:	0800840b 	.word	0x0800840b
 8008224:	08008449 	.word	0x08008449
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f103 0110 	add.w	r1, r3, #16
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	795b      	ldrb	r3, [r3, #5]
 8008232:	461a      	mov	r2, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f943 	bl	80084c0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2202      	movs	r2, #2
 800823e:	761a      	strb	r2, [r3, #24]
      break;
 8008240:	e139      	b.n	80084b6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	795b      	ldrb	r3, [r3, #5]
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fcc5 	bl	8008bd8 <USBH_LL_GetURBState>
 800824e:	4603      	mov	r3, r0
 8008250:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d11e      	bne.n	8008296 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	7c1b      	ldrb	r3, [r3, #16]
 800825c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008260:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	8adb      	ldrh	r3, [r3, #22]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00a      	beq.n	8008280 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800826a:	7b7b      	ldrb	r3, [r7, #13]
 800826c:	2b80      	cmp	r3, #128	; 0x80
 800826e:	d103      	bne.n	8008278 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2203      	movs	r2, #3
 8008274:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008276:	e115      	b.n	80084a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2205      	movs	r2, #5
 800827c:	761a      	strb	r2, [r3, #24]
      break;
 800827e:	e111      	b.n	80084a4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008280:	7b7b      	ldrb	r3, [r7, #13]
 8008282:	2b80      	cmp	r3, #128	; 0x80
 8008284:	d103      	bne.n	800828e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2209      	movs	r2, #9
 800828a:	761a      	strb	r2, [r3, #24]
      break;
 800828c:	e10a      	b.n	80084a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2207      	movs	r2, #7
 8008292:	761a      	strb	r2, [r3, #24]
      break;
 8008294:	e106      	b.n	80084a4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	2b04      	cmp	r3, #4
 800829a:	d003      	beq.n	80082a4 <USBH_HandleControl+0xcc>
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	2b02      	cmp	r3, #2
 80082a0:	f040 8100 	bne.w	80084a4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	220b      	movs	r2, #11
 80082a8:	761a      	strb	r2, [r3, #24]
      break;
 80082aa:	e0fb      	b.n	80084a4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6899      	ldr	r1, [r3, #8]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	899a      	ldrh	r2, [r3, #12]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	791b      	ldrb	r3, [r3, #4]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f93a 	bl	800853e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2204      	movs	r2, #4
 80082ce:	761a      	strb	r2, [r3, #24]
      break;
 80082d0:	e0f1      	b.n	80084b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	791b      	ldrb	r3, [r3, #4]
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fc7d 	bl	8008bd8 <USBH_LL_GetURBState>
 80082de:	4603      	mov	r3, r0
 80082e0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d102      	bne.n	80082ee <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2209      	movs	r2, #9
 80082ec:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	2b05      	cmp	r3, #5
 80082f2:	d102      	bne.n	80082fa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80082f4:	2303      	movs	r3, #3
 80082f6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082f8:	e0d6      	b.n	80084a8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
 80082fc:	2b04      	cmp	r3, #4
 80082fe:	f040 80d3 	bne.w	80084a8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	220b      	movs	r2, #11
 8008306:	761a      	strb	r2, [r3, #24]
      break;
 8008308:	e0ce      	b.n	80084a8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6899      	ldr	r1, [r3, #8]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	899a      	ldrh	r2, [r3, #12]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	795b      	ldrb	r3, [r3, #5]
 8008316:	2001      	movs	r0, #1
 8008318:	9000      	str	r0, [sp, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f8ea 	bl	80084f4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008326:	b29a      	uxth	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2206      	movs	r2, #6
 8008330:	761a      	strb	r2, [r3, #24]
      break;
 8008332:	e0c0      	b.n	80084b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	795b      	ldrb	r3, [r3, #5]
 8008338:	4619      	mov	r1, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fc4c 	bl	8008bd8 <USBH_LL_GetURBState>
 8008340:	4603      	mov	r3, r0
 8008342:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008344:	7bbb      	ldrb	r3, [r7, #14]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d103      	bne.n	8008352 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2207      	movs	r2, #7
 800834e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008350:	e0ac      	b.n	80084ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008352:	7bbb      	ldrb	r3, [r7, #14]
 8008354:	2b05      	cmp	r3, #5
 8008356:	d105      	bne.n	8008364 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	220c      	movs	r2, #12
 800835c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800835e:	2303      	movs	r3, #3
 8008360:	73fb      	strb	r3, [r7, #15]
      break;
 8008362:	e0a3      	b.n	80084ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	2b02      	cmp	r3, #2
 8008368:	d103      	bne.n	8008372 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2205      	movs	r2, #5
 800836e:	761a      	strb	r2, [r3, #24]
      break;
 8008370:	e09c      	b.n	80084ac <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008372:	7bbb      	ldrb	r3, [r7, #14]
 8008374:	2b04      	cmp	r3, #4
 8008376:	f040 8099 	bne.w	80084ac <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	220b      	movs	r2, #11
 800837e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008380:	2302      	movs	r3, #2
 8008382:	73fb      	strb	r3, [r7, #15]
      break;
 8008384:	e092      	b.n	80084ac <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	791b      	ldrb	r3, [r3, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	2100      	movs	r1, #0
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f8d5 	bl	800853e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800839a:	b29a      	uxth	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2208      	movs	r2, #8
 80083a4:	761a      	strb	r2, [r3, #24]

      break;
 80083a6:	e086      	b.n	80084b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	791b      	ldrb	r3, [r3, #4]
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fc12 	bl	8008bd8 <USBH_LL_GetURBState>
 80083b4:	4603      	mov	r3, r0
 80083b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083b8:	7bbb      	ldrb	r3, [r7, #14]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d105      	bne.n	80083ca <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	220d      	movs	r2, #13
 80083c2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083c8:	e072      	b.n	80084b0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	2b04      	cmp	r3, #4
 80083ce:	d103      	bne.n	80083d8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	220b      	movs	r2, #11
 80083d4:	761a      	strb	r2, [r3, #24]
      break;
 80083d6:	e06b      	b.n	80084b0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80083d8:	7bbb      	ldrb	r3, [r7, #14]
 80083da:	2b05      	cmp	r3, #5
 80083dc:	d168      	bne.n	80084b0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80083de:	2303      	movs	r3, #3
 80083e0:	73fb      	strb	r3, [r7, #15]
      break;
 80083e2:	e065      	b.n	80084b0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	795b      	ldrb	r3, [r3, #5]
 80083e8:	2201      	movs	r2, #1
 80083ea:	9200      	str	r2, [sp, #0]
 80083ec:	2200      	movs	r2, #0
 80083ee:	2100      	movs	r1, #0
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f87f 	bl	80084f4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	220a      	movs	r2, #10
 8008406:	761a      	strb	r2, [r3, #24]
      break;
 8008408:	e055      	b.n	80084b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	795b      	ldrb	r3, [r3, #5]
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fbe1 	bl	8008bd8 <USBH_LL_GetURBState>
 8008416:	4603      	mov	r3, r0
 8008418:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800841a:	7bbb      	ldrb	r3, [r7, #14]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d105      	bne.n	800842c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	220d      	movs	r2, #13
 8008428:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800842a:	e043      	b.n	80084b4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	2b02      	cmp	r3, #2
 8008430:	d103      	bne.n	800843a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2209      	movs	r2, #9
 8008436:	761a      	strb	r2, [r3, #24]
      break;
 8008438:	e03c      	b.n	80084b4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	2b04      	cmp	r3, #4
 800843e:	d139      	bne.n	80084b4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	220b      	movs	r2, #11
 8008444:	761a      	strb	r2, [r3, #24]
      break;
 8008446:	e035      	b.n	80084b4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	7e5b      	ldrb	r3, [r3, #25]
 800844c:	3301      	adds	r3, #1
 800844e:	b2da      	uxtb	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	765a      	strb	r2, [r3, #25]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	7e5b      	ldrb	r3, [r3, #25]
 8008458:	2b02      	cmp	r3, #2
 800845a:	d806      	bhi.n	800846a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008468:	e025      	b.n	80084b6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008470:	2106      	movs	r1, #6
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	795b      	ldrb	r3, [r3, #5]
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f90c 	bl	80086a0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	791b      	ldrb	r3, [r3, #4]
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f906 	bl	80086a0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800849a:	2302      	movs	r3, #2
 800849c:	73fb      	strb	r3, [r7, #15]
      break;
 800849e:	e00a      	b.n	80084b6 <USBH_HandleControl+0x2de>

    default:
      break;
 80084a0:	bf00      	nop
 80084a2:	e008      	b.n	80084b6 <USBH_HandleControl+0x2de>
      break;
 80084a4:	bf00      	nop
 80084a6:	e006      	b.n	80084b6 <USBH_HandleControl+0x2de>
      break;
 80084a8:	bf00      	nop
 80084aa:	e004      	b.n	80084b6 <USBH_HandleControl+0x2de>
      break;
 80084ac:	bf00      	nop
 80084ae:	e002      	b.n	80084b6 <USBH_HandleControl+0x2de>
      break;
 80084b0:	bf00      	nop
 80084b2:	e000      	b.n	80084b6 <USBH_HandleControl+0x2de>
      break;
 80084b4:	bf00      	nop
  }

  return status;
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b088      	sub	sp, #32
 80084c4:	af04      	add	r7, sp, #16
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	4613      	mov	r3, r2
 80084cc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80084ce:	79f9      	ldrb	r1, [r7, #7]
 80084d0:	2300      	movs	r3, #0
 80084d2:	9303      	str	r3, [sp, #12]
 80084d4:	2308      	movs	r3, #8
 80084d6:	9302      	str	r3, [sp, #8]
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	9301      	str	r3, [sp, #4]
 80084dc:	2300      	movs	r3, #0
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	2300      	movs	r3, #0
 80084e2:	2200      	movs	r2, #0
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f000 fb46 	bl	8008b76 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b088      	sub	sp, #32
 80084f8:	af04      	add	r7, sp, #16
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	4611      	mov	r1, r2
 8008500:	461a      	mov	r2, r3
 8008502:	460b      	mov	r3, r1
 8008504:	80fb      	strh	r3, [r7, #6]
 8008506:	4613      	mov	r3, r2
 8008508:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008510:	2b00      	cmp	r3, #0
 8008512:	d001      	beq.n	8008518 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008514:	2300      	movs	r3, #0
 8008516:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008518:	7979      	ldrb	r1, [r7, #5]
 800851a:	7e3b      	ldrb	r3, [r7, #24]
 800851c:	9303      	str	r3, [sp, #12]
 800851e:	88fb      	ldrh	r3, [r7, #6]
 8008520:	9302      	str	r3, [sp, #8]
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	9301      	str	r3, [sp, #4]
 8008526:	2301      	movs	r3, #1
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	2300      	movs	r3, #0
 800852c:	2200      	movs	r2, #0
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 fb21 	bl	8008b76 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b088      	sub	sp, #32
 8008542:	af04      	add	r7, sp, #16
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	4611      	mov	r1, r2
 800854a:	461a      	mov	r2, r3
 800854c:	460b      	mov	r3, r1
 800854e:	80fb      	strh	r3, [r7, #6]
 8008550:	4613      	mov	r3, r2
 8008552:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008554:	7979      	ldrb	r1, [r7, #5]
 8008556:	2300      	movs	r3, #0
 8008558:	9303      	str	r3, [sp, #12]
 800855a:	88fb      	ldrh	r3, [r7, #6]
 800855c:	9302      	str	r3, [sp, #8]
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	9301      	str	r3, [sp, #4]
 8008562:	2301      	movs	r3, #1
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	2300      	movs	r3, #0
 8008568:	2201      	movs	r2, #1
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 fb03 	bl	8008b76 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008570:	2300      	movs	r3, #0

}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b088      	sub	sp, #32
 800857e:	af04      	add	r7, sp, #16
 8008580:	60f8      	str	r0, [r7, #12]
 8008582:	60b9      	str	r1, [r7, #8]
 8008584:	4611      	mov	r1, r2
 8008586:	461a      	mov	r2, r3
 8008588:	460b      	mov	r3, r1
 800858a:	80fb      	strh	r3, [r7, #6]
 800858c:	4613      	mov	r3, r2
 800858e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800859a:	2300      	movs	r3, #0
 800859c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800859e:	7979      	ldrb	r1, [r7, #5]
 80085a0:	7e3b      	ldrb	r3, [r7, #24]
 80085a2:	9303      	str	r3, [sp, #12]
 80085a4:	88fb      	ldrh	r3, [r7, #6]
 80085a6:	9302      	str	r3, [sp, #8]
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	9301      	str	r3, [sp, #4]
 80085ac:	2301      	movs	r3, #1
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	2302      	movs	r3, #2
 80085b2:	2200      	movs	r2, #0
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f000 fade 	bl	8008b76 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af04      	add	r7, sp, #16
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	4611      	mov	r1, r2
 80085d0:	461a      	mov	r2, r3
 80085d2:	460b      	mov	r3, r1
 80085d4:	80fb      	strh	r3, [r7, #6]
 80085d6:	4613      	mov	r3, r2
 80085d8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085da:	7979      	ldrb	r1, [r7, #5]
 80085dc:	2300      	movs	r3, #0
 80085de:	9303      	str	r3, [sp, #12]
 80085e0:	88fb      	ldrh	r3, [r7, #6]
 80085e2:	9302      	str	r3, [sp, #8]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	2301      	movs	r3, #1
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	2302      	movs	r3, #2
 80085ee:	2201      	movs	r2, #1
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 fac0 	bl	8008b76 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af04      	add	r7, sp, #16
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	4608      	mov	r0, r1
 800860a:	4611      	mov	r1, r2
 800860c:	461a      	mov	r2, r3
 800860e:	4603      	mov	r3, r0
 8008610:	70fb      	strb	r3, [r7, #3]
 8008612:	460b      	mov	r3, r1
 8008614:	70bb      	strb	r3, [r7, #2]
 8008616:	4613      	mov	r3, r2
 8008618:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800861a:	7878      	ldrb	r0, [r7, #1]
 800861c:	78ba      	ldrb	r2, [r7, #2]
 800861e:	78f9      	ldrb	r1, [r7, #3]
 8008620:	8b3b      	ldrh	r3, [r7, #24]
 8008622:	9302      	str	r3, [sp, #8]
 8008624:	7d3b      	ldrb	r3, [r7, #20]
 8008626:	9301      	str	r3, [sp, #4]
 8008628:	7c3b      	ldrb	r3, [r7, #16]
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	4603      	mov	r3, r0
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fa53 	bl	8008ada <USBH_LL_OpenPipe>

  return USBH_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b082      	sub	sp, #8
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	460b      	mov	r3, r1
 8008648:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	4619      	mov	r1, r3
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fa72 	bl	8008b38 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	460b      	mov	r3, r1
 8008668:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f836 	bl	80086dc <USBH_GetFreePipe>
 8008670:	4603      	mov	r3, r0
 8008672:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008674:	89fb      	ldrh	r3, [r7, #14]
 8008676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800867a:	4293      	cmp	r3, r2
 800867c:	d00a      	beq.n	8008694 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800867e:	78fa      	ldrb	r2, [r7, #3]
 8008680:	89fb      	ldrh	r3, [r7, #14]
 8008682:	f003 030f 	and.w	r3, r3, #15
 8008686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	33e0      	adds	r3, #224	; 0xe0
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	440b      	add	r3, r1
 8008692:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008694:	89fb      	ldrh	r3, [r7, #14]
 8008696:	b2db      	uxtb	r3, r3
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80086ac:	78fb      	ldrb	r3, [r7, #3]
 80086ae:	2b0f      	cmp	r3, #15
 80086b0:	d80d      	bhi.n	80086ce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80086b2:	78fb      	ldrb	r3, [r7, #3]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	33e0      	adds	r3, #224	; 0xe0
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	78fb      	ldrb	r3, [r7, #3]
 80086c0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80086c4:	6879      	ldr	r1, [r7, #4]
 80086c6:	33e0      	adds	r3, #224	; 0xe0
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	440b      	add	r3, r1
 80086cc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80086e4:	2300      	movs	r3, #0
 80086e6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80086e8:	2300      	movs	r3, #0
 80086ea:	73fb      	strb	r3, [r7, #15]
 80086ec:	e00f      	b.n	800870e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	33e0      	adds	r3, #224	; 0xe0
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d102      	bne.n	8008708 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008702:	7bfb      	ldrb	r3, [r7, #15]
 8008704:	b29b      	uxth	r3, r3
 8008706:	e007      	b.n	8008718 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008708:	7bfb      	ldrb	r3, [r7, #15]
 800870a:	3301      	adds	r3, #1
 800870c:	73fb      	strb	r3, [r7, #15]
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	2b0f      	cmp	r3, #15
 8008712:	d9ec      	bls.n	80086ee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008714:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008718:	4618      	mov	r0, r3
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008728:	2201      	movs	r2, #1
 800872a:	490e      	ldr	r1, [pc, #56]	; (8008764 <MX_USB_HOST_Init+0x40>)
 800872c:	480e      	ldr	r0, [pc, #56]	; (8008768 <MX_USB_HOST_Init+0x44>)
 800872e:	f7fe fba7 	bl	8006e80 <USBH_Init>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d001      	beq.n	800873c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008738:	f7f8 f962 	bl	8000a00 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800873c:	490b      	ldr	r1, [pc, #44]	; (800876c <MX_USB_HOST_Init+0x48>)
 800873e:	480a      	ldr	r0, [pc, #40]	; (8008768 <MX_USB_HOST_Init+0x44>)
 8008740:	f7fe fc2c 	bl	8006f9c <USBH_RegisterClass>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d001      	beq.n	800874e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800874a:	f7f8 f959 	bl	8000a00 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800874e:	4806      	ldr	r0, [pc, #24]	; (8008768 <MX_USB_HOST_Init+0x44>)
 8008750:	f7fe fcb0 	bl	80070b4 <USBH_Start>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800875a:	f7f8 f951 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800875e:	bf00      	nop
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	08008785 	.word	0x08008785
 8008768:	20000640 	.word	0x20000640
 800876c:	2000000c 	.word	0x2000000c

08008770 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008774:	4802      	ldr	r0, [pc, #8]	; (8008780 <MX_USB_HOST_Process+0x10>)
 8008776:	f7fe fcad 	bl	80070d4 <USBH_Process>
}
 800877a:	bf00      	nop
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000640 	.word	0x20000640

08008784 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	460b      	mov	r3, r1
 800878e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008790:	78fb      	ldrb	r3, [r7, #3]
 8008792:	3b01      	subs	r3, #1
 8008794:	2b04      	cmp	r3, #4
 8008796:	d819      	bhi.n	80087cc <USBH_UserProcess+0x48>
 8008798:	a201      	add	r2, pc, #4	; (adr r2, 80087a0 <USBH_UserProcess+0x1c>)
 800879a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879e:	bf00      	nop
 80087a0:	080087cd 	.word	0x080087cd
 80087a4:	080087bd 	.word	0x080087bd
 80087a8:	080087cd 	.word	0x080087cd
 80087ac:	080087c5 	.word	0x080087c5
 80087b0:	080087b5 	.word	0x080087b5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80087b4:	4b09      	ldr	r3, [pc, #36]	; (80087dc <USBH_UserProcess+0x58>)
 80087b6:	2203      	movs	r2, #3
 80087b8:	701a      	strb	r2, [r3, #0]
  break;
 80087ba:	e008      	b.n	80087ce <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80087bc:	4b07      	ldr	r3, [pc, #28]	; (80087dc <USBH_UserProcess+0x58>)
 80087be:	2202      	movs	r2, #2
 80087c0:	701a      	strb	r2, [r3, #0]
  break;
 80087c2:	e004      	b.n	80087ce <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80087c4:	4b05      	ldr	r3, [pc, #20]	; (80087dc <USBH_UserProcess+0x58>)
 80087c6:	2201      	movs	r2, #1
 80087c8:	701a      	strb	r2, [r3, #0]
  break;
 80087ca:	e000      	b.n	80087ce <USBH_UserProcess+0x4a>

  default:
  break;
 80087cc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80087ce:	bf00      	nop
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	20000a18 	.word	0x20000a18

080087e0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b08a      	sub	sp, #40	; 0x28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087e8:	f107 0314 	add.w	r3, r7, #20
 80087ec:	2200      	movs	r2, #0
 80087ee:	601a      	str	r2, [r3, #0]
 80087f0:	605a      	str	r2, [r3, #4]
 80087f2:	609a      	str	r2, [r3, #8]
 80087f4:	60da      	str	r2, [r3, #12]
 80087f6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008800:	d147      	bne.n	8008892 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008802:	2300      	movs	r3, #0
 8008804:	613b      	str	r3, [r7, #16]
 8008806:	4b25      	ldr	r3, [pc, #148]	; (800889c <HAL_HCD_MspInit+0xbc>)
 8008808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880a:	4a24      	ldr	r2, [pc, #144]	; (800889c <HAL_HCD_MspInit+0xbc>)
 800880c:	f043 0301 	orr.w	r3, r3, #1
 8008810:	6313      	str	r3, [r2, #48]	; 0x30
 8008812:	4b22      	ldr	r3, [pc, #136]	; (800889c <HAL_HCD_MspInit+0xbc>)
 8008814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	613b      	str	r3, [r7, #16]
 800881c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800881e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008824:	2300      	movs	r3, #0
 8008826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008828:	2300      	movs	r3, #0
 800882a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800882c:	f107 0314 	add.w	r3, r7, #20
 8008830:	4619      	mov	r1, r3
 8008832:	481b      	ldr	r0, [pc, #108]	; (80088a0 <HAL_HCD_MspInit+0xc0>)
 8008834:	f7f8 fe82 	bl	800153c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008838:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800883c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800883e:	2302      	movs	r3, #2
 8008840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008842:	2300      	movs	r3, #0
 8008844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008846:	2303      	movs	r3, #3
 8008848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800884a:	230a      	movs	r3, #10
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800884e:	f107 0314 	add.w	r3, r7, #20
 8008852:	4619      	mov	r1, r3
 8008854:	4812      	ldr	r0, [pc, #72]	; (80088a0 <HAL_HCD_MspInit+0xc0>)
 8008856:	f7f8 fe71 	bl	800153c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800885a:	4b10      	ldr	r3, [pc, #64]	; (800889c <HAL_HCD_MspInit+0xbc>)
 800885c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800885e:	4a0f      	ldr	r2, [pc, #60]	; (800889c <HAL_HCD_MspInit+0xbc>)
 8008860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008864:	6353      	str	r3, [r2, #52]	; 0x34
 8008866:	2300      	movs	r3, #0
 8008868:	60fb      	str	r3, [r7, #12]
 800886a:	4b0c      	ldr	r3, [pc, #48]	; (800889c <HAL_HCD_MspInit+0xbc>)
 800886c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886e:	4a0b      	ldr	r2, [pc, #44]	; (800889c <HAL_HCD_MspInit+0xbc>)
 8008870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008874:	6453      	str	r3, [r2, #68]	; 0x44
 8008876:	4b09      	ldr	r3, [pc, #36]	; (800889c <HAL_HCD_MspInit+0xbc>)
 8008878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800887a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800887e:	60fb      	str	r3, [r7, #12]
 8008880:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008882:	2200      	movs	r2, #0
 8008884:	2100      	movs	r1, #0
 8008886:	2043      	movs	r0, #67	; 0x43
 8008888:	f7f8 fe21 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800888c:	2043      	movs	r0, #67	; 0x43
 800888e:	f7f8 fe3a 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008892:	bf00      	nop
 8008894:	3728      	adds	r7, #40	; 0x28
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	40023800 	.word	0x40023800
 80088a0:	40020000 	.word	0x40020000

080088a4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe ffed 	bl	8007892 <USBH_LL_IncTimer>
}
 80088b8:	bf00      	nop
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7ff f825 	bl	800791e <USBH_LL_Connect>
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7ff f82e 	bl	800794c <USBH_LL_Disconnect>
}
 80088f0:	bf00      	nop
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	70fb      	strb	r3, [r7, #3]
 8008904:	4613      	mov	r3, r2
 8008906:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008922:	4618      	mov	r0, r3
 8008924:	f7fe ffdf 	bl	80078e6 <USBH_LL_PortEnabled>
}
 8008928:	bf00      	nop
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800893e:	4618      	mov	r0, r3
 8008940:	f7fe ffdf 	bl	8007902 <USBH_LL_PortDisabled>
}
 8008944:	bf00      	nop
 8008946:	3708      	adds	r7, #8
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800895a:	2b01      	cmp	r3, #1
 800895c:	d12a      	bne.n	80089b4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800895e:	4a18      	ldr	r2, [pc, #96]	; (80089c0 <USBH_LL_Init+0x74>)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a15      	ldr	r2, [pc, #84]	; (80089c0 <USBH_LL_Init+0x74>)
 800896a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800896e:	4b14      	ldr	r3, [pc, #80]	; (80089c0 <USBH_LL_Init+0x74>)
 8008970:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008974:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008976:	4b12      	ldr	r3, [pc, #72]	; (80089c0 <USBH_LL_Init+0x74>)
 8008978:	2208      	movs	r2, #8
 800897a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800897c:	4b10      	ldr	r3, [pc, #64]	; (80089c0 <USBH_LL_Init+0x74>)
 800897e:	2201      	movs	r2, #1
 8008980:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008982:	4b0f      	ldr	r3, [pc, #60]	; (80089c0 <USBH_LL_Init+0x74>)
 8008984:	2200      	movs	r2, #0
 8008986:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008988:	4b0d      	ldr	r3, [pc, #52]	; (80089c0 <USBH_LL_Init+0x74>)
 800898a:	2202      	movs	r2, #2
 800898c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800898e:	4b0c      	ldr	r3, [pc, #48]	; (80089c0 <USBH_LL_Init+0x74>)
 8008990:	2200      	movs	r2, #0
 8008992:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008994:	480a      	ldr	r0, [pc, #40]	; (80089c0 <USBH_LL_Init+0x74>)
 8008996:	f7f8 ff6e 	bl	8001876 <HAL_HCD_Init>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80089a0:	f7f8 f82e 	bl	8000a00 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80089a4:	4806      	ldr	r0, [pc, #24]	; (80089c0 <USBH_LL_Init+0x74>)
 80089a6:	f7f9 fb52 	bl	800204e <HAL_HCD_GetCurrentFrame>
 80089aa:	4603      	mov	r3, r0
 80089ac:	4619      	mov	r1, r3
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7fe ff60 	bl	8007874 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	20000a1c 	.word	0x20000a1c

080089c4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089da:	4618      	mov	r0, r3
 80089dc:	f7f9 fac1 	bl	8001f62 <HAL_HCD_Start>
 80089e0:	4603      	mov	r3, r0
 80089e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 f95c 	bl	8008ca4 <USBH_Get_USB_Status>
 80089ec:	4603      	mov	r3, r0
 80089ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b084      	sub	sp, #16
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7f9 fac9 	bl	8001fa8 <HAL_HCD_Stop>
 8008a16:	4603      	mov	r3, r0
 8008a18:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 f941 	bl	8008ca4 <USBH_Get_USB_Status>
 8008a22:	4603      	mov	r3, r0
 8008a24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a26:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7f9 fb11 	bl	800206a <HAL_HCD_GetCurrentSpeed>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d00c      	beq.n	8008a68 <USBH_LL_GetSpeed+0x38>
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d80d      	bhi.n	8008a6e <USBH_LL_GetSpeed+0x3e>
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d002      	beq.n	8008a5c <USBH_LL_GetSpeed+0x2c>
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d003      	beq.n	8008a62 <USBH_LL_GetSpeed+0x32>
 8008a5a:	e008      	b.n	8008a6e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a60:	e008      	b.n	8008a74 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008a62:	2301      	movs	r3, #1
 8008a64:	73fb      	strb	r3, [r7, #15]
    break;
 8008a66:	e005      	b.n	8008a74 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008a68:	2302      	movs	r3, #2
 8008a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a6c:	e002      	b.n	8008a74 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	73fb      	strb	r3, [r7, #15]
    break;
 8008a72:	bf00      	nop
  }
  return  speed;
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7f9 faa4 	bl	8001fe2 <HAL_HCD_ResetPort>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 f8ff 	bl	8008ca4 <USBH_Get_USB_Status>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ac6:	78fa      	ldrb	r2, [r7, #3]
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7f9 faab 	bl	8002026 <HAL_HCD_HC_GetXferCount>
 8008ad0:	4603      	mov	r3, r0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008ada:	b590      	push	{r4, r7, lr}
 8008adc:	b089      	sub	sp, #36	; 0x24
 8008ade:	af04      	add	r7, sp, #16
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	4608      	mov	r0, r1
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	4603      	mov	r3, r0
 8008aea:	70fb      	strb	r3, [r7, #3]
 8008aec:	460b      	mov	r3, r1
 8008aee:	70bb      	strb	r3, [r7, #2]
 8008af0:	4613      	mov	r3, r2
 8008af2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008af8:	2300      	movs	r3, #0
 8008afa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b02:	787c      	ldrb	r4, [r7, #1]
 8008b04:	78ba      	ldrb	r2, [r7, #2]
 8008b06:	78f9      	ldrb	r1, [r7, #3]
 8008b08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b0a:	9302      	str	r3, [sp, #8]
 8008b0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b10:	9301      	str	r3, [sp, #4]
 8008b12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	4623      	mov	r3, r4
 8008b1a:	f7f8 ff0e 	bl	800193a <HAL_HCD_HC_Init>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f000 f8bd 	bl	8008ca4 <USBH_Get_USB_Status>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3714      	adds	r7, #20
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd90      	pop	{r4, r7, pc}

08008b38 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b52:	78fa      	ldrb	r2, [r7, #3]
 8008b54:	4611      	mov	r1, r2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7f8 ff7e 	bl	8001a58 <HAL_HCD_HC_Halt>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 f89e 	bl	8008ca4 <USBH_Get_USB_Status>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008b76:	b590      	push	{r4, r7, lr}
 8008b78:	b089      	sub	sp, #36	; 0x24
 8008b7a:	af04      	add	r7, sp, #16
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	4608      	mov	r0, r1
 8008b80:	4611      	mov	r1, r2
 8008b82:	461a      	mov	r2, r3
 8008b84:	4603      	mov	r3, r0
 8008b86:	70fb      	strb	r3, [r7, #3]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	70bb      	strb	r3, [r7, #2]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b9e:	787c      	ldrb	r4, [r7, #1]
 8008ba0:	78ba      	ldrb	r2, [r7, #2]
 8008ba2:	78f9      	ldrb	r1, [r7, #3]
 8008ba4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ba8:	9303      	str	r3, [sp, #12]
 8008baa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bac:	9302      	str	r3, [sp, #8]
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	9301      	str	r3, [sp, #4]
 8008bb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	4623      	mov	r3, r4
 8008bba:	f7f8 ff71 	bl	8001aa0 <HAL_HCD_HC_SubmitRequest>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 f86d 	bl	8008ca4 <USBH_Get_USB_Status>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3714      	adds	r7, #20
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd90      	pop	{r4, r7, pc}

08008bd8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	460b      	mov	r3, r1
 8008be2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bea:	78fa      	ldrb	r2, [r7, #3]
 8008bec:	4611      	mov	r1, r2
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7f9 fa05 	bl	8001ffe <HAL_HCD_HC_GetURBState>
 8008bf4:	4603      	mov	r3, r0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b082      	sub	sp, #8
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	460b      	mov	r3, r1
 8008c08:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d103      	bne.n	8008c1c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c14:	78fb      	ldrb	r3, [r7, #3]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 f870 	bl	8008cfc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008c1c:	20c8      	movs	r0, #200	; 0xc8
 8008c1e:	f7f8 fb57 	bl	80012d0 <HAL_Delay>
  return USBH_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	460b      	mov	r3, r1
 8008c36:	70fb      	strb	r3, [r7, #3]
 8008c38:	4613      	mov	r3, r2
 8008c3a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c42:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008c44:	78fb      	ldrb	r3, [r7, #3]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	212c      	movs	r1, #44	; 0x2c
 8008c4a:	fb01 f303 	mul.w	r3, r1, r3
 8008c4e:	4413      	add	r3, r2
 8008c50:	333b      	adds	r3, #59	; 0x3b
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d009      	beq.n	8008c6c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008c58:	78fb      	ldrb	r3, [r7, #3]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	212c      	movs	r1, #44	; 0x2c
 8008c5e:	fb01 f303 	mul.w	r3, r1, r3
 8008c62:	4413      	add	r3, r2
 8008c64:	3354      	adds	r3, #84	; 0x54
 8008c66:	78ba      	ldrb	r2, [r7, #2]
 8008c68:	701a      	strb	r2, [r3, #0]
 8008c6a:	e008      	b.n	8008c7e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	212c      	movs	r1, #44	; 0x2c
 8008c72:	fb01 f303 	mul.w	r3, r1, r3
 8008c76:	4413      	add	r3, r2
 8008c78:	3355      	adds	r3, #85	; 0x55
 8008c7a:	78ba      	ldrb	r2, [r7, #2]
 8008c7c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7f8 fb1b 	bl	80012d0 <HAL_Delay>
}
 8008c9a:	bf00      	nop
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
	...

08008ca4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	4603      	mov	r3, r0
 8008cac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008cb2:	79fb      	ldrb	r3, [r7, #7]
 8008cb4:	2b03      	cmp	r3, #3
 8008cb6:	d817      	bhi.n	8008ce8 <USBH_Get_USB_Status+0x44>
 8008cb8:	a201      	add	r2, pc, #4	; (adr r2, 8008cc0 <USBH_Get_USB_Status+0x1c>)
 8008cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cbe:	bf00      	nop
 8008cc0:	08008cd1 	.word	0x08008cd1
 8008cc4:	08008cd7 	.word	0x08008cd7
 8008cc8:	08008cdd 	.word	0x08008cdd
 8008ccc:	08008ce3 	.word	0x08008ce3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd4:	e00b      	b.n	8008cee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	73fb      	strb	r3, [r7, #15]
    break;
 8008cda:	e008      	b.n	8008cee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	73fb      	strb	r3, [r7, #15]
    break;
 8008ce0:	e005      	b.n	8008cee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008ce2:	2302      	movs	r3, #2
 8008ce4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ce6:	e002      	b.n	8008cee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008ce8:	2302      	movs	r3, #2
 8008cea:	73fb      	strb	r3, [r7, #15]
    break;
 8008cec:	bf00      	nop
  }
  return usb_status;
 8008cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008d06:	79fb      	ldrb	r3, [r7, #7]
 8008d08:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008d0a:	79fb      	ldrb	r3, [r7, #7]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d102      	bne.n	8008d16 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008d10:	2300      	movs	r3, #0
 8008d12:	73fb      	strb	r3, [r7, #15]
 8008d14:	e001      	b.n	8008d1a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008d16:	2301      	movs	r3, #1
 8008d18:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	2101      	movs	r1, #1
 8008d20:	4803      	ldr	r0, [pc, #12]	; (8008d30 <MX_DriverVbusFS+0x34>)
 8008d22:	f7f8 fd8f 	bl	8001844 <HAL_GPIO_WritePin>
}
 8008d26:	bf00      	nop
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	40020800 	.word	0x40020800

08008d34 <__errno>:
 8008d34:	4b01      	ldr	r3, [pc, #4]	; (8008d3c <__errno+0x8>)
 8008d36:	6818      	ldr	r0, [r3, #0]
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	2000002c 	.word	0x2000002c

08008d40 <__libc_init_array>:
 8008d40:	b570      	push	{r4, r5, r6, lr}
 8008d42:	4d0d      	ldr	r5, [pc, #52]	; (8008d78 <__libc_init_array+0x38>)
 8008d44:	4c0d      	ldr	r4, [pc, #52]	; (8008d7c <__libc_init_array+0x3c>)
 8008d46:	1b64      	subs	r4, r4, r5
 8008d48:	10a4      	asrs	r4, r4, #2
 8008d4a:	2600      	movs	r6, #0
 8008d4c:	42a6      	cmp	r6, r4
 8008d4e:	d109      	bne.n	8008d64 <__libc_init_array+0x24>
 8008d50:	4d0b      	ldr	r5, [pc, #44]	; (8008d80 <__libc_init_array+0x40>)
 8008d52:	4c0c      	ldr	r4, [pc, #48]	; (8008d84 <__libc_init_array+0x44>)
 8008d54:	f000 f92e 	bl	8008fb4 <_init>
 8008d58:	1b64      	subs	r4, r4, r5
 8008d5a:	10a4      	asrs	r4, r4, #2
 8008d5c:	2600      	movs	r6, #0
 8008d5e:	42a6      	cmp	r6, r4
 8008d60:	d105      	bne.n	8008d6e <__libc_init_array+0x2e>
 8008d62:	bd70      	pop	{r4, r5, r6, pc}
 8008d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d68:	4798      	blx	r3
 8008d6a:	3601      	adds	r6, #1
 8008d6c:	e7ee      	b.n	8008d4c <__libc_init_array+0xc>
 8008d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d72:	4798      	blx	r3
 8008d74:	3601      	adds	r6, #1
 8008d76:	e7f2      	b.n	8008d5e <__libc_init_array+0x1e>
 8008d78:	08008ff0 	.word	0x08008ff0
 8008d7c:	08008ff0 	.word	0x08008ff0
 8008d80:	08008ff0 	.word	0x08008ff0
 8008d84:	08008ff4 	.word	0x08008ff4

08008d88 <malloc>:
 8008d88:	4b02      	ldr	r3, [pc, #8]	; (8008d94 <malloc+0xc>)
 8008d8a:	4601      	mov	r1, r0
 8008d8c:	6818      	ldr	r0, [r3, #0]
 8008d8e:	f000 b87f 	b.w	8008e90 <_malloc_r>
 8008d92:	bf00      	nop
 8008d94:	2000002c 	.word	0x2000002c

08008d98 <free>:
 8008d98:	4b02      	ldr	r3, [pc, #8]	; (8008da4 <free+0xc>)
 8008d9a:	4601      	mov	r1, r0
 8008d9c:	6818      	ldr	r0, [r3, #0]
 8008d9e:	f000 b80b 	b.w	8008db8 <_free_r>
 8008da2:	bf00      	nop
 8008da4:	2000002c 	.word	0x2000002c

08008da8 <memset>:
 8008da8:	4402      	add	r2, r0
 8008daa:	4603      	mov	r3, r0
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d100      	bne.n	8008db2 <memset+0xa>
 8008db0:	4770      	bx	lr
 8008db2:	f803 1b01 	strb.w	r1, [r3], #1
 8008db6:	e7f9      	b.n	8008dac <memset+0x4>

08008db8 <_free_r>:
 8008db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dba:	2900      	cmp	r1, #0
 8008dbc:	d044      	beq.n	8008e48 <_free_r+0x90>
 8008dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dc2:	9001      	str	r0, [sp, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f1a1 0404 	sub.w	r4, r1, #4
 8008dca:	bfb8      	it	lt
 8008dcc:	18e4      	addlt	r4, r4, r3
 8008dce:	f000 f8e3 	bl	8008f98 <__malloc_lock>
 8008dd2:	4a1e      	ldr	r2, [pc, #120]	; (8008e4c <_free_r+0x94>)
 8008dd4:	9801      	ldr	r0, [sp, #4]
 8008dd6:	6813      	ldr	r3, [r2, #0]
 8008dd8:	b933      	cbnz	r3, 8008de8 <_free_r+0x30>
 8008dda:	6063      	str	r3, [r4, #4]
 8008ddc:	6014      	str	r4, [r2, #0]
 8008dde:	b003      	add	sp, #12
 8008de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008de4:	f000 b8de 	b.w	8008fa4 <__malloc_unlock>
 8008de8:	42a3      	cmp	r3, r4
 8008dea:	d908      	bls.n	8008dfe <_free_r+0x46>
 8008dec:	6825      	ldr	r5, [r4, #0]
 8008dee:	1961      	adds	r1, r4, r5
 8008df0:	428b      	cmp	r3, r1
 8008df2:	bf01      	itttt	eq
 8008df4:	6819      	ldreq	r1, [r3, #0]
 8008df6:	685b      	ldreq	r3, [r3, #4]
 8008df8:	1949      	addeq	r1, r1, r5
 8008dfa:	6021      	streq	r1, [r4, #0]
 8008dfc:	e7ed      	b.n	8008dda <_free_r+0x22>
 8008dfe:	461a      	mov	r2, r3
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	b10b      	cbz	r3, 8008e08 <_free_r+0x50>
 8008e04:	42a3      	cmp	r3, r4
 8008e06:	d9fa      	bls.n	8008dfe <_free_r+0x46>
 8008e08:	6811      	ldr	r1, [r2, #0]
 8008e0a:	1855      	adds	r5, r2, r1
 8008e0c:	42a5      	cmp	r5, r4
 8008e0e:	d10b      	bne.n	8008e28 <_free_r+0x70>
 8008e10:	6824      	ldr	r4, [r4, #0]
 8008e12:	4421      	add	r1, r4
 8008e14:	1854      	adds	r4, r2, r1
 8008e16:	42a3      	cmp	r3, r4
 8008e18:	6011      	str	r1, [r2, #0]
 8008e1a:	d1e0      	bne.n	8008dde <_free_r+0x26>
 8008e1c:	681c      	ldr	r4, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	6053      	str	r3, [r2, #4]
 8008e22:	4421      	add	r1, r4
 8008e24:	6011      	str	r1, [r2, #0]
 8008e26:	e7da      	b.n	8008dde <_free_r+0x26>
 8008e28:	d902      	bls.n	8008e30 <_free_r+0x78>
 8008e2a:	230c      	movs	r3, #12
 8008e2c:	6003      	str	r3, [r0, #0]
 8008e2e:	e7d6      	b.n	8008dde <_free_r+0x26>
 8008e30:	6825      	ldr	r5, [r4, #0]
 8008e32:	1961      	adds	r1, r4, r5
 8008e34:	428b      	cmp	r3, r1
 8008e36:	bf04      	itt	eq
 8008e38:	6819      	ldreq	r1, [r3, #0]
 8008e3a:	685b      	ldreq	r3, [r3, #4]
 8008e3c:	6063      	str	r3, [r4, #4]
 8008e3e:	bf04      	itt	eq
 8008e40:	1949      	addeq	r1, r1, r5
 8008e42:	6021      	streq	r1, [r4, #0]
 8008e44:	6054      	str	r4, [r2, #4]
 8008e46:	e7ca      	b.n	8008dde <_free_r+0x26>
 8008e48:	b003      	add	sp, #12
 8008e4a:	bd30      	pop	{r4, r5, pc}
 8008e4c:	20000d20 	.word	0x20000d20

08008e50 <sbrk_aligned>:
 8008e50:	b570      	push	{r4, r5, r6, lr}
 8008e52:	4e0e      	ldr	r6, [pc, #56]	; (8008e8c <sbrk_aligned+0x3c>)
 8008e54:	460c      	mov	r4, r1
 8008e56:	6831      	ldr	r1, [r6, #0]
 8008e58:	4605      	mov	r5, r0
 8008e5a:	b911      	cbnz	r1, 8008e62 <sbrk_aligned+0x12>
 8008e5c:	f000 f88c 	bl	8008f78 <_sbrk_r>
 8008e60:	6030      	str	r0, [r6, #0]
 8008e62:	4621      	mov	r1, r4
 8008e64:	4628      	mov	r0, r5
 8008e66:	f000 f887 	bl	8008f78 <_sbrk_r>
 8008e6a:	1c43      	adds	r3, r0, #1
 8008e6c:	d00a      	beq.n	8008e84 <sbrk_aligned+0x34>
 8008e6e:	1cc4      	adds	r4, r0, #3
 8008e70:	f024 0403 	bic.w	r4, r4, #3
 8008e74:	42a0      	cmp	r0, r4
 8008e76:	d007      	beq.n	8008e88 <sbrk_aligned+0x38>
 8008e78:	1a21      	subs	r1, r4, r0
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	f000 f87c 	bl	8008f78 <_sbrk_r>
 8008e80:	3001      	adds	r0, #1
 8008e82:	d101      	bne.n	8008e88 <sbrk_aligned+0x38>
 8008e84:	f04f 34ff 	mov.w	r4, #4294967295
 8008e88:	4620      	mov	r0, r4
 8008e8a:	bd70      	pop	{r4, r5, r6, pc}
 8008e8c:	20000d24 	.word	0x20000d24

08008e90 <_malloc_r>:
 8008e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e94:	1ccd      	adds	r5, r1, #3
 8008e96:	f025 0503 	bic.w	r5, r5, #3
 8008e9a:	3508      	adds	r5, #8
 8008e9c:	2d0c      	cmp	r5, #12
 8008e9e:	bf38      	it	cc
 8008ea0:	250c      	movcc	r5, #12
 8008ea2:	2d00      	cmp	r5, #0
 8008ea4:	4607      	mov	r7, r0
 8008ea6:	db01      	blt.n	8008eac <_malloc_r+0x1c>
 8008ea8:	42a9      	cmp	r1, r5
 8008eaa:	d905      	bls.n	8008eb8 <_malloc_r+0x28>
 8008eac:	230c      	movs	r3, #12
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	2600      	movs	r6, #0
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb8:	4e2e      	ldr	r6, [pc, #184]	; (8008f74 <_malloc_r+0xe4>)
 8008eba:	f000 f86d 	bl	8008f98 <__malloc_lock>
 8008ebe:	6833      	ldr	r3, [r6, #0]
 8008ec0:	461c      	mov	r4, r3
 8008ec2:	bb34      	cbnz	r4, 8008f12 <_malloc_r+0x82>
 8008ec4:	4629      	mov	r1, r5
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	f7ff ffc2 	bl	8008e50 <sbrk_aligned>
 8008ecc:	1c43      	adds	r3, r0, #1
 8008ece:	4604      	mov	r4, r0
 8008ed0:	d14d      	bne.n	8008f6e <_malloc_r+0xde>
 8008ed2:	6834      	ldr	r4, [r6, #0]
 8008ed4:	4626      	mov	r6, r4
 8008ed6:	2e00      	cmp	r6, #0
 8008ed8:	d140      	bne.n	8008f5c <_malloc_r+0xcc>
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	4631      	mov	r1, r6
 8008ede:	4638      	mov	r0, r7
 8008ee0:	eb04 0803 	add.w	r8, r4, r3
 8008ee4:	f000 f848 	bl	8008f78 <_sbrk_r>
 8008ee8:	4580      	cmp	r8, r0
 8008eea:	d13a      	bne.n	8008f62 <_malloc_r+0xd2>
 8008eec:	6821      	ldr	r1, [r4, #0]
 8008eee:	3503      	adds	r5, #3
 8008ef0:	1a6d      	subs	r5, r5, r1
 8008ef2:	f025 0503 	bic.w	r5, r5, #3
 8008ef6:	3508      	adds	r5, #8
 8008ef8:	2d0c      	cmp	r5, #12
 8008efa:	bf38      	it	cc
 8008efc:	250c      	movcc	r5, #12
 8008efe:	4629      	mov	r1, r5
 8008f00:	4638      	mov	r0, r7
 8008f02:	f7ff ffa5 	bl	8008e50 <sbrk_aligned>
 8008f06:	3001      	adds	r0, #1
 8008f08:	d02b      	beq.n	8008f62 <_malloc_r+0xd2>
 8008f0a:	6823      	ldr	r3, [r4, #0]
 8008f0c:	442b      	add	r3, r5
 8008f0e:	6023      	str	r3, [r4, #0]
 8008f10:	e00e      	b.n	8008f30 <_malloc_r+0xa0>
 8008f12:	6822      	ldr	r2, [r4, #0]
 8008f14:	1b52      	subs	r2, r2, r5
 8008f16:	d41e      	bmi.n	8008f56 <_malloc_r+0xc6>
 8008f18:	2a0b      	cmp	r2, #11
 8008f1a:	d916      	bls.n	8008f4a <_malloc_r+0xba>
 8008f1c:	1961      	adds	r1, r4, r5
 8008f1e:	42a3      	cmp	r3, r4
 8008f20:	6025      	str	r5, [r4, #0]
 8008f22:	bf18      	it	ne
 8008f24:	6059      	strne	r1, [r3, #4]
 8008f26:	6863      	ldr	r3, [r4, #4]
 8008f28:	bf08      	it	eq
 8008f2a:	6031      	streq	r1, [r6, #0]
 8008f2c:	5162      	str	r2, [r4, r5]
 8008f2e:	604b      	str	r3, [r1, #4]
 8008f30:	4638      	mov	r0, r7
 8008f32:	f104 060b 	add.w	r6, r4, #11
 8008f36:	f000 f835 	bl	8008fa4 <__malloc_unlock>
 8008f3a:	f026 0607 	bic.w	r6, r6, #7
 8008f3e:	1d23      	adds	r3, r4, #4
 8008f40:	1af2      	subs	r2, r6, r3
 8008f42:	d0b6      	beq.n	8008eb2 <_malloc_r+0x22>
 8008f44:	1b9b      	subs	r3, r3, r6
 8008f46:	50a3      	str	r3, [r4, r2]
 8008f48:	e7b3      	b.n	8008eb2 <_malloc_r+0x22>
 8008f4a:	6862      	ldr	r2, [r4, #4]
 8008f4c:	42a3      	cmp	r3, r4
 8008f4e:	bf0c      	ite	eq
 8008f50:	6032      	streq	r2, [r6, #0]
 8008f52:	605a      	strne	r2, [r3, #4]
 8008f54:	e7ec      	b.n	8008f30 <_malloc_r+0xa0>
 8008f56:	4623      	mov	r3, r4
 8008f58:	6864      	ldr	r4, [r4, #4]
 8008f5a:	e7b2      	b.n	8008ec2 <_malloc_r+0x32>
 8008f5c:	4634      	mov	r4, r6
 8008f5e:	6876      	ldr	r6, [r6, #4]
 8008f60:	e7b9      	b.n	8008ed6 <_malloc_r+0x46>
 8008f62:	230c      	movs	r3, #12
 8008f64:	603b      	str	r3, [r7, #0]
 8008f66:	4638      	mov	r0, r7
 8008f68:	f000 f81c 	bl	8008fa4 <__malloc_unlock>
 8008f6c:	e7a1      	b.n	8008eb2 <_malloc_r+0x22>
 8008f6e:	6025      	str	r5, [r4, #0]
 8008f70:	e7de      	b.n	8008f30 <_malloc_r+0xa0>
 8008f72:	bf00      	nop
 8008f74:	20000d20 	.word	0x20000d20

08008f78 <_sbrk_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	4d06      	ldr	r5, [pc, #24]	; (8008f94 <_sbrk_r+0x1c>)
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	4604      	mov	r4, r0
 8008f80:	4608      	mov	r0, r1
 8008f82:	602b      	str	r3, [r5, #0]
 8008f84:	f7f8 f8c0 	bl	8001108 <_sbrk>
 8008f88:	1c43      	adds	r3, r0, #1
 8008f8a:	d102      	bne.n	8008f92 <_sbrk_r+0x1a>
 8008f8c:	682b      	ldr	r3, [r5, #0]
 8008f8e:	b103      	cbz	r3, 8008f92 <_sbrk_r+0x1a>
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	bd38      	pop	{r3, r4, r5, pc}
 8008f94:	20000d28 	.word	0x20000d28

08008f98 <__malloc_lock>:
 8008f98:	4801      	ldr	r0, [pc, #4]	; (8008fa0 <__malloc_lock+0x8>)
 8008f9a:	f000 b809 	b.w	8008fb0 <__retarget_lock_acquire_recursive>
 8008f9e:	bf00      	nop
 8008fa0:	20000d2c 	.word	0x20000d2c

08008fa4 <__malloc_unlock>:
 8008fa4:	4801      	ldr	r0, [pc, #4]	; (8008fac <__malloc_unlock+0x8>)
 8008fa6:	f000 b804 	b.w	8008fb2 <__retarget_lock_release_recursive>
 8008faa:	bf00      	nop
 8008fac:	20000d2c 	.word	0x20000d2c

08008fb0 <__retarget_lock_acquire_recursive>:
 8008fb0:	4770      	bx	lr

08008fb2 <__retarget_lock_release_recursive>:
 8008fb2:	4770      	bx	lr

08008fb4 <_init>:
 8008fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb6:	bf00      	nop
 8008fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fba:	bc08      	pop	{r3}
 8008fbc:	469e      	mov	lr, r3
 8008fbe:	4770      	bx	lr

08008fc0 <_fini>:
 8008fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc2:	bf00      	nop
 8008fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fc6:	bc08      	pop	{r3}
 8008fc8:	469e      	mov	lr, r3
 8008fca:	4770      	bx	lr
