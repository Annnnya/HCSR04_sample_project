
HCSR04_Lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  0800948c  0800948c  0001948c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a250  0800a250  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800a250  0800a250  0001a250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a258  0800a258  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a258  0800a258  0001a258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a25c  0800a25c  0001a25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800a260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c58  20000098  0800a2f8  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cf0  0800a2f8  00020cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e48  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bd5  00000000  00000000  00036f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  0003aae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  0003bd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fd6  00000000  00000000  0003cdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019276  00000000  00000000  00056dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ef1b  00000000  00000000  00070044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fef5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd4  00000000  00000000  000fefb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009474 	.word	0x08009474

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08009474 	.word	0x08009474

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <udelay_asm>:
// LOOP_FREQ == 18 для 72МГц

//! Затримка в мікросекундах.
//! Увага! Не працюватиме за частот, менших за 4МГц, через значення LOOP_FREQ
//! ЗАтримка буде трішки більшою за задану, але на лічені такти.
void udelay_asm(uint32_t useconds) {
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	useconds *= LOOP_FREQ;
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <udelay_asm+0x30>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <udelay_asm+0x34>)
 8000592:	fba2 2303 	umull	r2, r3, r2, r3
 8000596:	0d1a      	lsrs	r2, r3, #20
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	fb02 f303 	mul.w	r3, r2, r3
 800059e:	607b      	str	r3, [r7, #4]

    asm volatile("   mov r0, %[useconds]    \n\t"
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4618      	mov	r0, r3
 80005a4:	3801      	subs	r0, #1
 80005a6:	d8fd      	bhi.n	80005a4 <udelay_asm+0x20>
                 "1: subs r0, #1            \n\t"
                 "   bhi 1b                 \n\t"
                 :
                 : [useconds] "r" (useconds)
                 : "r0");
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	20000008 	.word	0x20000008
 80005b8:	431bde83 	.word	0x431bde83

080005bc <myFmtFunction>:

void myFmtFunction(const char *fmt, ...)
{
 80005bc:	b40f      	push	{r0, r1, r2, r3}
 80005be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	466b      	mov	r3, sp
 80005c8:	461e      	mov	r6, r3
  // determine required buffer size
  va_list args;
  va_start(args, fmt);
 80005ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005ce:	603b      	str	r3, [r7, #0]
  int len = vsnprintf(NULL, 0, fmt, args);
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	2000      	movs	r0, #0
 80005d8:	f008 fbe0 	bl	8008d9c <vsniprintf>
 80005dc:	60f8      	str	r0, [r7, #12]
  va_end(args);
  if(len < 0) return;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	da01      	bge.n	80005e8 <myFmtFunction+0x2c>
 80005e4:	46b5      	mov	sp, r6
 80005e6:	e037      	b.n	8000658 <myFmtFunction+0x9c>

  // format message
  char msg[len + 1]; // or use heap allocation if implementation doesn't support VLAs
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	1c59      	adds	r1, r3, #1
 80005ec:	1e4b      	subs	r3, r1, #1
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	460a      	mov	r2, r1
 80005f2:	2300      	movs	r3, #0
 80005f4:	4690      	mov	r8, r2
 80005f6:	4699      	mov	r9, r3
 80005f8:	f04f 0200 	mov.w	r2, #0
 80005fc:	f04f 0300 	mov.w	r3, #0
 8000600:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000604:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000608:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800060c:	460a      	mov	r2, r1
 800060e:	2300      	movs	r3, #0
 8000610:	4614      	mov	r4, r2
 8000612:	461d      	mov	r5, r3
 8000614:	f04f 0200 	mov.w	r2, #0
 8000618:	f04f 0300 	mov.w	r3, #0
 800061c:	00eb      	lsls	r3, r5, #3
 800061e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000622:	00e2      	lsls	r2, r4, #3
 8000624:	460b      	mov	r3, r1
 8000626:	3307      	adds	r3, #7
 8000628:	08db      	lsrs	r3, r3, #3
 800062a:	00db      	lsls	r3, r3, #3
 800062c:	ebad 0d03 	sub.w	sp, sp, r3
 8000630:	466b      	mov	r3, sp
 8000632:	3300      	adds	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
  va_start(args, fmt);
 8000636:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800063a:	603b      	str	r3, [r7, #0]
  vsnprintf(msg, len + 1, fmt, args);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	3301      	adds	r3, #1
 8000640:	4619      	mov	r1, r3
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f008 fba8 	bl	8008d9c <vsniprintf>
  va_end(args);

  // call myFunction
  SSD1306_Puts(msg, &Font_11x18, 1);
 800064c:	2201      	movs	r2, #1
 800064e:	4905      	ldr	r1, [pc, #20]	; (8000664 <myFmtFunction+0xa8>)
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 fc9f 	bl	8000f94 <SSD1306_Puts>
 8000656:	46b5      	mov	sp, r6
}
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000660:	b004      	add	sp, #16
 8000662:	4770      	bx	lr
 8000664:	20000000 	.word	0x20000000

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066e:	f000 ff7d 	bl	800156c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000672:	f000 f863 	bl	800073c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000676:	f000 f8c9 	bl	800080c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f000 f9a9 	bl	80009d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800067e:	f000 f8e5 	bl	800084c <MX_I2C1_Init>
  MX_I2S2_Init();
 8000682:	f000 f911 	bl	80008a8 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000686:	f000 f93d 	bl	8000904 <MX_I2S3_Init>
  MX_SPI1_Init();
 800068a:	f000 f96b 	bl	8000964 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800068e:	f007 ff1f 	bl	80084d0 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the display
 8000692:	f000 fa7f 	bl	8000b94 <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
		 HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800069c:	4823      	ldr	r0, [pc, #140]	; (800072c <main+0xc4>)
 800069e:	f001 faa9 	bl	8001bf4 <HAL_GPIO_WritePin>
		 udelay_asm(16);
 80006a2:	2010      	movs	r0, #16
 80006a4:	f7ff ff6e 	bl	8000584 <udelay_asm>
		 HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ae:	481f      	ldr	r0, [pc, #124]	; (800072c <main+0xc4>)
 80006b0:	f001 faa0 	bl	8001bf4 <HAL_GPIO_WritePin>

		 while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET );
 80006b4:	bf00      	nop
 80006b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ba:	481c      	ldr	r0, [pc, #112]	; (800072c <main+0xc4>)
 80006bc:	f001 fa82 	bl	8001bc4 <HAL_GPIO_ReadPin>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d0f7      	beq.n	80006b6 <main+0x4e>
		   {}
		 uint32_t before = HAL_GetTick();
 80006c6:	f000 ffb7 	bl	8001638 <HAL_GetTick>
 80006ca:	6078      	str	r0, [r7, #4]
		 while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET );
 80006cc:	bf00      	nop
 80006ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d2:	4816      	ldr	r0, [pc, #88]	; (800072c <main+0xc4>)
 80006d4:	f001 fa76 	bl	8001bc4 <HAL_GPIO_ReadPin>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d0f7      	beq.n	80006ce <main+0x66>
		   {}
		 uint32_t pulse_time = HAL_GetTick()-before;
 80006de:	f000 ffab 	bl	8001638 <HAL_GetTick>
 80006e2:	4602      	mov	r2, r0
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	603b      	str	r3, [r7, #0]
		 //! Увага, не забудьте додати:
		 // monitor arm semihosting enable
		 // До  Debug Configurations -> Startup Tab:
		 //
		 //SSD1306_Clear();
		 SSD1306_GotoXY (10,15); // goto 10, 10
 80006ea:	210f      	movs	r1, #15
 80006ec:	200a      	movs	r0, #10
 80006ee:	f000 fbbb 	bl	8000e68 <SSD1306_GotoXY>
		 myFmtFunction("%lu ms   ", pulse_time);
 80006f2:	6839      	ldr	r1, [r7, #0]
 80006f4:	480e      	ldr	r0, [pc, #56]	; (8000730 <main+0xc8>)
 80006f6:	f7ff ff61 	bl	80005bc <myFmtFunction>

		 SSD1306_GotoXY (10, 35);
 80006fa:	2123      	movs	r1, #35	; 0x23
 80006fc:	200a      	movs	r0, #10
 80006fe:	f000 fbb3 	bl	8000e68 <SSD1306_GotoXY>
		 myFmtFunction("%lu cm   ", pulse_time*343/20);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	f240 1257 	movw	r2, #343	; 0x157
 8000708:	fb02 f303 	mul.w	r3, r2, r3
 800070c:	4a09      	ldr	r2, [pc, #36]	; (8000734 <main+0xcc>)
 800070e:	fba2 2303 	umull	r2, r3, r2, r3
 8000712:	091b      	lsrs	r3, r3, #4
 8000714:	4619      	mov	r1, r3
 8000716:	4808      	ldr	r0, [pc, #32]	; (8000738 <main+0xd0>)
 8000718:	f7ff ff50 	bl	80005bc <myFmtFunction>
		 //SSD1306_Puts(("%lu cm", pulse_time*343/20), &Font_11x18, 1);
		 //SSD1306_Puts ("WORLD !!", &Font_11x18, 1);
		 SSD1306_UpdateScreen(); // update screen
 800071c:	f000 fafe 	bl	8000d1c <SSD1306_UpdateScreen>
		 HAL_Delay(10);
 8000720:	200a      	movs	r0, #10
 8000722:	f000 ff95 	bl	8001650 <HAL_Delay>


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000726:	f007 fef9 	bl	800851c <MX_USB_HOST_Process>
    {
 800072a:	e7b4      	b.n	8000696 <main+0x2e>
 800072c:	40020c00 	.word	0x40020c00
 8000730:	0800948c 	.word	0x0800948c
 8000734:	cccccccd 	.word	0xcccccccd
 8000738:	08009498 	.word	0x08009498

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	; 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	2230      	movs	r2, #48	; 0x30
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f008 fa02 	bl	8008b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <SystemClock_Config+0xc8>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	4a26      	ldr	r2, [pc, #152]	; (8000804 <SystemClock_Config+0xc8>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	; 0x40
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <SystemClock_Config+0xc8>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	4b21      	ldr	r3, [pc, #132]	; (8000808 <SystemClock_Config+0xcc>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a20      	ldr	r2, [pc, #128]	; (8000808 <SystemClock_Config+0xcc>)
 8000786:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <SystemClock_Config+0xcc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000798:	2301      	movs	r3, #1
 800079a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800079c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007b0:	23c0      	movs	r3, #192	; 0xc0
 80007b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007b4:	2304      	movs	r3, #4
 80007b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80007b8:	2308      	movs	r3, #8
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0320 	add.w	r3, r7, #32
 80007c0:	4618      	mov	r0, r3
 80007c2:	f004 f855 	bl	8004870 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007cc:	f000 f9dc 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2103      	movs	r1, #3
 80007ec:	4618      	mov	r0, r3
 80007ee:	f004 fab7 	bl	8004d60 <HAL_RCC_ClockConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007f8:	f000 f9c6 	bl	8000b88 <Error_Handler>
  }
}
 80007fc:	bf00      	nop
 80007fe:	3750      	adds	r7, #80	; 0x50
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000812:	463b      	mov	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
 8000820:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000822:	2301      	movs	r3, #1
 8000824:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000826:	23c8      	movs	r3, #200	; 0xc8
 8000828:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800082a:	2305      	movs	r3, #5
 800082c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000832:	463b      	mov	r3, r7
 8000834:	4618      	mov	r0, r3
 8000836:	f004 fc9f 	bl	8005178 <HAL_RCCEx_PeriphCLKConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000840:	f000 f9a2 	bl	8000b88 <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_I2C1_Init+0x50>)
 8000852:	4a13      	ldr	r2, [pc, #76]	; (80008a0 <MX_I2C1_Init+0x54>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_I2C1_Init+0x50>)
 8000858:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <MX_I2C1_Init+0x58>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_I2C1_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_I2C1_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_I2C1_Init+0x50>)
 800086a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800086e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <MX_I2C1_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_I2C1_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_I2C1_Init+0x50>)
 800088a:	f002 fdd7 	bl	800343c <HAL_I2C_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000894:	f000 f978 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000b4 	.word	0x200000b4
 80008a0:	40005400 	.word	0x40005400
 80008a4:	00061a80 	.word	0x00061a80

080008a8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_I2S2_Init+0x50>)
 80008ae:	4a13      	ldr	r2, [pc, #76]	; (80008fc <MX_I2S2_Init+0x54>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_I2S2_Init+0x50>)
 80008b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_I2S2_Init+0x50>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <MX_I2S2_Init+0x50>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_I2S2_Init+0x50>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_I2S2_Init+0x50>)
 80008ce:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <MX_I2S2_Init+0x58>)
 80008d0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_I2S2_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_I2S2_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_I2S2_Init+0x50>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_I2S2_Init+0x50>)
 80008e6:	f003 fb23 	bl	8003f30 <HAL_I2S_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80008f0:	f000 f94a 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000108 	.word	0x20000108
 80008fc:	40003800 	.word	0x40003800
 8000900:	00017700 	.word	0x00017700

08000904 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_I2S3_Init+0x54>)
 800090a:	4a14      	ldr	r2, [pc, #80]	; (800095c <MX_I2S3_Init+0x58>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_I2S3_Init+0x54>)
 8000910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000914:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_I2S3_Init+0x54>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_I2S3_Init+0x54>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <MX_I2S3_Init+0x54>)
 8000924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000928:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_I2S3_Init+0x54>)
 800092c:	4a0c      	ldr	r2, [pc, #48]	; (8000960 <MX_I2S3_Init+0x5c>)
 800092e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_I2S3_Init+0x54>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_I2S3_Init+0x54>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_I2S3_Init+0x54>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_I2S3_Init+0x54>)
 8000944:	f003 faf4 	bl	8003f30 <HAL_I2S_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800094e:	f000 f91b 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000150 	.word	0x20000150
 800095c:	40003c00 	.word	0x40003c00
 8000960:	00017700 	.word	0x00017700

08000964 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000968:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_SPI1_Init+0x64>)
 800096a:	4a18      	ldr	r2, [pc, #96]	; (80009cc <MX_SPI1_Init+0x68>)
 800096c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_SPI1_Init+0x64>)
 8000970:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000974:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_SPI1_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_SPI1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_SPI1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_SPI1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_SPI1_Init+0x64>)
 8000990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000994:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_SPI1_Init+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_SPI1_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_SPI1_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <MX_SPI1_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_SPI1_Init+0x64>)
 80009b0:	220a      	movs	r2, #10
 80009b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_SPI1_Init+0x64>)
 80009b6:	f004 fd2f 	bl	8005418 <HAL_SPI_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009c0:	f000 f8e2 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000198 	.word	0x20000198
 80009cc:	40013000 	.word	0x40013000

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	; 0x30
 80009d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
 80009ea:	4b62      	ldr	r3, [pc, #392]	; (8000b74 <MX_GPIO_Init+0x1a4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a61      	ldr	r2, [pc, #388]	; (8000b74 <MX_GPIO_Init+0x1a4>)
 80009f0:	f043 0310 	orr.w	r3, r3, #16
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b5f      	ldr	r3, [pc, #380]	; (8000b74 <MX_GPIO_Init+0x1a4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0310 	and.w	r3, r3, #16
 80009fe:	61bb      	str	r3, [r7, #24]
 8000a00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	4b5b      	ldr	r3, [pc, #364]	; (8000b74 <MX_GPIO_Init+0x1a4>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a5a      	ldr	r2, [pc, #360]	; (8000b74 <MX_GPIO_Init+0x1a4>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b58      	ldr	r3, [pc, #352]	; (8000b74 <MX_GPIO_Init+0x1a4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b54      	ldr	r3, [pc, #336]	; (8000b74 <MX_GPIO_Init+0x1a4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a53      	ldr	r2, [pc, #332]	; (8000b74 <MX_GPIO_Init+0x1a4>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b51      	ldr	r3, [pc, #324]	; (8000b74 <MX_GPIO_Init+0x1a4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b4d      	ldr	r3, [pc, #308]	; (8000b74 <MX_GPIO_Init+0x1a4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a4c      	ldr	r2, [pc, #304]	; (8000b74 <MX_GPIO_Init+0x1a4>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b4a      	ldr	r3, [pc, #296]	; (8000b74 <MX_GPIO_Init+0x1a4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	4b46      	ldr	r3, [pc, #280]	; (8000b74 <MX_GPIO_Init+0x1a4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a45      	ldr	r2, [pc, #276]	; (8000b74 <MX_GPIO_Init+0x1a4>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b43      	ldr	r3, [pc, #268]	; (8000b74 <MX_GPIO_Init+0x1a4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b3f      	ldr	r3, [pc, #252]	; (8000b74 <MX_GPIO_Init+0x1a4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a3e      	ldr	r2, [pc, #248]	; (8000b74 <MX_GPIO_Init+0x1a4>)
 8000a7c:	f043 0308 	orr.w	r3, r3, #8
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b3c      	ldr	r3, [pc, #240]	; (8000b74 <MX_GPIO_Init+0x1a4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2108      	movs	r1, #8
 8000a92:	4839      	ldr	r0, [pc, #228]	; (8000b78 <MX_GPIO_Init+0x1a8>)
 8000a94:	f001 f8ae 	bl	8001bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4837      	ldr	r0, [pc, #220]	; (8000b7c <MX_GPIO_Init+0x1ac>)
 8000a9e:	f001 f8a9 	bl	8001bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|TRIG_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f247 0110 	movw	r1, #28688	; 0x7010
 8000aa8:	4835      	ldr	r0, [pc, #212]	; (8000b80 <MX_GPIO_Init+0x1b0>)
 8000aaa:	f001 f8a3 	bl	8001bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	482d      	ldr	r0, [pc, #180]	; (8000b78 <MX_GPIO_Init+0x1a8>)
 8000ac2:	f000 fefb 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	4826      	ldr	r0, [pc, #152]	; (8000b78 <MX_GPIO_Init+0x1a8>)
 8000ade:	f000 feed 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000ae2:	2332      	movs	r3, #50	; 0x32
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ae6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	4820      	ldr	r0, [pc, #128]	; (8000b78 <MX_GPIO_Init+0x1a8>)
 8000af8:	f000 fee0 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000afc:	2301      	movs	r3, #1
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	481a      	ldr	r0, [pc, #104]	; (8000b7c <MX_GPIO_Init+0x1ac>)
 8000b14:	f000 fed2 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b1c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4815      	ldr	r0, [pc, #84]	; (8000b84 <MX_GPIO_Init+0x1b4>)
 8000b2e:	f000 fec5 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin TRIG_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|TRIG_Pin|Audio_RST_Pin;
 8000b32:	f247 0310 	movw	r3, #28688	; 0x7010
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480d      	ldr	r0, [pc, #52]	; (8000b80 <MX_GPIO_Init+0x1b0>)
 8000b4c:	f000 feb6 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin|OTG_FS_OverCurrent_Pin;
 8000b50:	f248 0320 	movw	r3, #32800	; 0x8020
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4806      	ldr	r0, [pc, #24]	; (8000b80 <MX_GPIO_Init+0x1b0>)
 8000b66:	f000 fea9 	bl	80018bc <HAL_GPIO_Init>

}
 8000b6a:	bf00      	nop
 8000b6c:	3730      	adds	r7, #48	; 0x30
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40020800 	.word	0x40020800
 8000b80:	40020c00 	.word	0x40020c00
 8000b84:	40020000 	.word	0x40020000

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <Error_Handler+0x8>
	...

08000b94 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000b9a:	f000 fa21 	bl	8000fe0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000b9e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2178      	movs	r1, #120	; 0x78
 8000ba6:	485b      	ldr	r0, [pc, #364]	; (8000d14 <SSD1306_Init+0x180>)
 8000ba8:	f002 fe8a 	bl	80038c0 <HAL_I2C_IsDeviceReady>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e0a9      	b.n	8000d0a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000bb6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000bba:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bbc:	e002      	b.n	8000bc4 <SSD1306_Init+0x30>
		p--;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1f9      	bne.n	8000bbe <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000bca:	22ae      	movs	r2, #174	; 0xae
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2078      	movs	r0, #120	; 0x78
 8000bd0:	f000 fa82 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000bd4:	2220      	movs	r2, #32
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2078      	movs	r0, #120	; 0x78
 8000bda:	f000 fa7d 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000bde:	2210      	movs	r2, #16
 8000be0:	2100      	movs	r1, #0
 8000be2:	2078      	movs	r0, #120	; 0x78
 8000be4:	f000 fa78 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000be8:	22b0      	movs	r2, #176	; 0xb0
 8000bea:	2100      	movs	r1, #0
 8000bec:	2078      	movs	r0, #120	; 0x78
 8000bee:	f000 fa73 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000bf2:	22c8      	movs	r2, #200	; 0xc8
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2078      	movs	r0, #120	; 0x78
 8000bf8:	f000 fa6e 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2078      	movs	r0, #120	; 0x78
 8000c02:	f000 fa69 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000c06:	2210      	movs	r2, #16
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2078      	movs	r0, #120	; 0x78
 8000c0c:	f000 fa64 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000c10:	2240      	movs	r2, #64	; 0x40
 8000c12:	2100      	movs	r1, #0
 8000c14:	2078      	movs	r0, #120	; 0x78
 8000c16:	f000 fa5f 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000c1a:	2281      	movs	r2, #129	; 0x81
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2078      	movs	r0, #120	; 0x78
 8000c20:	f000 fa5a 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000c24:	22ff      	movs	r2, #255	; 0xff
 8000c26:	2100      	movs	r1, #0
 8000c28:	2078      	movs	r0, #120	; 0x78
 8000c2a:	f000 fa55 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000c2e:	22a1      	movs	r2, #161	; 0xa1
 8000c30:	2100      	movs	r1, #0
 8000c32:	2078      	movs	r0, #120	; 0x78
 8000c34:	f000 fa50 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000c38:	22a6      	movs	r2, #166	; 0xa6
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2078      	movs	r0, #120	; 0x78
 8000c3e:	f000 fa4b 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000c42:	22a8      	movs	r2, #168	; 0xa8
 8000c44:	2100      	movs	r1, #0
 8000c46:	2078      	movs	r0, #120	; 0x78
 8000c48:	f000 fa46 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000c4c:	223f      	movs	r2, #63	; 0x3f
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2078      	movs	r0, #120	; 0x78
 8000c52:	f000 fa41 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c56:	22a4      	movs	r2, #164	; 0xa4
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2078      	movs	r0, #120	; 0x78
 8000c5c:	f000 fa3c 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000c60:	22d3      	movs	r2, #211	; 0xd3
 8000c62:	2100      	movs	r1, #0
 8000c64:	2078      	movs	r0, #120	; 0x78
 8000c66:	f000 fa37 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2078      	movs	r0, #120	; 0x78
 8000c70:	f000 fa32 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c74:	22d5      	movs	r2, #213	; 0xd5
 8000c76:	2100      	movs	r1, #0
 8000c78:	2078      	movs	r0, #120	; 0x78
 8000c7a:	f000 fa2d 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000c7e:	22f0      	movs	r2, #240	; 0xf0
 8000c80:	2100      	movs	r1, #0
 8000c82:	2078      	movs	r0, #120	; 0x78
 8000c84:	f000 fa28 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000c88:	22d9      	movs	r2, #217	; 0xd9
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2078      	movs	r0, #120	; 0x78
 8000c8e:	f000 fa23 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000c92:	2222      	movs	r2, #34	; 0x22
 8000c94:	2100      	movs	r1, #0
 8000c96:	2078      	movs	r0, #120	; 0x78
 8000c98:	f000 fa1e 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000c9c:	22da      	movs	r2, #218	; 0xda
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2078      	movs	r0, #120	; 0x78
 8000ca2:	f000 fa19 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000ca6:	2212      	movs	r2, #18
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2078      	movs	r0, #120	; 0x78
 8000cac:	f000 fa14 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000cb0:	22db      	movs	r2, #219	; 0xdb
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2078      	movs	r0, #120	; 0x78
 8000cb6:	f000 fa0f 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000cba:	2220      	movs	r2, #32
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2078      	movs	r0, #120	; 0x78
 8000cc0:	f000 fa0a 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000cc4:	228d      	movs	r2, #141	; 0x8d
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2078      	movs	r0, #120	; 0x78
 8000cca:	f000 fa05 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000cce:	2214      	movs	r2, #20
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2078      	movs	r0, #120	; 0x78
 8000cd4:	f000 fa00 	bl	80010d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000cd8:	22af      	movs	r2, #175	; 0xaf
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2078      	movs	r0, #120	; 0x78
 8000cde:	f000 f9fb 	bl	80010d8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000ce2:	222e      	movs	r2, #46	; 0x2e
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2078      	movs	r0, #120	; 0x78
 8000ce8:	f000 f9f6 	bl	80010d8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000cec:	2000      	movs	r0, #0
 8000cee:	f000 f843 	bl	8000d78 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000cf2:	f000 f813 	bl	8000d1c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <SSD1306_Init+0x184>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <SSD1306_Init+0x184>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <SSD1306_Init+0x184>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000d08:	2301      	movs	r3, #1
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200000b4 	.word	0x200000b4
 8000d18:	200005f0 	.word	0x200005f0

08000d1c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000d22:	2300      	movs	r3, #0
 8000d24:	71fb      	strb	r3, [r7, #7]
 8000d26:	e01d      	b.n	8000d64 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	3b50      	subs	r3, #80	; 0x50
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	461a      	mov	r2, r3
 8000d30:	2100      	movs	r1, #0
 8000d32:	2078      	movs	r0, #120	; 0x78
 8000d34:	f000 f9d0 	bl	80010d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2078      	movs	r0, #120	; 0x78
 8000d3e:	f000 f9cb 	bl	80010d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000d42:	2210      	movs	r2, #16
 8000d44:	2100      	movs	r1, #0
 8000d46:	2078      	movs	r0, #120	; 0x78
 8000d48:	f000 f9c6 	bl	80010d8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	01db      	lsls	r3, r3, #7
 8000d50:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <SSD1306_UpdateScreen+0x58>)
 8000d52:	441a      	add	r2, r3
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	2140      	movs	r1, #64	; 0x40
 8000d58:	2078      	movs	r0, #120	; 0x78
 8000d5a:	f000 f957 	bl	800100c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	3301      	adds	r3, #1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	2b07      	cmp	r3, #7
 8000d68:	d9de      	bls.n	8000d28 <SSD1306_UpdateScreen+0xc>
	}
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200001f0 	.word	0x200001f0

08000d78 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d101      	bne.n	8000d8c <SSD1306_Fill+0x14>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e000      	b.n	8000d8e <SSD1306_Fill+0x16>
 8000d8c:	23ff      	movs	r3, #255	; 0xff
 8000d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d92:	4619      	mov	r1, r3
 8000d94:	4803      	ldr	r0, [pc, #12]	; (8000da4 <SSD1306_Fill+0x2c>)
 8000d96:	f007 fedd 	bl	8008b54 <memset>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200001f0 	.word	0x200001f0

08000da8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
 8000db2:	460b      	mov	r3, r1
 8000db4:	80bb      	strh	r3, [r7, #4]
 8000db6:	4613      	mov	r3, r2
 8000db8:	70fb      	strb	r3, [r7, #3]
	if (
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8000dbe:	d848      	bhi.n	8000e52 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000dc0:	88bb      	ldrh	r3, [r7, #4]
 8000dc2:	2b3f      	cmp	r3, #63	; 0x3f
 8000dc4:	d845      	bhi.n	8000e52 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000dc6:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <SSD1306_DrawPixel+0xb8>)
 8000dc8:	791b      	ldrb	r3, [r3, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d006      	beq.n	8000ddc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000dce:	78fb      	ldrb	r3, [r7, #3]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf0c      	ite	eq
 8000dd4:	2301      	moveq	r3, #1
 8000dd6:	2300      	movne	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d11a      	bne.n	8000e18 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000de2:	88fa      	ldrh	r2, [r7, #6]
 8000de4:	88bb      	ldrh	r3, [r7, #4]
 8000de6:	08db      	lsrs	r3, r3, #3
 8000de8:	b298      	uxth	r0, r3
 8000dea:	4603      	mov	r3, r0
 8000dec:	01db      	lsls	r3, r3, #7
 8000dee:	4413      	add	r3, r2
 8000df0:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <SSD1306_DrawPixel+0xbc>)
 8000df2:	5cd3      	ldrb	r3, [r2, r3]
 8000df4:	b25a      	sxtb	r2, r3
 8000df6:	88bb      	ldrh	r3, [r7, #4]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	4313      	orrs	r3, r2
 8000e06:	b259      	sxtb	r1, r3
 8000e08:	88fa      	ldrh	r2, [r7, #6]
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	01db      	lsls	r3, r3, #7
 8000e0e:	4413      	add	r3, r2
 8000e10:	b2c9      	uxtb	r1, r1
 8000e12:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <SSD1306_DrawPixel+0xbc>)
 8000e14:	54d1      	strb	r1, [r2, r3]
 8000e16:	e01d      	b.n	8000e54 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000e18:	88fa      	ldrh	r2, [r7, #6]
 8000e1a:	88bb      	ldrh	r3, [r7, #4]
 8000e1c:	08db      	lsrs	r3, r3, #3
 8000e1e:	b298      	uxth	r0, r3
 8000e20:	4603      	mov	r3, r0
 8000e22:	01db      	lsls	r3, r3, #7
 8000e24:	4413      	add	r3, r2
 8000e26:	4a0f      	ldr	r2, [pc, #60]	; (8000e64 <SSD1306_DrawPixel+0xbc>)
 8000e28:	5cd3      	ldrb	r3, [r2, r3]
 8000e2a:	b25a      	sxtb	r2, r3
 8000e2c:	88bb      	ldrh	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	2101      	movs	r1, #1
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	b25b      	sxtb	r3, r3
 8000e3e:	4013      	ands	r3, r2
 8000e40:	b259      	sxtb	r1, r3
 8000e42:	88fa      	ldrh	r2, [r7, #6]
 8000e44:	4603      	mov	r3, r0
 8000e46:	01db      	lsls	r3, r3, #7
 8000e48:	4413      	add	r3, r2
 8000e4a:	b2c9      	uxtb	r1, r1
 8000e4c:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <SSD1306_DrawPixel+0xbc>)
 8000e4e:	54d1      	strb	r1, [r2, r3]
 8000e50:	e000      	b.n	8000e54 <SSD1306_DrawPixel+0xac>
		return;
 8000e52:	bf00      	nop
	}
}
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	200005f0 	.word	0x200005f0
 8000e64:	200001f0 	.word	0x200001f0

08000e68 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	460a      	mov	r2, r1
 8000e72:	80fb      	strh	r3, [r7, #6]
 8000e74:	4613      	mov	r3, r2
 8000e76:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000e78:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <SSD1306_GotoXY+0x28>)
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <SSD1306_GotoXY+0x28>)
 8000e80:	88bb      	ldrh	r3, [r7, #4]
 8000e82:	8053      	strh	r3, [r2, #2]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	200005f0 	.word	0x200005f0

08000e94 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ea4:	4b3a      	ldr	r3, [pc, #232]	; (8000f90 <SSD1306_Putc+0xfc>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
	if (
 8000eb0:	2b7f      	cmp	r3, #127	; 0x7f
 8000eb2:	dc07      	bgt.n	8000ec4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000eb4:	4b36      	ldr	r3, [pc, #216]	; (8000f90 <SSD1306_Putc+0xfc>)
 8000eb6:	885b      	ldrh	r3, [r3, #2]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	785b      	ldrb	r3, [r3, #1]
 8000ebe:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ec0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ec2:	dd01      	ble.n	8000ec8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	e05e      	b.n	8000f86 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	e04b      	b.n	8000f66 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	3b20      	subs	r3, #32
 8000ed6:	6839      	ldr	r1, [r7, #0]
 8000ed8:	7849      	ldrb	r1, [r1, #1]
 8000eda:	fb01 f303 	mul.w	r3, r1, r3
 8000ede:	4619      	mov	r1, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	440b      	add	r3, r1
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	e030      	b.n	8000f54 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d010      	beq.n	8000f24 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000f02:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <SSD1306_Putc+0xfc>)
 8000f04:	881a      	ldrh	r2, [r3, #0]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b298      	uxth	r0, r3
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <SSD1306_Putc+0xfc>)
 8000f10:	885a      	ldrh	r2, [r3, #2]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	4413      	add	r3, r2
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	79ba      	ldrb	r2, [r7, #6]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f7ff ff43 	bl	8000da8 <SSD1306_DrawPixel>
 8000f22:	e014      	b.n	8000f4e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000f24:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <SSD1306_Putc+0xfc>)
 8000f26:	881a      	ldrh	r2, [r3, #0]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	b298      	uxth	r0, r3
 8000f30:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <SSD1306_Putc+0xfc>)
 8000f32:	885a      	ldrh	r2, [r3, #2]
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	4413      	add	r3, r2
 8000f3a:	b299      	uxth	r1, r3
 8000f3c:	79bb      	ldrb	r3, [r7, #6]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	bf0c      	ite	eq
 8000f42:	2301      	moveq	r3, #1
 8000f44:	2300      	movne	r3, #0
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	f7ff ff2d 	bl	8000da8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	3301      	adds	r3, #1
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d3c8      	bcc.n	8000ef2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	3301      	adds	r3, #1
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	785b      	ldrb	r3, [r3, #1]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d3ad      	bcc.n	8000ece <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <SSD1306_Putc+0xfc>)
 8000f74:	881a      	ldrh	r2, [r3, #0]
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <SSD1306_Putc+0xfc>)
 8000f82:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000f84:	79fb      	ldrb	r3, [r7, #7]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200005f0 	.word	0x200005f0

08000f94 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000fa2:	e012      	b.n	8000fca <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	79fa      	ldrb	r2, [r7, #7]
 8000faa:	68b9      	ldr	r1, [r7, #8]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff71 	bl	8000e94 <SSD1306_Putc>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d002      	beq.n	8000fc4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	e008      	b.n	8000fd6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1e8      	bne.n	8000fa4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <ssd1306_I2C_Init+0x28>)
 8000fe8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fea:	e002      	b.n	8000ff2 <ssd1306_I2C_Init+0x12>
		p--;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f9      	bne.n	8000fec <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	0003d090 	.word	0x0003d090

0800100c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b0c7      	sub	sp, #284	; 0x11c
 8001010:	af02      	add	r7, sp, #8
 8001012:	4604      	mov	r4, r0
 8001014:	4608      	mov	r0, r1
 8001016:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800101a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800101e:	600a      	str	r2, [r1, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001026:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800102a:	4622      	mov	r2, r4
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001032:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001036:	4602      	mov	r2, r0
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800103e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001042:	460a      	mov	r2, r1
 8001044:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001046:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800104a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800104e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001052:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001056:	7812      	ldrb	r2, [r2, #0]
 8001058:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800105a:	2300      	movs	r3, #0
 800105c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001060:	e015      	b.n	800108e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001062:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001066:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800106a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800106e:	6812      	ldr	r2, [r2, #0]
 8001070:	441a      	add	r2, r3
 8001072:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001076:	3301      	adds	r3, #1
 8001078:	7811      	ldrb	r1, [r2, #0]
 800107a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800107e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001082:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001084:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001088:	3301      	adds	r3, #1
 800108a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800108e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001092:	b29b      	uxth	r3, r3
 8001094:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001098:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800109c:	8812      	ldrh	r2, [r2, #0]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d8df      	bhi.n	8001062 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80010a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010a6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b299      	uxth	r1, r3
 80010ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	3301      	adds	r3, #1
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	f107 020c 	add.w	r2, r7, #12
 80010c0:	200a      	movs	r0, #10
 80010c2:	9000      	str	r0, [sp, #0]
 80010c4:	4803      	ldr	r0, [pc, #12]	; (80010d4 <ssd1306_I2C_WriteMulti+0xc8>)
 80010c6:	f002 fafd 	bl	80036c4 <HAL_I2C_Master_Transmit>
}
 80010ca:	bf00      	nop
 80010cc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd90      	pop	{r4, r7, pc}
 80010d4:	200000b4 	.word	0x200000b4

080010d8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af02      	add	r7, sp, #8
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
 80010e2:	460b      	mov	r3, r1
 80010e4:	71bb      	strb	r3, [r7, #6]
 80010e6:	4613      	mov	r3, r2
 80010e8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80010ee:	797b      	ldrb	r3, [r7, #5]
 80010f0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	b299      	uxth	r1, r3
 80010f6:	f107 020c 	add.w	r2, r7, #12
 80010fa:	230a      	movs	r3, #10
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2302      	movs	r3, #2
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <ssd1306_I2C_Write+0x38>)
 8001102:	f002 fadf 	bl	80036c4 <HAL_I2C_Master_Transmit>
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200000b4 	.word	0x200000b4

08001114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_MspInit+0x4c>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a0f      	ldr	r2, [pc, #60]	; (8001160 <HAL_MspInit+0x4c>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_MspInit+0x4c>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_MspInit+0x4c>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <HAL_MspInit+0x4c>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_MspInit+0x4c>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001152:	2007      	movs	r0, #7
 8001154:	f000 fb70 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800

08001164 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <HAL_I2C_MspInit+0x84>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d12b      	bne.n	80011de <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <HAL_I2C_MspInit+0x88>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a17      	ldr	r2, [pc, #92]	; (80011ec <HAL_I2C_MspInit+0x88>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_I2C_MspInit+0x88>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80011a2:	23c0      	movs	r3, #192	; 0xc0
 80011a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a6:	2312      	movs	r3, #18
 80011a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011b2:	2304      	movs	r3, #4
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <HAL_I2C_MspInit+0x8c>)
 80011be:	f000 fb7d 	bl	80018bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_I2C_MspInit+0x88>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_I2C_MspInit+0x88>)
 80011cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_I2C_MspInit+0x88>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011de:	bf00      	nop
 80011e0:	3728      	adds	r7, #40	; 0x28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40005400 	.word	0x40005400
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020400 	.word	0x40020400

080011f4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	; 0x38
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a59      	ldr	r2, [pc, #356]	; (8001378 <HAL_I2S_MspInit+0x184>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d15b      	bne.n	80012ce <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
 800121a:	4b58      	ldr	r3, [pc, #352]	; (800137c <HAL_I2S_MspInit+0x188>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a57      	ldr	r2, [pc, #348]	; (800137c <HAL_I2S_MspInit+0x188>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b55      	ldr	r3, [pc, #340]	; (800137c <HAL_I2S_MspInit+0x188>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122e:	623b      	str	r3, [r7, #32]
 8001230:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
 8001236:	4b51      	ldr	r3, [pc, #324]	; (800137c <HAL_I2S_MspInit+0x188>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a50      	ldr	r2, [pc, #320]	; (800137c <HAL_I2S_MspInit+0x188>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b4e      	ldr	r3, [pc, #312]	; (800137c <HAL_I2S_MspInit+0x188>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
 8001252:	4b4a      	ldr	r3, [pc, #296]	; (800137c <HAL_I2S_MspInit+0x188>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a49      	ldr	r2, [pc, #292]	; (800137c <HAL_I2S_MspInit+0x188>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b47      	ldr	r3, [pc, #284]	; (800137c <HAL_I2S_MspInit+0x188>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800126a:	2304      	movs	r3, #4
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800127a:	2306      	movs	r3, #6
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	4619      	mov	r1, r3
 8001284:	483e      	ldr	r0, [pc, #248]	; (8001380 <HAL_I2S_MspInit+0x18c>)
 8001286:	f000 fb19 	bl	80018bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800128a:	2308      	movs	r3, #8
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800129a:	2305      	movs	r3, #5
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a2:	4619      	mov	r1, r3
 80012a4:	4836      	ldr	r0, [pc, #216]	; (8001380 <HAL_I2S_MspInit+0x18c>)
 80012a6:	f000 fb09 	bl	80018bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80012aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012bc:	2305      	movs	r3, #5
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c4:	4619      	mov	r1, r3
 80012c6:	482f      	ldr	r0, [pc, #188]	; (8001384 <HAL_I2S_MspInit+0x190>)
 80012c8:	f000 faf8 	bl	80018bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012cc:	e04f      	b.n	800136e <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a2d      	ldr	r2, [pc, #180]	; (8001388 <HAL_I2S_MspInit+0x194>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d14a      	bne.n	800136e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	4b27      	ldr	r3, [pc, #156]	; (800137c <HAL_I2S_MspInit+0x188>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	4a26      	ldr	r2, [pc, #152]	; (800137c <HAL_I2S_MspInit+0x188>)
 80012e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012e6:	6413      	str	r3, [r2, #64]	; 0x40
 80012e8:	4b24      	ldr	r3, [pc, #144]	; (800137c <HAL_I2S_MspInit+0x188>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	4b20      	ldr	r3, [pc, #128]	; (800137c <HAL_I2S_MspInit+0x188>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	4a1f      	ldr	r2, [pc, #124]	; (800137c <HAL_I2S_MspInit+0x188>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6313      	str	r3, [r2, #48]	; 0x30
 8001304:	4b1d      	ldr	r3, [pc, #116]	; (800137c <HAL_I2S_MspInit+0x188>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_I2S_MspInit+0x188>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	4a18      	ldr	r2, [pc, #96]	; (800137c <HAL_I2S_MspInit+0x188>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	6313      	str	r3, [r2, #48]	; 0x30
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <HAL_I2S_MspInit+0x188>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800132c:	2310      	movs	r3, #16
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800133c:	2306      	movs	r3, #6
 800133e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	4811      	ldr	r0, [pc, #68]	; (800138c <HAL_I2S_MspInit+0x198>)
 8001348:	f000 fab8 	bl	80018bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800134c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800135e:	2306      	movs	r3, #6
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <HAL_I2S_MspInit+0x18c>)
 800136a:	f000 faa7 	bl	80018bc <HAL_GPIO_Init>
}
 800136e:	bf00      	nop
 8001370:	3738      	adds	r7, #56	; 0x38
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40003800 	.word	0x40003800
 800137c:	40023800 	.word	0x40023800
 8001380:	40020800 	.word	0x40020800
 8001384:	40020400 	.word	0x40020400
 8001388:	40003c00 	.word	0x40003c00
 800138c:	40020000 	.word	0x40020000

08001390 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a19      	ldr	r2, [pc, #100]	; (8001414 <HAL_SPI_MspInit+0x84>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d12b      	bne.n	800140a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_SPI_MspInit+0x88>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a17      	ldr	r2, [pc, #92]	; (8001418 <HAL_SPI_MspInit+0x88>)
 80013bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_SPI_MspInit+0x88>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HAL_SPI_MspInit+0x88>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a10      	ldr	r2, [pc, #64]	; (8001418 <HAL_SPI_MspInit+0x88>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <HAL_SPI_MspInit+0x88>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80013ea:	23e0      	movs	r3, #224	; 0xe0
 80013ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013fa:	2305      	movs	r3, #5
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <HAL_SPI_MspInit+0x8c>)
 8001406:	f000 fa59 	bl	80018bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800140a:	bf00      	nop
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40013000 	.word	0x40013000
 8001418:	40023800 	.word	0x40023800
 800141c:	40020000 	.word	0x40020000

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <NMI_Handler+0x4>

08001426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <MemManage_Handler+0x4>

08001432 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <UsageFault_Handler+0x4>

0800143e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146c:	f000 f8d0 	bl	8001610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <OTG_FS_IRQHandler+0x10>)
 800147a:	f000 fe3f 	bl	80020fc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200009dc 	.word	0x200009dc

08001488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <_sbrk+0x5c>)
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <_sbrk+0x60>)
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <_sbrk+0x64>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <_sbrk+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d207      	bcs.n	80014c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b8:	f007 fb12 	bl	8008ae0 <__errno>
 80014bc:	4603      	mov	r3, r0
 80014be:	220c      	movs	r2, #12
 80014c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014c6:	e009      	b.n	80014dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <_sbrk+0x64>)
 80014d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20020000 	.word	0x20020000
 80014e8:	00000400 	.word	0x00000400
 80014ec:	200005f8 	.word	0x200005f8
 80014f0:	20000cf0 	.word	0x20000cf0

080014f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <SystemInit+0x20>)
 80014fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <SystemInit+0x20>)
 8001500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001550 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800151c:	480d      	ldr	r0, [pc, #52]	; (8001554 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800151e:	490e      	ldr	r1, [pc, #56]	; (8001558 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001520:	4a0e      	ldr	r2, [pc, #56]	; (800155c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001524:	e002      	b.n	800152c <LoopCopyDataInit>

08001526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152a:	3304      	adds	r3, #4

0800152c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800152c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001530:	d3f9      	bcc.n	8001526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001532:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001534:	4c0b      	ldr	r4, [pc, #44]	; (8001564 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001538:	e001      	b.n	800153e <LoopFillZerobss>

0800153a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800153c:	3204      	adds	r2, #4

0800153e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001540:	d3fb      	bcc.n	800153a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001542:	f7ff ffd7 	bl	80014f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001546:	f007 fad1 	bl	8008aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154a:	f7ff f88d 	bl	8000668 <main>
  bx  lr    
 800154e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001550:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800155c:	0800a260 	.word	0x0800a260
  ldr r2, =_sbss
 8001560:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001564:	20000cf0 	.word	0x20000cf0

08001568 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC_IRQHandler>
	...

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <HAL_Init+0x40>)
 8001576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800157a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_Init+0x40>)
 8001582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001586:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a07      	ldr	r2, [pc, #28]	; (80015ac <HAL_Init+0x40>)
 800158e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001592:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001594:	2003      	movs	r0, #3
 8001596:	f000 f94f 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159a:	2000      	movs	r0, #0
 800159c:	f000 f808 	bl	80015b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a0:	f7ff fdb8 	bl	8001114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023c00 	.word	0x40023c00

080015b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_InitTick+0x54>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_InitTick+0x58>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f967 	bl	80018a2 <HAL_SYSTICK_Config>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e00e      	b.n	80015fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b0f      	cmp	r3, #15
 80015e2:	d80a      	bhi.n	80015fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e4:	2200      	movs	r2, #0
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015ec:	f000 f92f 	bl	800184e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f0:	4a06      	ldr	r2, [pc, #24]	; (800160c <HAL_InitTick+0x5c>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000008 	.word	0x20000008
 8001608:	20000010 	.word	0x20000010
 800160c:	2000000c 	.word	0x2000000c

08001610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_IncTick+0x20>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_IncTick+0x24>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
 8001620:	4a04      	ldr	r2, [pc, #16]	; (8001634 <HAL_IncTick+0x24>)
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000010 	.word	0x20000010
 8001634:	200005fc 	.word	0x200005fc

08001638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_GetTick+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	200005fc 	.word	0x200005fc

08001650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001658:	f7ff ffee 	bl	8001638 <HAL_GetTick>
 800165c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001668:	d005      	beq.n	8001676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_Delay+0x44>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4413      	add	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001676:	bf00      	nop
 8001678:	f7ff ffde 	bl	8001638 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	429a      	cmp	r2, r3
 8001686:	d8f7      	bhi.n	8001678 <HAL_Delay+0x28>
  {
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000010 	.word	0x20000010

08001698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b4:	4013      	ands	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ca:	4a04      	ldr	r2, [pc, #16]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	60d3      	str	r3, [r2, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <__NVIC_GetPriorityGrouping+0x18>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	f003 0307 	and.w	r3, r3, #7
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	2b00      	cmp	r3, #0
 800170c:	db0b      	blt.n	8001726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	f003 021f 	and.w	r2, r3, #31
 8001714:	4907      	ldr	r1, [pc, #28]	; (8001734 <__NVIC_EnableIRQ+0x38>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	2001      	movs	r0, #1
 800171e:	fa00 f202 	lsl.w	r2, r0, r2
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100

08001738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	db0a      	blt.n	8001762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	490c      	ldr	r1, [pc, #48]	; (8001784 <__NVIC_SetPriority+0x4c>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	0112      	lsls	r2, r2, #4
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	440b      	add	r3, r1
 800175c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001760:	e00a      	b.n	8001778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4908      	ldr	r1, [pc, #32]	; (8001788 <__NVIC_SetPriority+0x50>)
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	3b04      	subs	r3, #4
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	440b      	add	r3, r1
 8001776:	761a      	strb	r2, [r3, #24]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f1c3 0307 	rsb	r3, r3, #7
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	bf28      	it	cs
 80017aa:	2304      	movcs	r3, #4
 80017ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d902      	bls.n	80017bc <NVIC_EncodePriority+0x30>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3b03      	subs	r3, #3
 80017ba:	e000      	b.n	80017be <NVIC_EncodePriority+0x32>
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	43d9      	mvns	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	4313      	orrs	r3, r2
         );
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3724      	adds	r7, #36	; 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001804:	d301      	bcc.n	800180a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001806:	2301      	movs	r3, #1
 8001808:	e00f      	b.n	800182a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <SysTick_Config+0x40>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001812:	210f      	movs	r1, #15
 8001814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001818:	f7ff ff8e 	bl	8001738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <SysTick_Config+0x40>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <SysTick_Config+0x40>)
 8001824:	2207      	movs	r2, #7
 8001826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	e000e010 	.word	0xe000e010

08001838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff29 	bl	8001698 <__NVIC_SetPriorityGrouping>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001860:	f7ff ff3e 	bl	80016e0 <__NVIC_GetPriorityGrouping>
 8001864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	6978      	ldr	r0, [r7, #20]
 800186c:	f7ff ff8e 	bl	800178c <NVIC_EncodePriority>
 8001870:	4602      	mov	r2, r0
 8001872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff5d 	bl	8001738 <__NVIC_SetPriority>
}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff31 	bl	80016fc <__NVIC_EnableIRQ>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ffa2 	bl	80017f4 <SysTick_Config>
 80018b0:	4603      	mov	r3, r0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	e159      	b.n	8001b8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018d8:	2201      	movs	r2, #1
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	f040 8148 	bne.w	8001b86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d005      	beq.n	800190e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800190a:	2b02      	cmp	r3, #2
 800190c:	d130      	bne.n	8001970 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	2203      	movs	r2, #3
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001944:	2201      	movs	r2, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f003 0201 	and.w	r2, r3, #1
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b03      	cmp	r3, #3
 800197a:	d017      	beq.n	80019ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	2203      	movs	r2, #3
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d123      	bne.n	8001a00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	08da      	lsrs	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3208      	adds	r2, #8
 80019c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	220f      	movs	r2, #15
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	691a      	ldr	r2, [r3, #16]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	08da      	lsrs	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3208      	adds	r2, #8
 80019fa:	69b9      	ldr	r1, [r7, #24]
 80019fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0203 	and.w	r2, r3, #3
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80a2 	beq.w	8001b86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b57      	ldr	r3, [pc, #348]	; (8001ba4 <HAL_GPIO_Init+0x2e8>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	4a56      	ldr	r2, [pc, #344]	; (8001ba4 <HAL_GPIO_Init+0x2e8>)
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a50:	6453      	str	r3, [r2, #68]	; 0x44
 8001a52:	4b54      	ldr	r3, [pc, #336]	; (8001ba4 <HAL_GPIO_Init+0x2e8>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a5e:	4a52      	ldr	r2, [pc, #328]	; (8001ba8 <HAL_GPIO_Init+0x2ec>)
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3302      	adds	r3, #2
 8001a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	220f      	movs	r2, #15
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a49      	ldr	r2, [pc, #292]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d019      	beq.n	8001abe <HAL_GPIO_Init+0x202>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a48      	ldr	r2, [pc, #288]	; (8001bb0 <HAL_GPIO_Init+0x2f4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_GPIO_Init+0x1fe>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a47      	ldr	r2, [pc, #284]	; (8001bb4 <HAL_GPIO_Init+0x2f8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d00d      	beq.n	8001ab6 <HAL_GPIO_Init+0x1fa>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a46      	ldr	r2, [pc, #280]	; (8001bb8 <HAL_GPIO_Init+0x2fc>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d007      	beq.n	8001ab2 <HAL_GPIO_Init+0x1f6>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a45      	ldr	r2, [pc, #276]	; (8001bbc <HAL_GPIO_Init+0x300>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d101      	bne.n	8001aae <HAL_GPIO_Init+0x1f2>
 8001aaa:	2304      	movs	r3, #4
 8001aac:	e008      	b.n	8001ac0 <HAL_GPIO_Init+0x204>
 8001aae:	2307      	movs	r3, #7
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x204>
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e004      	b.n	8001ac0 <HAL_GPIO_Init+0x204>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e002      	b.n	8001ac0 <HAL_GPIO_Init+0x204>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <HAL_GPIO_Init+0x204>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	f002 0203 	and.w	r2, r2, #3
 8001ac6:	0092      	lsls	r2, r2, #2
 8001ac8:	4093      	lsls	r3, r2
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ad0:	4935      	ldr	r1, [pc, #212]	; (8001ba8 <HAL_GPIO_Init+0x2ec>)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ade:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <HAL_GPIO_Init+0x304>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b02:	4a2f      	ldr	r2, [pc, #188]	; (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b08:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b2c:	4a24      	ldr	r2, [pc, #144]	; (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b32:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b56:	4a1a      	ldr	r2, [pc, #104]	; (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b5c:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b80:	4a0f      	ldr	r2, [pc, #60]	; (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	2b0f      	cmp	r3, #15
 8001b90:	f67f aea2 	bls.w	80018d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3724      	adds	r7, #36	; 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40013800 	.word	0x40013800
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	40020400 	.word	0x40020400
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	40020c00 	.word	0x40020c00
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40013c00 	.word	0x40013c00

08001bc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	887b      	ldrh	r3, [r7, #2]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	e001      	b.n	8001be6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]
 8001c00:	4613      	mov	r3, r2
 8001c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c04:	787b      	ldrb	r3, [r7, #1]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c10:	e003      	b.n	8001c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c12:	887b      	ldrh	r3, [r7, #2]
 8001c14:	041a      	lsls	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	619a      	str	r2, [r3, #24]
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001c26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c28:	b08f      	sub	sp, #60	; 0x3c
 8001c2a:	af0a      	add	r7, sp, #40	; 0x28
 8001c2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e054      	b.n	8001ce2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d106      	bne.n	8001c58 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f006 fc9a 	bl	800858c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d102      	bne.n	8001c72 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 fcc9 	bl	800560e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	687e      	ldr	r6, [r7, #4]
 8001c84:	466d      	mov	r5, sp
 8001c86:	f106 0410 	add.w	r4, r6, #16
 8001c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c96:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c9a:	1d33      	adds	r3, r6, #4
 8001c9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c9e:	6838      	ldr	r0, [r7, #0]
 8001ca0:	f003 fc43 	bl	800552a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	4618      	mov	r0, r3
 8001cac:	f003 fcc0 	bl	8005630 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	603b      	str	r3, [r7, #0]
 8001cb6:	687e      	ldr	r6, [r7, #4]
 8001cb8:	466d      	mov	r5, sp
 8001cba:	f106 0410 	add.w	r4, r6, #16
 8001cbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cca:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cce:	1d33      	adds	r3, r6, #4
 8001cd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cd2:	6838      	ldr	r0, [r7, #0]
 8001cd4:	f003 fe48 	bl	8005968 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cea <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001cea:	b590      	push	{r4, r7, lr}
 8001cec:	b089      	sub	sp, #36	; 0x24
 8001cee:	af04      	add	r7, sp, #16
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	4608      	mov	r0, r1
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	70fb      	strb	r3, [r7, #3]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70bb      	strb	r3, [r7, #2]
 8001d00:	4613      	mov	r3, r2
 8001d02:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_HCD_HC_Init+0x28>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e076      	b.n	8001e00 <HAL_HCD_HC_Init+0x116>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	212c      	movs	r1, #44	; 0x2c
 8001d20:	fb01 f303 	mul.w	r3, r1, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	333d      	adds	r3, #61	; 0x3d
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	212c      	movs	r1, #44	; 0x2c
 8001d32:	fb01 f303 	mul.w	r3, r1, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	3338      	adds	r3, #56	; 0x38
 8001d3a:	787a      	ldrb	r2, [r7, #1]
 8001d3c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001d3e:	78fb      	ldrb	r3, [r7, #3]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	212c      	movs	r1, #44	; 0x2c
 8001d44:	fb01 f303 	mul.w	r3, r1, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	3340      	adds	r3, #64	; 0x40
 8001d4c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d4e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	212c      	movs	r1, #44	; 0x2c
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3339      	adds	r3, #57	; 0x39
 8001d5e:	78fa      	ldrb	r2, [r7, #3]
 8001d60:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	212c      	movs	r1, #44	; 0x2c
 8001d68:	fb01 f303 	mul.w	r3, r1, r3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	333f      	adds	r3, #63	; 0x3f
 8001d70:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001d74:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	78ba      	ldrb	r2, [r7, #2]
 8001d7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d7e:	b2d0      	uxtb	r0, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	212c      	movs	r1, #44	; 0x2c
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	333a      	adds	r3, #58	; 0x3a
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001d90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	da09      	bge.n	8001dac <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	212c      	movs	r1, #44	; 0x2c
 8001d9e:	fb01 f303 	mul.w	r3, r1, r3
 8001da2:	4413      	add	r3, r2
 8001da4:	333b      	adds	r3, #59	; 0x3b
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	e008      	b.n	8001dbe <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	212c      	movs	r1, #44	; 0x2c
 8001db2:	fb01 f303 	mul.w	r3, r1, r3
 8001db6:	4413      	add	r3, r2
 8001db8:	333b      	adds	r3, #59	; 0x3b
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	212c      	movs	r1, #44	; 0x2c
 8001dc4:	fb01 f303 	mul.w	r3, r1, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	333c      	adds	r3, #60	; 0x3c
 8001dcc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001dd0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	787c      	ldrb	r4, [r7, #1]
 8001dd8:	78ba      	ldrb	r2, [r7, #2]
 8001dda:	78f9      	ldrb	r1, [r7, #3]
 8001ddc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001dde:	9302      	str	r3, [sp, #8]
 8001de0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	4623      	mov	r3, r4
 8001dee:	f003 ff41 	bl	8005c74 <USB_HC_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd90      	pop	{r4, r7, pc}

08001e08 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_HCD_HC_Halt+0x1e>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e00f      	b.n	8001e46 <HAL_HCD_HC_Halt+0x3e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	78fa      	ldrb	r2, [r7, #3]
 8001e34:	4611      	mov	r1, r2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f004 f991 	bl	800615e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	4608      	mov	r0, r1
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4603      	mov	r3, r0
 8001e60:	70fb      	strb	r3, [r7, #3]
 8001e62:	460b      	mov	r3, r1
 8001e64:	70bb      	strb	r3, [r7, #2]
 8001e66:	4613      	mov	r3, r2
 8001e68:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	212c      	movs	r1, #44	; 0x2c
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	333b      	adds	r3, #59	; 0x3b
 8001e78:	78ba      	ldrb	r2, [r7, #2]
 8001e7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	212c      	movs	r1, #44	; 0x2c
 8001e82:	fb01 f303 	mul.w	r3, r1, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	333f      	adds	r3, #63	; 0x3f
 8001e8a:	787a      	ldrb	r2, [r7, #1]
 8001e8c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001e8e:	7c3b      	ldrb	r3, [r7, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d112      	bne.n	8001eba <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	212c      	movs	r1, #44	; 0x2c
 8001e9a:	fb01 f303 	mul.w	r3, r1, r3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3342      	adds	r3, #66	; 0x42
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	212c      	movs	r1, #44	; 0x2c
 8001eac:	fb01 f303 	mul.w	r3, r1, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	333d      	adds	r3, #61	; 0x3d
 8001eb4:	7f3a      	ldrb	r2, [r7, #28]
 8001eb6:	701a      	strb	r2, [r3, #0]
 8001eb8:	e008      	b.n	8001ecc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001eba:	78fb      	ldrb	r3, [r7, #3]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	212c      	movs	r1, #44	; 0x2c
 8001ec0:	fb01 f303 	mul.w	r3, r1, r3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3342      	adds	r3, #66	; 0x42
 8001ec8:	2202      	movs	r2, #2
 8001eca:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001ecc:	787b      	ldrb	r3, [r7, #1]
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	f200 80c6 	bhi.w	8002060 <HAL_HCD_HC_SubmitRequest+0x210>
 8001ed4:	a201      	add	r2, pc, #4	; (adr r2, 8001edc <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eda:	bf00      	nop
 8001edc:	08001eed 	.word	0x08001eed
 8001ee0:	0800204d 	.word	0x0800204d
 8001ee4:	08001f51 	.word	0x08001f51
 8001ee8:	08001fcf 	.word	0x08001fcf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001eec:	7c3b      	ldrb	r3, [r7, #16]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	f040 80b8 	bne.w	8002064 <HAL_HCD_HC_SubmitRequest+0x214>
 8001ef4:	78bb      	ldrb	r3, [r7, #2]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f040 80b4 	bne.w	8002064 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001efc:	8b3b      	ldrh	r3, [r7, #24]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d108      	bne.n	8001f14 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001f02:	78fb      	ldrb	r3, [r7, #3]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	212c      	movs	r1, #44	; 0x2c
 8001f08:	fb01 f303 	mul.w	r3, r1, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3355      	adds	r3, #85	; 0x55
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	212c      	movs	r1, #44	; 0x2c
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	3355      	adds	r3, #85	; 0x55
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d109      	bne.n	8001f3c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	212c      	movs	r1, #44	; 0x2c
 8001f2e:	fb01 f303 	mul.w	r3, r1, r3
 8001f32:	4413      	add	r3, r2
 8001f34:	3342      	adds	r3, #66	; 0x42
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f3a:	e093      	b.n	8002064 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	212c      	movs	r1, #44	; 0x2c
 8001f42:	fb01 f303 	mul.w	r3, r1, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	3342      	adds	r3, #66	; 0x42
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	701a      	strb	r2, [r3, #0]
      break;
 8001f4e:	e089      	b.n	8002064 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001f50:	78bb      	ldrb	r3, [r7, #2]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d11d      	bne.n	8001f92 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	212c      	movs	r1, #44	; 0x2c
 8001f5c:	fb01 f303 	mul.w	r3, r1, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	3355      	adds	r3, #85	; 0x55
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d109      	bne.n	8001f7e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	212c      	movs	r1, #44	; 0x2c
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	3342      	adds	r3, #66	; 0x42
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001f7c:	e073      	b.n	8002066 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	212c      	movs	r1, #44	; 0x2c
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	3342      	adds	r3, #66	; 0x42
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	701a      	strb	r2, [r3, #0]
      break;
 8001f90:	e069      	b.n	8002066 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3354      	adds	r3, #84	; 0x54
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	212c      	movs	r1, #44	; 0x2c
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3342      	adds	r3, #66	; 0x42
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
      break;
 8001fb8:	e055      	b.n	8002066 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	212c      	movs	r1, #44	; 0x2c
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3342      	adds	r3, #66	; 0x42
 8001fc8:	2202      	movs	r2, #2
 8001fca:	701a      	strb	r2, [r3, #0]
      break;
 8001fcc:	e04b      	b.n	8002066 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001fce:	78bb      	ldrb	r3, [r7, #2]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d11d      	bne.n	8002010 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	212c      	movs	r1, #44	; 0x2c
 8001fda:	fb01 f303 	mul.w	r3, r1, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	3355      	adds	r3, #85	; 0x55
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d109      	bne.n	8001ffc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	212c      	movs	r1, #44	; 0x2c
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3342      	adds	r3, #66	; 0x42
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ffa:	e034      	b.n	8002066 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	212c      	movs	r1, #44	; 0x2c
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	4413      	add	r3, r2
 8002008:	3342      	adds	r3, #66	; 0x42
 800200a:	2202      	movs	r2, #2
 800200c:	701a      	strb	r2, [r3, #0]
      break;
 800200e:	e02a      	b.n	8002066 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	212c      	movs	r1, #44	; 0x2c
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	3354      	adds	r3, #84	; 0x54
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d109      	bne.n	8002038 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	212c      	movs	r1, #44	; 0x2c
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	4413      	add	r3, r2
 8002030:	3342      	adds	r3, #66	; 0x42
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
      break;
 8002036:	e016      	b.n	8002066 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	212c      	movs	r1, #44	; 0x2c
 800203e:	fb01 f303 	mul.w	r3, r1, r3
 8002042:	4413      	add	r3, r2
 8002044:	3342      	adds	r3, #66	; 0x42
 8002046:	2202      	movs	r2, #2
 8002048:	701a      	strb	r2, [r3, #0]
      break;
 800204a:	e00c      	b.n	8002066 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	212c      	movs	r1, #44	; 0x2c
 8002052:	fb01 f303 	mul.w	r3, r1, r3
 8002056:	4413      	add	r3, r2
 8002058:	3342      	adds	r3, #66	; 0x42
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
      break;
 800205e:	e002      	b.n	8002066 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002060:	bf00      	nop
 8002062:	e000      	b.n	8002066 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002064:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	212c      	movs	r1, #44	; 0x2c
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	3344      	adds	r3, #68	; 0x44
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	8b3a      	ldrh	r2, [r7, #24]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	202c      	movs	r0, #44	; 0x2c
 8002080:	fb00 f303 	mul.w	r3, r0, r3
 8002084:	440b      	add	r3, r1
 8002086:	334c      	adds	r3, #76	; 0x4c
 8002088:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	212c      	movs	r1, #44	; 0x2c
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	3360      	adds	r3, #96	; 0x60
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	212c      	movs	r1, #44	; 0x2c
 80020a2:	fb01 f303 	mul.w	r3, r1, r3
 80020a6:	4413      	add	r3, r2
 80020a8:	3350      	adds	r3, #80	; 0x50
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	212c      	movs	r1, #44	; 0x2c
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	3339      	adds	r3, #57	; 0x39
 80020bc:	78fa      	ldrb	r2, [r7, #3]
 80020be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	212c      	movs	r1, #44	; 0x2c
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	3361      	adds	r3, #97	; 0x61
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	222c      	movs	r2, #44	; 0x2c
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	3338      	adds	r3, #56	; 0x38
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	18d1      	adds	r1, r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	f003 fee4 	bl	8005eb8 <USB_HC_StartXfer>
 80020f0:	4603      	mov	r3, r0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop

080020fc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f003 fbe5 	bl	80058e2 <USB_GetMode>
 8002118:	4603      	mov	r3, r0
 800211a:	2b01      	cmp	r3, #1
 800211c:	f040 80f6 	bne.w	800230c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f003 fbc9 	bl	80058bc <USB_ReadInterrupts>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80ec 	beq.w	800230a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f003 fbc0 	bl	80058bc <USB_ReadInterrupts>
 800213c:	4603      	mov	r3, r0
 800213e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002142:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002146:	d104      	bne.n	8002152 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002150:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f003 fbb0 	bl	80058bc <USB_ReadInterrupts>
 800215c:	4603      	mov	r3, r0
 800215e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002166:	d104      	bne.n	8002172 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002170:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f003 fba0 	bl	80058bc <USB_ReadInterrupts>
 800217c:	4603      	mov	r3, r0
 800217e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002182:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002186:	d104      	bne.n	8002192 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002190:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f003 fb90 	bl	80058bc <USB_ReadInterrupts>
 800219c:	4603      	mov	r3, r0
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d103      	bne.n	80021ae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2202      	movs	r2, #2
 80021ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 fb82 	bl	80058bc <USB_ReadInterrupts>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021c2:	d11c      	bne.n	80021fe <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80021cc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10f      	bne.n	80021fe <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80021de:	2110      	movs	r1, #16
 80021e0:	6938      	ldr	r0, [r7, #16]
 80021e2:	f003 fa71 	bl	80056c8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80021e6:	6938      	ldr	r0, [r7, #16]
 80021e8:	f003 faa2 	bl	8005730 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2101      	movs	r1, #1
 80021f2:	4618      	mov	r0, r3
 80021f4:	f003 fc78 	bl	8005ae8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f006 fa45 	bl	8008688 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f003 fb5a 	bl	80058bc <USB_ReadInterrupts>
 8002208:	4603      	mov	r3, r0
 800220a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800220e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002212:	d102      	bne.n	800221a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f001 f89e 	bl	8003356 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f003 fb4c 	bl	80058bc <USB_ReadInterrupts>
 8002224:	4603      	mov	r3, r0
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b08      	cmp	r3, #8
 800222c:	d106      	bne.n	800223c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f006 fa0e 	bl	8008650 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2208      	movs	r2, #8
 800223a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f003 fb3b 	bl	80058bc <USB_ReadInterrupts>
 8002246:	4603      	mov	r3, r0
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	2b10      	cmp	r3, #16
 800224e:	d101      	bne.n	8002254 <HAL_HCD_IRQHandler+0x158>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <HAL_HCD_IRQHandler+0x15a>
 8002254:	2300      	movs	r3, #0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d012      	beq.n	8002280 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699a      	ldr	r2, [r3, #24]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0210 	bic.w	r2, r2, #16
 8002268:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 ffa1 	bl	80031b2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0210 	orr.w	r2, r2, #16
 800227e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f003 fb19 	bl	80058bc <USB_ReadInterrupts>
 800228a:	4603      	mov	r3, r0
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002294:	d13a      	bne.n	800230c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f003 ff4e 	bl	800613c <USB_HC_ReadInterrupt>
 80022a0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	e025      	b.n	80022f4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d018      	beq.n	80022ee <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022d2:	d106      	bne.n	80022e2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	4619      	mov	r1, r3
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f8ab 	bl	8002436 <HCD_HC_IN_IRQHandler>
 80022e0:	e005      	b.n	80022ee <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	4619      	mov	r1, r3
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 fbf9 	bl	8002ae0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3301      	adds	r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d3d4      	bcc.n	80022a8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002306:	615a      	str	r2, [r3, #20]
 8002308:	e000      	b.n	800230c <HAL_HCD_IRQHandler+0x210>
      return;
 800230a:	bf00      	nop
    }
  }
}
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_HCD_Start+0x16>
 8002324:	2302      	movs	r3, #2
 8002326:	e013      	b.n	8002350 <HAL_HCD_Start+0x3e>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2101      	movs	r1, #1
 8002336:	4618      	mov	r0, r3
 8002338:	f003 fc3a 	bl	8005bb0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f003 f953 	bl	80055ec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_HCD_Stop+0x16>
 800236a:	2302      	movs	r3, #2
 800236c:	e00d      	b.n	800238a <HAL_HCD_Stop+0x32>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f004 f828 	bl	80063d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f003 fbdc 	bl	8005b5c <USB_ResetPort>
 80023a4:	4603      	mov	r3, r0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80023ba:	78fb      	ldrb	r3, [r7, #3]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	212c      	movs	r1, #44	; 0x2c
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	3360      	adds	r3, #96	; 0x60
 80023c8:	781b      	ldrb	r3, [r3, #0]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	212c      	movs	r1, #44	; 0x2c
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	4413      	add	r3, r2
 80023ee:	3350      	adds	r3, #80	; 0x50
 80023f0:	681b      	ldr	r3, [r3, #0]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f003 fc20 	bl	8005c50 <USB_GetCurrentFrame>
 8002410:	4603      	mov	r3, r0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f003 fbfb 	bl	8005c22 <USB_GetHostSpeed>
 800242c:	4603      	mov	r3, r0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4413      	add	r3, r2
 8002458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b04      	cmp	r3, #4
 8002464:	d11a      	bne.n	800249c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002472:	461a      	mov	r2, r3
 8002474:	2304      	movs	r3, #4
 8002476:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	3361      	adds	r3, #97	; 0x61
 8002486:	2206      	movs	r2, #6
 8002488:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	4611      	mov	r1, r2
 8002494:	4618      	mov	r0, r3
 8002496:	f003 fe62 	bl	800615e <USB_HC_Halt>
 800249a:	e0af      	b.n	80025fc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	015a      	lsls	r2, r3, #5
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024b2:	d11b      	bne.n	80024ec <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c0:	461a      	mov	r2, r3
 80024c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	212c      	movs	r1, #44	; 0x2c
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	3361      	adds	r3, #97	; 0x61
 80024d6:	2207      	movs	r2, #7
 80024d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f003 fe3a 	bl	800615e <USB_HC_Halt>
 80024ea:	e087      	b.n	80025fc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d109      	bne.n	8002516 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4413      	add	r3, r2
 800250a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250e:	461a      	mov	r2, r3
 8002510:	2320      	movs	r3, #32
 8002512:	6093      	str	r3, [r2, #8]
 8002514:	e072      	b.n	80025fc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4413      	add	r3, r2
 800251e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b08      	cmp	r3, #8
 800252a:	d11a      	bne.n	8002562 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4413      	add	r3, r2
 8002534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002538:	461a      	mov	r2, r3
 800253a:	2308      	movs	r3, #8
 800253c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	212c      	movs	r1, #44	; 0x2c
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	4413      	add	r3, r2
 800254a:	3361      	adds	r3, #97	; 0x61
 800254c:	2205      	movs	r2, #5
 800254e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f003 fdff 	bl	800615e <USB_HC_Halt>
 8002560:	e04c      	b.n	80025fc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4413      	add	r3, r2
 800256a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002578:	d11b      	bne.n	80025b2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4413      	add	r3, r2
 8002582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002586:	461a      	mov	r2, r3
 8002588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800258c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	3361      	adds	r3, #97	; 0x61
 800259c:	2208      	movs	r2, #8
 800259e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 fdd7 	bl	800615e <USB_HC_Halt>
 80025b0:	e024      	b.n	80025fc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c4:	2b80      	cmp	r3, #128	; 0x80
 80025c6:	d119      	bne.n	80025fc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	461a      	mov	r2, r3
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	3361      	adds	r3, #97	; 0x61
 80025e8:	2206      	movs	r2, #6
 80025ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f003 fdb1 	bl	800615e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4413      	add	r3, r2
 8002604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800260e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002612:	d112      	bne.n	800263a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f003 fd9d 	bl	800615e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4413      	add	r3, r2
 800262c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002630:	461a      	mov	r2, r3
 8002632:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002636:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002638:	e24e      	b.n	8002ad8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4413      	add	r3, r2
 8002642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	f040 80df 	bne.w	8002810 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d019      	beq.n	800268e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	3348      	adds	r3, #72	; 0x48
 8002668:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	0159      	lsls	r1, r3, #5
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	440b      	add	r3, r1
 8002672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800267c:	1ad2      	subs	r2, r2, r3
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	202c      	movs	r0, #44	; 0x2c
 8002684:	fb00 f303 	mul.w	r3, r0, r3
 8002688:	440b      	add	r3, r1
 800268a:	3350      	adds	r3, #80	; 0x50
 800268c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	212c      	movs	r1, #44	; 0x2c
 8002694:	fb01 f303 	mul.w	r3, r1, r3
 8002698:	4413      	add	r3, r2
 800269a:	3361      	adds	r3, #97	; 0x61
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	212c      	movs	r1, #44	; 0x2c
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	4413      	add	r3, r2
 80026ac:	335c      	adds	r3, #92	; 0x5c
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026be:	461a      	mov	r2, r3
 80026c0:	2301      	movs	r3, #1
 80026c2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	333f      	adds	r3, #63	; 0x3f
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d009      	beq.n	80026ec <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	333f      	adds	r3, #63	; 0x3f
 80026e6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d111      	bne.n	8002710 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f003 fd31 	bl	800615e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002708:	461a      	mov	r2, r3
 800270a:	2310      	movs	r3, #16
 800270c:	6093      	str	r3, [r2, #8]
 800270e:	e03a      	b.n	8002786 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	212c      	movs	r1, #44	; 0x2c
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	333f      	adds	r3, #63	; 0x3f
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b03      	cmp	r3, #3
 8002722:	d009      	beq.n	8002738 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	212c      	movs	r1, #44	; 0x2c
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	4413      	add	r3, r2
 8002730:	333f      	adds	r3, #63	; 0x3f
 8002732:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002734:	2b01      	cmp	r3, #1
 8002736:	d126      	bne.n	8002786 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	0151      	lsls	r1, r2, #5
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	440a      	add	r2, r1
 800274e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002752:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002756:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	212c      	movs	r1, #44	; 0x2c
 800275e:	fb01 f303 	mul.w	r3, r1, r3
 8002762:	4413      	add	r3, r2
 8002764:	3360      	adds	r3, #96	; 0x60
 8002766:	2201      	movs	r2, #1
 8002768:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	b2d9      	uxtb	r1, r3
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	202c      	movs	r0, #44	; 0x2c
 8002774:	fb00 f303 	mul.w	r3, r0, r3
 8002778:	4413      	add	r3, r2
 800277a:	3360      	adds	r3, #96	; 0x60
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f005 ff8f 	bl	80086a4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d12b      	bne.n	80027e6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	3348      	adds	r3, #72	; 0x48
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	202c      	movs	r0, #44	; 0x2c
 80027a4:	fb00 f202 	mul.w	r2, r0, r2
 80027a8:	440a      	add	r2, r1
 80027aa:	3240      	adds	r2, #64	; 0x40
 80027ac:	8812      	ldrh	r2, [r2, #0]
 80027ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 818e 	beq.w	8002ad8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	3354      	adds	r3, #84	; 0x54
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	f083 0301 	eor.w	r3, r3, #1
 80027d0:	b2d8      	uxtb	r0, r3
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	212c      	movs	r1, #44	; 0x2c
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	3354      	adds	r3, #84	; 0x54
 80027e0:	4602      	mov	r2, r0
 80027e2:	701a      	strb	r2, [r3, #0]
}
 80027e4:	e178      	b.n	8002ad8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	3354      	adds	r3, #84	; 0x54
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	f083 0301 	eor.w	r3, r3, #1
 80027fa:	b2d8      	uxtb	r0, r3
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	212c      	movs	r1, #44	; 0x2c
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	4413      	add	r3, r2
 8002808:	3354      	adds	r3, #84	; 0x54
 800280a:	4602      	mov	r2, r0
 800280c:	701a      	strb	r2, [r3, #0]
}
 800280e:	e163      	b.n	8002ad8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b02      	cmp	r3, #2
 8002824:	f040 80f6 	bne.w	8002a14 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	212c      	movs	r1, #44	; 0x2c
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4413      	add	r3, r2
 8002834:	3361      	adds	r3, #97	; 0x61
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d109      	bne.n	8002850 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	212c      	movs	r1, #44	; 0x2c
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	3360      	adds	r3, #96	; 0x60
 800284a:	2201      	movs	r2, #1
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	e0c9      	b.n	80029e4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	212c      	movs	r1, #44	; 0x2c
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	4413      	add	r3, r2
 800285c:	3361      	adds	r3, #97	; 0x61
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b05      	cmp	r3, #5
 8002862:	d109      	bne.n	8002878 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	212c      	movs	r1, #44	; 0x2c
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	3360      	adds	r3, #96	; 0x60
 8002872:	2205      	movs	r2, #5
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	e0b5      	b.n	80029e4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	212c      	movs	r1, #44	; 0x2c
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	3361      	adds	r3, #97	; 0x61
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b06      	cmp	r3, #6
 800288a:	d009      	beq.n	80028a0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	212c      	movs	r1, #44	; 0x2c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	3361      	adds	r3, #97	; 0x61
 800289a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800289c:	2b08      	cmp	r3, #8
 800289e:	d150      	bne.n	8002942 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	212c      	movs	r1, #44	; 0x2c
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	335c      	adds	r3, #92	; 0x5c
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	202c      	movs	r0, #44	; 0x2c
 80028b8:	fb00 f303 	mul.w	r3, r0, r3
 80028bc:	440b      	add	r3, r1
 80028be:	335c      	adds	r3, #92	; 0x5c
 80028c0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	335c      	adds	r3, #92	; 0x5c
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d912      	bls.n	80028fc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	212c      	movs	r1, #44	; 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	335c      	adds	r3, #92	; 0x5c
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	212c      	movs	r1, #44	; 0x2c
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	3360      	adds	r3, #96	; 0x60
 80028f6:	2204      	movs	r2, #4
 80028f8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028fa:	e073      	b.n	80029e4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	3360      	adds	r3, #96	; 0x60
 800290a:	2202      	movs	r2, #2
 800290c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002924:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800292c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4413      	add	r3, r2
 8002936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293a:	461a      	mov	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002940:	e050      	b.n	80029e4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	212c      	movs	r1, #44	; 0x2c
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	3361      	adds	r3, #97	; 0x61
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d122      	bne.n	800299c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	212c      	movs	r1, #44	; 0x2c
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	3360      	adds	r3, #96	; 0x60
 8002964:	2202      	movs	r2, #2
 8002966:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4413      	add	r3, r2
 8002970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800297e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002986:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002994:	461a      	mov	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	e023      	b.n	80029e4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	3361      	adds	r3, #97	; 0x61
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b07      	cmp	r3, #7
 80029ae:	d119      	bne.n	80029e4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	335c      	adds	r3, #92	; 0x5c
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	202c      	movs	r0, #44	; 0x2c
 80029c8:	fb00 f303 	mul.w	r3, r0, r3
 80029cc:	440b      	add	r3, r1
 80029ce:	335c      	adds	r3, #92	; 0x5c
 80029d0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	212c      	movs	r1, #44	; 0x2c
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	4413      	add	r3, r2
 80029de:	3360      	adds	r3, #96	; 0x60
 80029e0:	2204      	movs	r2, #4
 80029e2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f0:	461a      	mov	r2, r3
 80029f2:	2302      	movs	r3, #2
 80029f4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	b2d9      	uxtb	r1, r3
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	202c      	movs	r0, #44	; 0x2c
 8002a00:	fb00 f303 	mul.w	r3, r0, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	3360      	adds	r3, #96	; 0x60
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f005 fe49 	bl	80086a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a12:	e061      	b.n	8002ad8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0310 	and.w	r3, r3, #16
 8002a26:	2b10      	cmp	r3, #16
 8002a28:	d156      	bne.n	8002ad8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	212c      	movs	r1, #44	; 0x2c
 8002a30:	fb01 f303 	mul.w	r3, r1, r3
 8002a34:	4413      	add	r3, r2
 8002a36:	333f      	adds	r3, #63	; 0x3f
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d111      	bne.n	8002a62 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	212c      	movs	r1, #44	; 0x2c
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	4413      	add	r3, r2
 8002a4a:	335c      	adds	r3, #92	; 0x5c
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f003 fb7f 	bl	800615e <USB_HC_Halt>
 8002a60:	e031      	b.n	8002ac6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	212c      	movs	r1, #44	; 0x2c
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	333f      	adds	r3, #63	; 0x3f
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	212c      	movs	r1, #44	; 0x2c
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	333f      	adds	r3, #63	; 0x3f
 8002a84:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d11d      	bne.n	8002ac6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	212c      	movs	r1, #44	; 0x2c
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	335c      	adds	r3, #92	; 0x5c
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d110      	bne.n	8002ac6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3361      	adds	r3, #97	; 0x61
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f003 fb4c 	bl	800615e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2310      	movs	r3, #16
 8002ad6:	6093      	str	r3, [r2, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d11a      	bne.n	8002b46 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2304      	movs	r3, #4
 8002b20:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3361      	adds	r3, #97	; 0x61
 8002b30:	2206      	movs	r2, #6
 8002b32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f003 fb0d 	bl	800615e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002b44:	e331      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d12e      	bne.n	8002bba <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2320      	movs	r3, #32
 8002b6c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	212c      	movs	r1, #44	; 0x2c
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	333d      	adds	r3, #61	; 0x3d
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	f040 8313 	bne.w	80031aa <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	333d      	adds	r3, #61	; 0x3d
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3360      	adds	r3, #96	; 0x60
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f003 fad3 	bl	800615e <USB_HC_Halt>
}
 8002bb8:	e2f7      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd0:	d112      	bne.n	8002bf8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bde:	461a      	mov	r2, r3
 8002be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002be4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f003 fab4 	bl	800615e <USB_HC_Halt>
}
 8002bf6:	e2d8      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d140      	bne.n	8002c90 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	335c      	adds	r3, #92	; 0x5c
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b40      	cmp	r3, #64	; 0x40
 8002c34:	d111      	bne.n	8002c5a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	333d      	adds	r3, #61	; 0x3d
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c54:	461a      	mov	r2, r3
 8002c56:	2340      	movs	r3, #64	; 0x40
 8002c58:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c66:	461a      	mov	r2, r3
 8002c68:	2301      	movs	r3, #1
 8002c6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3361      	adds	r3, #97	; 0x61
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f003 fa68 	bl	800615e <USB_HC_Halt>
}
 8002c8e:	e28c      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d12c      	bne.n	8002d00 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	212c      	movs	r1, #44	; 0x2c
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3361      	adds	r3, #97	; 0x61
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	212c      	movs	r1, #44	; 0x2c
 8002cbe:	fb01 f303 	mul.w	r3, r1, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	333d      	adds	r3, #61	; 0x3d
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	212c      	movs	r1, #44	; 0x2c
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	335c      	adds	r3, #92	; 0x5c
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f003 fa39 	bl	800615e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2340      	movs	r3, #64	; 0x40
 8002cfc:	6093      	str	r3, [r2, #8]
}
 8002cfe:	e254      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d11a      	bne.n	8002d4c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d22:	461a      	mov	r2, r3
 8002d24:	2308      	movs	r3, #8
 8002d26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	212c      	movs	r1, #44	; 0x2c
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	3361      	adds	r3, #97	; 0x61
 8002d36:	2205      	movs	r2, #5
 8002d38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f003 fa0a 	bl	800615e <USB_HC_Halt>
}
 8002d4a:	e22e      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b10      	cmp	r3, #16
 8002d60:	d140      	bne.n	8002de4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	335c      	adds	r3, #92	; 0x5c
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3361      	adds	r3, #97	; 0x61
 8002d82:	2203      	movs	r2, #3
 8002d84:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	212c      	movs	r1, #44	; 0x2c
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	333d      	adds	r3, #61	; 0x3d
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d112      	bne.n	8002dc0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	212c      	movs	r1, #44	; 0x2c
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	333c      	adds	r3, #60	; 0x3c
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d108      	bne.n	8002dc0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	212c      	movs	r1, #44	; 0x2c
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	333d      	adds	r3, #61	; 0x3d
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f003 f9c7 	bl	800615e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2310      	movs	r3, #16
 8002de0:	6093      	str	r3, [r2, #8]
}
 8002de2:	e1e2      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df6:	2b80      	cmp	r3, #128	; 0x80
 8002df8:	d164      	bne.n	8002ec4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d111      	bne.n	8002e26 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	212c      	movs	r1, #44	; 0x2c
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3361      	adds	r3, #97	; 0x61
 8002e10:	2206      	movs	r2, #6
 8002e12:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f003 f99d 	bl	800615e <USB_HC_Halt>
 8002e24:	e044      	b.n	8002eb0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	212c      	movs	r1, #44	; 0x2c
 8002e2c:	fb01 f303 	mul.w	r3, r1, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	335c      	adds	r3, #92	; 0x5c
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	202c      	movs	r0, #44	; 0x2c
 8002e3e:	fb00 f303 	mul.w	r3, r0, r3
 8002e42:	440b      	add	r3, r1
 8002e44:	335c      	adds	r3, #92	; 0x5c
 8002e46:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	212c      	movs	r1, #44	; 0x2c
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	4413      	add	r3, r2
 8002e54:	335c      	adds	r3, #92	; 0x5c
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d920      	bls.n	8002e9e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	212c      	movs	r1, #44	; 0x2c
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	335c      	adds	r3, #92	; 0x5c
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	3360      	adds	r3, #96	; 0x60
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	b2d9      	uxtb	r1, r3
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	202c      	movs	r0, #44	; 0x2c
 8002e8a:	fb00 f303 	mul.w	r3, r0, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	3360      	adds	r3, #96	; 0x60
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f005 fc04 	bl	80086a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e9c:	e008      	b.n	8002eb0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	212c      	movs	r1, #44	; 0x2c
 8002ea4:	fb01 f303 	mul.w	r3, r1, r3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3360      	adds	r3, #96	; 0x60
 8002eac:	2202      	movs	r2, #2
 8002eae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	6093      	str	r3, [r2, #8]
}
 8002ec2:	e172      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eda:	d11b      	bne.n	8002f14 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3361      	adds	r3, #97	; 0x61
 8002eea:	2208      	movs	r2, #8
 8002eec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f003 f930 	bl	800615e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f10:	6093      	str	r3, [r2, #8]
}
 8002f12:	e14a      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	f040 813f 	bne.w	80031aa <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	212c      	movs	r1, #44	; 0x2c
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	3361      	adds	r3, #97	; 0x61
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d17d      	bne.n	800303c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	212c      	movs	r1, #44	; 0x2c
 8002f46:	fb01 f303 	mul.w	r3, r1, r3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3360      	adds	r3, #96	; 0x60
 8002f4e:	2201      	movs	r2, #1
 8002f50:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	212c      	movs	r1, #44	; 0x2c
 8002f58:	fb01 f303 	mul.w	r3, r1, r3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	333f      	adds	r3, #63	; 0x3f
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d00a      	beq.n	8002f7c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	212c      	movs	r1, #44	; 0x2c
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	4413      	add	r3, r2
 8002f72:	333f      	adds	r3, #63	; 0x3f
 8002f74:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	f040 8100 	bne.w	800317c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d113      	bne.n	8002fac <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	212c      	movs	r1, #44	; 0x2c
 8002f8a:	fb01 f303 	mul.w	r3, r1, r3
 8002f8e:	4413      	add	r3, r2
 8002f90:	3355      	adds	r3, #85	; 0x55
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	f083 0301 	eor.w	r3, r3, #1
 8002f98:	b2d8      	uxtb	r0, r3
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3355      	adds	r3, #85	; 0x55
 8002fa8:	4602      	mov	r2, r0
 8002faa:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	f040 80e3 	bne.w	800317c <HCD_HC_OUT_IRQHandler+0x69c>
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	334c      	adds	r3, #76	; 0x4c
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 80d8 	beq.w	800317c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	212c      	movs	r1, #44	; 0x2c
 8002fd2:	fb01 f303 	mul.w	r3, r1, r3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	334c      	adds	r3, #76	; 0x4c
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	202c      	movs	r0, #44	; 0x2c
 8002fe2:	fb00 f202 	mul.w	r2, r0, r2
 8002fe6:	440a      	add	r2, r1
 8002fe8:	3240      	adds	r2, #64	; 0x40
 8002fea:	8812      	ldrh	r2, [r2, #0]
 8002fec:	4413      	add	r3, r2
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	202c      	movs	r0, #44	; 0x2c
 8002ff6:	fb00 f202 	mul.w	r2, r0, r2
 8002ffa:	440a      	add	r2, r1
 8002ffc:	3240      	adds	r2, #64	; 0x40
 8002ffe:	8812      	ldrh	r2, [r2, #0]
 8003000:	fbb3 f3f2 	udiv	r3, r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 80b5 	beq.w	800317c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	212c      	movs	r1, #44	; 0x2c
 8003018:	fb01 f303 	mul.w	r3, r1, r3
 800301c:	4413      	add	r3, r2
 800301e:	3355      	adds	r3, #85	; 0x55
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	f083 0301 	eor.w	r3, r3, #1
 8003026:	b2d8      	uxtb	r0, r3
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	212c      	movs	r1, #44	; 0x2c
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	4413      	add	r3, r2
 8003034:	3355      	adds	r3, #85	; 0x55
 8003036:	4602      	mov	r2, r0
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	e09f      	b.n	800317c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	212c      	movs	r1, #44	; 0x2c
 8003042:	fb01 f303 	mul.w	r3, r1, r3
 8003046:	4413      	add	r3, r2
 8003048:	3361      	adds	r3, #97	; 0x61
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b03      	cmp	r3, #3
 800304e:	d109      	bne.n	8003064 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	212c      	movs	r1, #44	; 0x2c
 8003056:	fb01 f303 	mul.w	r3, r1, r3
 800305a:	4413      	add	r3, r2
 800305c:	3360      	adds	r3, #96	; 0x60
 800305e:	2202      	movs	r2, #2
 8003060:	701a      	strb	r2, [r3, #0]
 8003062:	e08b      	b.n	800317c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	212c      	movs	r1, #44	; 0x2c
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	3361      	adds	r3, #97	; 0x61
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b04      	cmp	r3, #4
 8003076:	d109      	bne.n	800308c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	212c      	movs	r1, #44	; 0x2c
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	4413      	add	r3, r2
 8003084:	3360      	adds	r3, #96	; 0x60
 8003086:	2202      	movs	r2, #2
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	e077      	b.n	800317c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4413      	add	r3, r2
 8003098:	3361      	adds	r3, #97	; 0x61
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b05      	cmp	r3, #5
 800309e:	d109      	bne.n	80030b4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	212c      	movs	r1, #44	; 0x2c
 80030a6:	fb01 f303 	mul.w	r3, r1, r3
 80030aa:	4413      	add	r3, r2
 80030ac:	3360      	adds	r3, #96	; 0x60
 80030ae:	2205      	movs	r2, #5
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	e063      	b.n	800317c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	212c      	movs	r1, #44	; 0x2c
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	4413      	add	r3, r2
 80030c0:	3361      	adds	r3, #97	; 0x61
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b06      	cmp	r3, #6
 80030c6:	d009      	beq.n	80030dc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	212c      	movs	r1, #44	; 0x2c
 80030ce:	fb01 f303 	mul.w	r3, r1, r3
 80030d2:	4413      	add	r3, r2
 80030d4:	3361      	adds	r3, #97	; 0x61
 80030d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d14f      	bne.n	800317c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	212c      	movs	r1, #44	; 0x2c
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	335c      	adds	r3, #92	; 0x5c
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	202c      	movs	r0, #44	; 0x2c
 80030f4:	fb00 f303 	mul.w	r3, r0, r3
 80030f8:	440b      	add	r3, r1
 80030fa:	335c      	adds	r3, #92	; 0x5c
 80030fc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	212c      	movs	r1, #44	; 0x2c
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	4413      	add	r3, r2
 800310a:	335c      	adds	r3, #92	; 0x5c
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d912      	bls.n	8003138 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	212c      	movs	r1, #44	; 0x2c
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	4413      	add	r3, r2
 800311e:	335c      	adds	r3, #92	; 0x5c
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	212c      	movs	r1, #44	; 0x2c
 800312a:	fb01 f303 	mul.w	r3, r1, r3
 800312e:	4413      	add	r3, r2
 8003130:	3360      	adds	r3, #96	; 0x60
 8003132:	2204      	movs	r2, #4
 8003134:	701a      	strb	r2, [r3, #0]
 8003136:	e021      	b.n	800317c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	212c      	movs	r1, #44	; 0x2c
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	4413      	add	r3, r2
 8003144:	3360      	adds	r3, #96	; 0x60
 8003146:	2202      	movs	r2, #2
 8003148:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	4413      	add	r3, r2
 8003152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003160:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003168:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	4413      	add	r3, r2
 8003172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003176:	461a      	mov	r2, r3
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	4413      	add	r3, r2
 8003184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003188:	461a      	mov	r2, r3
 800318a:	2302      	movs	r3, #2
 800318c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	b2d9      	uxtb	r1, r3
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	202c      	movs	r0, #44	; 0x2c
 8003198:	fb00 f303 	mul.w	r3, r0, r3
 800319c:	4413      	add	r3, r2
 800319e:	3360      	adds	r3, #96	; 0x60
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f005 fa7d 	bl	80086a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80031aa:	bf00      	nop
 80031ac:	3720      	adds	r7, #32
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b08a      	sub	sp, #40	; 0x28
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	0c5b      	lsrs	r3, r3, #17
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031e6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d004      	beq.n	80031f8 <HCD_RXQLVL_IRQHandler+0x46>
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b05      	cmp	r3, #5
 80031f2:	f000 80a9 	beq.w	8003348 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80031f6:	e0aa      	b.n	800334e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 80a6 	beq.w	800334c <HCD_RXQLVL_IRQHandler+0x19a>
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	212c      	movs	r1, #44	; 0x2c
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	4413      	add	r3, r2
 800320c:	3344      	adds	r3, #68	; 0x44
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 809b 	beq.w	800334c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	212c      	movs	r1, #44	; 0x2c
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	4413      	add	r3, r2
 8003222:	3350      	adds	r3, #80	; 0x50
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	441a      	add	r2, r3
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	202c      	movs	r0, #44	; 0x2c
 8003230:	fb00 f303 	mul.w	r3, r0, r3
 8003234:	440b      	add	r3, r1
 8003236:	334c      	adds	r3, #76	; 0x4c
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d87a      	bhi.n	8003334 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	212c      	movs	r1, #44	; 0x2c
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	3344      	adds	r3, #68	; 0x44
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	b292      	uxth	r2, r2
 8003256:	4619      	mov	r1, r3
 8003258:	f002 fad8 	bl	800580c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	212c      	movs	r1, #44	; 0x2c
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	4413      	add	r3, r2
 8003268:	3344      	adds	r3, #68	; 0x44
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	441a      	add	r2, r3
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	202c      	movs	r0, #44	; 0x2c
 8003276:	fb00 f303 	mul.w	r3, r0, r3
 800327a:	440b      	add	r3, r1
 800327c:	3344      	adds	r3, #68	; 0x44
 800327e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	212c      	movs	r1, #44	; 0x2c
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	3350      	adds	r3, #80	; 0x50
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	441a      	add	r2, r3
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	202c      	movs	r0, #44	; 0x2c
 800329a:	fb00 f303 	mul.w	r3, r0, r3
 800329e:	440b      	add	r3, r1
 80032a0:	3350      	adds	r3, #80	; 0x50
 80032a2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	0cdb      	lsrs	r3, r3, #19
 80032b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032b8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	212c      	movs	r1, #44	; 0x2c
 80032c0:	fb01 f303 	mul.w	r3, r1, r3
 80032c4:	4413      	add	r3, r2
 80032c6:	3340      	adds	r3, #64	; 0x40
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d13c      	bne.n	800334c <HCD_RXQLVL_IRQHandler+0x19a>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d039      	beq.n	800334c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032ee:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032f6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003304:	461a      	mov	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	212c      	movs	r1, #44	; 0x2c
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	4413      	add	r3, r2
 8003316:	3354      	adds	r3, #84	; 0x54
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	f083 0301 	eor.w	r3, r3, #1
 800331e:	b2d8      	uxtb	r0, r3
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	212c      	movs	r1, #44	; 0x2c
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	4413      	add	r3, r2
 800332c:	3354      	adds	r3, #84	; 0x54
 800332e:	4602      	mov	r2, r0
 8003330:	701a      	strb	r2, [r3, #0]
      break;
 8003332:	e00b      	b.n	800334c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	212c      	movs	r1, #44	; 0x2c
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	4413      	add	r3, r2
 8003340:	3360      	adds	r3, #96	; 0x60
 8003342:	2204      	movs	r2, #4
 8003344:	701a      	strb	r2, [r3, #0]
      break;
 8003346:	e001      	b.n	800334c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003348:	bf00      	nop
 800334a:	e000      	b.n	800334e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800334c:	bf00      	nop
  }
}
 800334e:	bf00      	nop
 8003350:	3728      	adds	r7, #40	; 0x28
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b086      	sub	sp, #24
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003382:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b02      	cmp	r3, #2
 800338c:	d10b      	bne.n	80033a6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b01      	cmp	r3, #1
 8003396:	d102      	bne.n	800339e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f005 f967 	bl	800866c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	f043 0302 	orr.w	r3, r3, #2
 80033a4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d132      	bne.n	8003416 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f043 0308 	orr.w	r3, r3, #8
 80033b6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d126      	bne.n	8003410 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d113      	bne.n	80033f2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80033d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033d4:	d106      	bne.n	80033e4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2102      	movs	r1, #2
 80033dc:	4618      	mov	r0, r3
 80033de:	f002 fb83 	bl	8005ae8 <USB_InitFSLSPClkSel>
 80033e2:	e011      	b.n	8003408 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2101      	movs	r1, #1
 80033ea:	4618      	mov	r0, r3
 80033ec:	f002 fb7c 	bl	8005ae8 <USB_InitFSLSPClkSel>
 80033f0:	e00a      	b.n	8003408 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d106      	bne.n	8003408 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003400:	461a      	mov	r2, r3
 8003402:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003406:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f005 f959 	bl	80086c0 <HAL_HCD_PortEnabled_Callback>
 800340e:	e002      	b.n	8003416 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f005 f963 	bl	80086dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	2b20      	cmp	r3, #32
 800341e:	d103      	bne.n	8003428 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f043 0320 	orr.w	r3, r3, #32
 8003426:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800342e:	461a      	mov	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	6013      	str	r3, [r2, #0]
}
 8003434:	bf00      	nop
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e12b      	b.n	80036a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fd fe7e 	bl	8001164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2224      	movs	r2, #36	; 0x24
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0201 	bic.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800348e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800349e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034a0:	f001 fe56 	bl	8005150 <HAL_RCC_GetPCLK1Freq>
 80034a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4a81      	ldr	r2, [pc, #516]	; (80036b0 <HAL_I2C_Init+0x274>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d807      	bhi.n	80034c0 <HAL_I2C_Init+0x84>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4a80      	ldr	r2, [pc, #512]	; (80036b4 <HAL_I2C_Init+0x278>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	bf94      	ite	ls
 80034b8:	2301      	movls	r3, #1
 80034ba:	2300      	movhi	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	e006      	b.n	80034ce <HAL_I2C_Init+0x92>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4a7d      	ldr	r2, [pc, #500]	; (80036b8 <HAL_I2C_Init+0x27c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	bf94      	ite	ls
 80034c8:	2301      	movls	r3, #1
 80034ca:	2300      	movhi	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e0e7      	b.n	80036a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4a78      	ldr	r2, [pc, #480]	; (80036bc <HAL_I2C_Init+0x280>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	0c9b      	lsrs	r3, r3, #18
 80034e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4a6a      	ldr	r2, [pc, #424]	; (80036b0 <HAL_I2C_Init+0x274>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d802      	bhi.n	8003510 <HAL_I2C_Init+0xd4>
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	3301      	adds	r3, #1
 800350e:	e009      	b.n	8003524 <HAL_I2C_Init+0xe8>
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003516:	fb02 f303 	mul.w	r3, r2, r3
 800351a:	4a69      	ldr	r2, [pc, #420]	; (80036c0 <HAL_I2C_Init+0x284>)
 800351c:	fba2 2303 	umull	r2, r3, r2, r3
 8003520:	099b      	lsrs	r3, r3, #6
 8003522:	3301      	adds	r3, #1
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	430b      	orrs	r3, r1
 800352a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003536:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	495c      	ldr	r1, [pc, #368]	; (80036b0 <HAL_I2C_Init+0x274>)
 8003540:	428b      	cmp	r3, r1
 8003542:	d819      	bhi.n	8003578 <HAL_I2C_Init+0x13c>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	1e59      	subs	r1, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003552:	1c59      	adds	r1, r3, #1
 8003554:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003558:	400b      	ands	r3, r1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HAL_I2C_Init+0x138>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1e59      	subs	r1, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	fbb1 f3f3 	udiv	r3, r1, r3
 800356c:	3301      	adds	r3, #1
 800356e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003572:	e051      	b.n	8003618 <HAL_I2C_Init+0x1dc>
 8003574:	2304      	movs	r3, #4
 8003576:	e04f      	b.n	8003618 <HAL_I2C_Init+0x1dc>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d111      	bne.n	80035a4 <HAL_I2C_Init+0x168>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	1e58      	subs	r0, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6859      	ldr	r1, [r3, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	440b      	add	r3, r1
 800358e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003592:	3301      	adds	r3, #1
 8003594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003598:	2b00      	cmp	r3, #0
 800359a:	bf0c      	ite	eq
 800359c:	2301      	moveq	r3, #1
 800359e:	2300      	movne	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	e012      	b.n	80035ca <HAL_I2C_Init+0x18e>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	1e58      	subs	r0, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6859      	ldr	r1, [r3, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	0099      	lsls	r1, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ba:	3301      	adds	r3, #1
 80035bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_I2C_Init+0x196>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e022      	b.n	8003618 <HAL_I2C_Init+0x1dc>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10e      	bne.n	80035f8 <HAL_I2C_Init+0x1bc>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1e58      	subs	r0, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6859      	ldr	r1, [r3, #4]
 80035e2:	460b      	mov	r3, r1
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	440b      	add	r3, r1
 80035e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ec:	3301      	adds	r3, #1
 80035ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035f6:	e00f      	b.n	8003618 <HAL_I2C_Init+0x1dc>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1e58      	subs	r0, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6859      	ldr	r1, [r3, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	0099      	lsls	r1, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	fbb0 f3f3 	udiv	r3, r0, r3
 800360e:	3301      	adds	r3, #1
 8003610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	6809      	ldr	r1, [r1, #0]
 800361c:	4313      	orrs	r3, r2
 800361e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69da      	ldr	r2, [r3, #28]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003646:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6911      	ldr	r1, [r2, #16]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68d2      	ldr	r2, [r2, #12]
 8003652:	4311      	orrs	r1, r2
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	430b      	orrs	r3, r1
 800365a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695a      	ldr	r2, [r3, #20]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0201 	orr.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	000186a0 	.word	0x000186a0
 80036b4:	001e847f 	.word	0x001e847f
 80036b8:	003d08ff 	.word	0x003d08ff
 80036bc:	431bde83 	.word	0x431bde83
 80036c0:	10624dd3 	.word	0x10624dd3

080036c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	607a      	str	r2, [r7, #4]
 80036ce:	461a      	mov	r2, r3
 80036d0:	460b      	mov	r3, r1
 80036d2:	817b      	strh	r3, [r7, #10]
 80036d4:	4613      	mov	r3, r2
 80036d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036d8:	f7fd ffae 	bl	8001638 <HAL_GetTick>
 80036dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	f040 80e0 	bne.w	80038ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	2319      	movs	r3, #25
 80036f2:	2201      	movs	r2, #1
 80036f4:	4970      	ldr	r1, [pc, #448]	; (80038b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fa92 	bl	8003c20 <I2C_WaitOnFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003702:	2302      	movs	r3, #2
 8003704:	e0d3      	b.n	80038ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_I2C_Master_Transmit+0x50>
 8003710:	2302      	movs	r3, #2
 8003712:	e0cc      	b.n	80038ae <HAL_I2C_Master_Transmit+0x1ea>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b01      	cmp	r3, #1
 8003728:	d007      	beq.n	800373a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0201 	orr.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003748:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2221      	movs	r2, #33	; 0x21
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2210      	movs	r2, #16
 8003756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	893a      	ldrh	r2, [r7, #8]
 800376a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4a50      	ldr	r2, [pc, #320]	; (80038bc <HAL_I2C_Master_Transmit+0x1f8>)
 800377a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800377c:	8979      	ldrh	r1, [r7, #10]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	6a3a      	ldr	r2, [r7, #32]
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 f9ca 	bl	8003b1c <I2C_MasterRequestWrite>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e08d      	b.n	80038ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003792:	2300      	movs	r3, #0
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80037a8:	e066      	b.n	8003878 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	6a39      	ldr	r1, [r7, #32]
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fb0c 	bl	8003dcc <I2C_WaitOnTXEFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00d      	beq.n	80037d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d107      	bne.n	80037d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e06b      	b.n	80038ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	781a      	ldrb	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b04      	cmp	r3, #4
 8003812:	d11b      	bne.n	800384c <HAL_I2C_Master_Transmit+0x188>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003818:	2b00      	cmp	r3, #0
 800381a:	d017      	beq.n	800384c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	781a      	ldrb	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	6a39      	ldr	r1, [r7, #32]
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 fafc 	bl	8003e4e <I2C_WaitOnBTFFlagUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00d      	beq.n	8003878 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	2b04      	cmp	r3, #4
 8003862:	d107      	bne.n	8003874 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003872:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e01a      	b.n	80038ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387c:	2b00      	cmp	r3, #0
 800387e:	d194      	bne.n	80037aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800388e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	e000      	b.n	80038ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80038ac:	2302      	movs	r3, #2
  }
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	00100002 	.word	0x00100002
 80038bc:	ffff0000 	.word	0xffff0000

080038c0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08a      	sub	sp, #40	; 0x28
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	607a      	str	r2, [r7, #4]
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	460b      	mov	r3, r1
 80038ce:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80038d0:	f7fd feb2 	bl	8001638 <HAL_GetTick>
 80038d4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	f040 8111 	bne.w	8003b0a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	2319      	movs	r3, #25
 80038ee:	2201      	movs	r2, #1
 80038f0:	4988      	ldr	r1, [pc, #544]	; (8003b14 <HAL_I2C_IsDeviceReady+0x254>)
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 f994 	bl	8003c20 <I2C_WaitOnFlagUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80038fe:	2302      	movs	r3, #2
 8003900:	e104      	b.n	8003b0c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_I2C_IsDeviceReady+0x50>
 800390c:	2302      	movs	r3, #2
 800390e:	e0fd      	b.n	8003b0c <HAL_I2C_IsDeviceReady+0x24c>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b01      	cmp	r3, #1
 8003924:	d007      	beq.n	8003936 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 0201 	orr.w	r2, r2, #1
 8003934:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003944:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2224      	movs	r2, #36	; 0x24
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4a70      	ldr	r2, [pc, #448]	; (8003b18 <HAL_I2C_IsDeviceReady+0x258>)
 8003958:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003968:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2200      	movs	r2, #0
 8003972:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f952 	bl	8003c20 <I2C_WaitOnFlagUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00d      	beq.n	800399e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003990:	d103      	bne.n	800399a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003998:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e0b6      	b.n	8003b0c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800399e:	897b      	ldrh	r3, [r7, #10]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039ac:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80039ae:	f7fd fe43 	bl	8001638 <HAL_GetTick>
 80039b2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b02      	cmp	r3, #2
 80039c0:	bf0c      	ite	eq
 80039c2:	2301      	moveq	r3, #1
 80039c4:	2300      	movne	r3, #0
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d8:	bf0c      	ite	eq
 80039da:	2301      	moveq	r3, #1
 80039dc:	2300      	movne	r3, #0
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80039e2:	e025      	b.n	8003a30 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039e4:	f7fd fe28 	bl	8001638 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d302      	bcc.n	80039fa <HAL_I2C_IsDeviceReady+0x13a>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d103      	bne.n	8003a02 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	22a0      	movs	r2, #160	; 0xa0
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	bf0c      	ite	eq
 8003a10:	2301      	moveq	r3, #1
 8003a12:	2300      	movne	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2ba0      	cmp	r3, #160	; 0xa0
 8003a3a:	d005      	beq.n	8003a48 <HAL_I2C_IsDeviceReady+0x188>
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d102      	bne.n	8003a48 <HAL_I2C_IsDeviceReady+0x188>
 8003a42:	7dbb      	ldrb	r3, [r7, #22]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0cd      	beq.n	80039e4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d129      	bne.n	8003ab2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a6e:	2300      	movs	r3, #0
 8003a70:	613b      	str	r3, [r7, #16]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	2319      	movs	r3, #25
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	4921      	ldr	r1, [pc, #132]	; (8003b14 <HAL_I2C_IsDeviceReady+0x254>)
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f8c6 	bl	8003c20 <I2C_WaitOnFlagUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e036      	b.n	8003b0c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	e02c      	b.n	8003b0c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003aca:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	2319      	movs	r3, #25
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	490f      	ldr	r1, [pc, #60]	; (8003b14 <HAL_I2C_IsDeviceReady+0x254>)
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f8a2 	bl	8003c20 <I2C_WaitOnFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e012      	b.n	8003b0c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	f4ff af32 	bcc.w	800395a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
  }
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3720      	adds	r7, #32
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	00100002 	.word	0x00100002
 8003b18:	ffff0000 	.word	0xffff0000

08003b1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d006      	beq.n	8003b46 <I2C_MasterRequestWrite+0x2a>
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d003      	beq.n	8003b46 <I2C_MasterRequestWrite+0x2a>
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b44:	d108      	bne.n	8003b58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	e00b      	b.n	8003b70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	2b12      	cmp	r3, #18
 8003b5e:	d107      	bne.n	8003b70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f84f 	bl	8003c20 <I2C_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00d      	beq.n	8003ba4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b96:	d103      	bne.n	8003ba0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e035      	b.n	8003c10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bac:	d108      	bne.n	8003bc0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bae:	897b      	ldrh	r3, [r7, #10]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bbc:	611a      	str	r2, [r3, #16]
 8003bbe:	e01b      	b.n	8003bf8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bc0:	897b      	ldrh	r3, [r7, #10]
 8003bc2:	11db      	asrs	r3, r3, #7
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f003 0306 	and.w	r3, r3, #6
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	f063 030f 	orn	r3, r3, #15
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	490e      	ldr	r1, [pc, #56]	; (8003c18 <I2C_MasterRequestWrite+0xfc>)
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f875 	bl	8003cce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e010      	b.n	8003c10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bee:	897b      	ldrh	r3, [r7, #10]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4907      	ldr	r1, [pc, #28]	; (8003c1c <I2C_MasterRequestWrite+0x100>)
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 f865 	bl	8003cce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	00010008 	.word	0x00010008
 8003c1c:	00010002 	.word	0x00010002

08003c20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c30:	e025      	b.n	8003c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c38:	d021      	beq.n	8003c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3a:	f7fd fcfd 	bl	8001638 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d302      	bcc.n	8003c50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d116      	bne.n	8003c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f043 0220 	orr.w	r2, r3, #32
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e023      	b.n	8003cc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	0c1b      	lsrs	r3, r3, #16
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d10d      	bne.n	8003ca4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	43da      	mvns	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4013      	ands	r3, r2
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bf0c      	ite	eq
 8003c9a:	2301      	moveq	r3, #1
 8003c9c:	2300      	movne	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	e00c      	b.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	43da      	mvns	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	bf0c      	ite	eq
 8003cb6:	2301      	moveq	r3, #1
 8003cb8:	2300      	movne	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d0b6      	beq.n	8003c32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cdc:	e051      	b.n	8003d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cec:	d123      	bne.n	8003d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f043 0204 	orr.w	r2, r3, #4
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e046      	b.n	8003dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d3c:	d021      	beq.n	8003d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3e:	f7fd fc7b 	bl	8001638 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d302      	bcc.n	8003d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d116      	bne.n	8003d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f043 0220 	orr.w	r2, r3, #32
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e020      	b.n	8003dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d10c      	bne.n	8003da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	43da      	mvns	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4013      	ands	r3, r2
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	bf14      	ite	ne
 8003d9e:	2301      	movne	r3, #1
 8003da0:	2300      	moveq	r3, #0
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	e00b      	b.n	8003dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	43da      	mvns	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4013      	ands	r3, r2
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	bf14      	ite	ne
 8003db8:	2301      	movne	r3, #1
 8003dba:	2300      	moveq	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d18d      	bne.n	8003cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dd8:	e02d      	b.n	8003e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f878 	bl	8003ed0 <I2C_IsAcknowledgeFailed>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e02d      	b.n	8003e46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003df0:	d021      	beq.n	8003e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df2:	f7fd fc21 	bl	8001638 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d302      	bcc.n	8003e08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d116      	bne.n	8003e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f043 0220 	orr.w	r2, r3, #32
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e007      	b.n	8003e46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e40:	2b80      	cmp	r3, #128	; 0x80
 8003e42:	d1ca      	bne.n	8003dda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e5a:	e02d      	b.n	8003eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f837 	bl	8003ed0 <I2C_IsAcknowledgeFailed>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e02d      	b.n	8003ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e72:	d021      	beq.n	8003eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e74:	f7fd fbe0 	bl	8001638 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d302      	bcc.n	8003e8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d116      	bne.n	8003eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	f043 0220 	orr.w	r2, r3, #32
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e007      	b.n	8003ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d1ca      	bne.n	8003e5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee6:	d11b      	bne.n	8003f20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ef0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	f043 0204 	orr.w	r2, r3, #4
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
	...

08003f30 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e128      	b.n	8004194 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a90      	ldr	r2, [pc, #576]	; (800419c <HAL_I2S_Init+0x26c>)
 8003f5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7fd f949 	bl	80011f4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2202      	movs	r2, #2
 8003f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6812      	ldr	r2, [r2, #0]
 8003f74:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f78:	f023 030f 	bic.w	r3, r3, #15
 8003f7c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2202      	movs	r2, #2
 8003f84:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d060      	beq.n	8004050 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d102      	bne.n	8003f9c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003f96:	2310      	movs	r3, #16
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	e001      	b.n	8003fa0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003f9c:	2320      	movs	r3, #32
 8003f9e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	d802      	bhi.n	8003fae <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003fae:	2001      	movs	r0, #1
 8003fb0:	f001 f9d2 	bl	8005358 <HAL_RCCEx_GetPeriphCLKFreq>
 8003fb4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fbe:	d125      	bne.n	800400c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d010      	beq.n	8003fea <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	461a      	mov	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe4:	3305      	adds	r3, #5
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	e01f      	b.n	800402a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	fbb2 f3f3 	udiv	r3, r2, r3
 8004006:	3305      	adds	r3, #5
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	e00e      	b.n	800402a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	fbb2 f2f3 	udiv	r2, r2, r3
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	461a      	mov	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	fbb2 f3f3 	udiv	r3, r2, r3
 8004026:	3305      	adds	r3, #5
 8004028:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4a5c      	ldr	r2, [pc, #368]	; (80041a0 <HAL_I2S_Init+0x270>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	08db      	lsrs	r3, r3, #3
 8004034:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	085b      	lsrs	r3, r3, #1
 8004046:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	61bb      	str	r3, [r7, #24]
 800404e:	e003      	b.n	8004058 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004050:	2302      	movs	r3, #2
 8004052:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d902      	bls.n	8004064 <HAL_I2S_Init+0x134>
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	2bff      	cmp	r3, #255	; 0xff
 8004062:	d907      	bls.n	8004074 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	f043 0210 	orr.w	r2, r3, #16
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e08f      	b.n	8004194 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	ea42 0103 	orr.w	r1, r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69fa      	ldr	r2, [r7, #28]
 8004084:	430a      	orrs	r2, r1
 8004086:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004092:	f023 030f 	bic.w	r3, r3, #15
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6851      	ldr	r1, [r2, #4]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6892      	ldr	r2, [r2, #8]
 800409e:	4311      	orrs	r1, r2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	68d2      	ldr	r2, [r2, #12]
 80040a4:	4311      	orrs	r1, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6992      	ldr	r2, [r2, #24]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040b6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d161      	bne.n	8004184 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a38      	ldr	r2, [pc, #224]	; (80041a4 <HAL_I2S_Init+0x274>)
 80040c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a37      	ldr	r2, [pc, #220]	; (80041a8 <HAL_I2S_Init+0x278>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d101      	bne.n	80040d4 <HAL_I2S_Init+0x1a4>
 80040d0:	4b36      	ldr	r3, [pc, #216]	; (80041ac <HAL_I2S_Init+0x27c>)
 80040d2:	e001      	b.n	80040d8 <HAL_I2S_Init+0x1a8>
 80040d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	4932      	ldr	r1, [pc, #200]	; (80041a8 <HAL_I2S_Init+0x278>)
 80040e0:	428a      	cmp	r2, r1
 80040e2:	d101      	bne.n	80040e8 <HAL_I2S_Init+0x1b8>
 80040e4:	4a31      	ldr	r2, [pc, #196]	; (80041ac <HAL_I2S_Init+0x27c>)
 80040e6:	e001      	b.n	80040ec <HAL_I2S_Init+0x1bc>
 80040e8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80040ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80040f0:	f023 030f 	bic.w	r3, r3, #15
 80040f4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a2b      	ldr	r2, [pc, #172]	; (80041a8 <HAL_I2S_Init+0x278>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d101      	bne.n	8004104 <HAL_I2S_Init+0x1d4>
 8004100:	4b2a      	ldr	r3, [pc, #168]	; (80041ac <HAL_I2S_Init+0x27c>)
 8004102:	e001      	b.n	8004108 <HAL_I2S_Init+0x1d8>
 8004104:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004108:	2202      	movs	r2, #2
 800410a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a25      	ldr	r2, [pc, #148]	; (80041a8 <HAL_I2S_Init+0x278>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d101      	bne.n	800411a <HAL_I2S_Init+0x1ea>
 8004116:	4b25      	ldr	r3, [pc, #148]	; (80041ac <HAL_I2S_Init+0x27c>)
 8004118:	e001      	b.n	800411e <HAL_I2S_Init+0x1ee>
 800411a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800412a:	d003      	beq.n	8004134 <HAL_I2S_Init+0x204>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d103      	bne.n	800413c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	e001      	b.n	8004140 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800413c:	2300      	movs	r3, #0
 800413e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800414a:	4313      	orrs	r3, r2
 800414c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004154:	4313      	orrs	r3, r2
 8004156:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800415e:	4313      	orrs	r3, r2
 8004160:	b29a      	uxth	r2, r3
 8004162:	897b      	ldrh	r3, [r7, #10]
 8004164:	4313      	orrs	r3, r2
 8004166:	b29b      	uxth	r3, r3
 8004168:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800416c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a0d      	ldr	r2, [pc, #52]	; (80041a8 <HAL_I2S_Init+0x278>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d101      	bne.n	800417c <HAL_I2S_Init+0x24c>
 8004178:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <HAL_I2S_Init+0x27c>)
 800417a:	e001      	b.n	8004180 <HAL_I2S_Init+0x250>
 800417c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004180:	897a      	ldrh	r2, [r7, #10]
 8004182:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3720      	adds	r7, #32
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	080042a7 	.word	0x080042a7
 80041a0:	cccccccd 	.word	0xcccccccd
 80041a4:	080043bd 	.word	0x080043bd
 80041a8:	40003800 	.word	0x40003800
 80041ac:	40003400 	.word	0x40003400

080041b0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	881a      	ldrh	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	1c9a      	adds	r2, r3, #2
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10e      	bne.n	8004240 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004230:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff ffb8 	bl	80041b0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004240:	bf00      	nop
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	b292      	uxth	r2, r2
 800425c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	1c9a      	adds	r2, r3, #2
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10e      	bne.n	800429e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800428e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7ff ff93 	bl	80041c4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b086      	sub	sp, #24
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d13a      	bne.n	8004338 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d109      	bne.n	80042e0 <I2S_IRQHandler+0x3a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d6:	2b40      	cmp	r3, #64	; 0x40
 80042d8:	d102      	bne.n	80042e0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff ffb4 	bl	8004248 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e6:	2b40      	cmp	r3, #64	; 0x40
 80042e8:	d126      	bne.n	8004338 <I2S_IRQHandler+0x92>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d11f      	bne.n	8004338 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004306:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004308:	2300      	movs	r3, #0
 800430a:	613b      	str	r3, [r7, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432a:	f043 0202 	orr.w	r2, r3, #2
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7ff ff50 	bl	80041d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b03      	cmp	r3, #3
 8004342:	d136      	bne.n	80043b2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b02      	cmp	r3, #2
 800434c:	d109      	bne.n	8004362 <I2S_IRQHandler+0xbc>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004358:	2b80      	cmp	r3, #128	; 0x80
 800435a:	d102      	bne.n	8004362 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff ff45 	bl	80041ec <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b08      	cmp	r3, #8
 800436a:	d122      	bne.n	80043b2 <I2S_IRQHandler+0x10c>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b20      	cmp	r3, #32
 8004378:	d11b      	bne.n	80043b2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004388:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a4:	f043 0204 	orr.w	r2, r3, #4
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff ff13 	bl	80041d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043b2:	bf00      	nop
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a92      	ldr	r2, [pc, #584]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d101      	bne.n	80043da <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80043d6:	4b92      	ldr	r3, [pc, #584]	; (8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043d8:	e001      	b.n	80043de <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80043da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a8b      	ldr	r2, [pc, #556]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d101      	bne.n	80043f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80043f4:	4b8a      	ldr	r3, [pc, #552]	; (8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043f6:	e001      	b.n	80043fc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80043f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004408:	d004      	beq.n	8004414 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f040 8099 	bne.w	8004546 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b02      	cmp	r3, #2
 800441c:	d107      	bne.n	800442e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f925 	bl	8004678 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b01      	cmp	r3, #1
 8004436:	d107      	bne.n	8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f9c8 	bl	80047d8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444e:	2b40      	cmp	r3, #64	; 0x40
 8004450:	d13a      	bne.n	80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b00      	cmp	r3, #0
 800445a:	d035      	beq.n	80044c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a6e      	ldr	r2, [pc, #440]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d101      	bne.n	800446a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004466:	4b6e      	ldr	r3, [pc, #440]	; (8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004468:	e001      	b.n	800446e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800446a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4969      	ldr	r1, [pc, #420]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004476:	428b      	cmp	r3, r1
 8004478:	d101      	bne.n	800447e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800447a:	4b69      	ldr	r3, [pc, #420]	; (8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800447c:	e001      	b.n	8004482 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800447e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004482:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004486:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004496:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004498:	2300      	movs	r3, #0
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	f043 0202 	orr.w	r2, r3, #2
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff fe88 	bl	80041d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	f040 80c3 	bne.w	800465a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 80bd 	beq.w	800465a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044ee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a49      	ldr	r2, [pc, #292]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d101      	bne.n	80044fe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80044fa:	4b49      	ldr	r3, [pc, #292]	; (8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044fc:	e001      	b.n	8004502 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80044fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4944      	ldr	r1, [pc, #272]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800450a:	428b      	cmp	r3, r1
 800450c:	d101      	bne.n	8004512 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800450e:	4b44      	ldr	r3, [pc, #272]	; (8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004510:	e001      	b.n	8004516 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004512:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004516:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800451a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800451c:	2300      	movs	r3, #0
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	60bb      	str	r3, [r7, #8]
 8004528:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004536:	f043 0204 	orr.w	r2, r3, #4
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff fe4a 	bl	80041d8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004544:	e089      	b.n	800465a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b02      	cmp	r3, #2
 800454e:	d107      	bne.n	8004560 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f8be 	bl	80046dc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b01      	cmp	r3, #1
 8004568:	d107      	bne.n	800457a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f8fd 	bl	8004774 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004580:	2b40      	cmp	r3, #64	; 0x40
 8004582:	d12f      	bne.n	80045e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d02a      	beq.n	80045e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800459c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a1e      	ldr	r2, [pc, #120]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d101      	bne.n	80045ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80045a8:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045aa:	e001      	b.n	80045b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80045ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4919      	ldr	r1, [pc, #100]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045b8:	428b      	cmp	r3, r1
 80045ba:	d101      	bne.n	80045c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80045bc:	4b18      	ldr	r3, [pc, #96]	; (8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045be:	e001      	b.n	80045c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80045c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d6:	f043 0202 	orr.w	r2, r3, #2
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff fdfa 	bl	80041d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d136      	bne.n	800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d031      	beq.n	800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a07      	ldr	r2, [pc, #28]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d101      	bne.n	8004606 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004602:	4b07      	ldr	r3, [pc, #28]	; (8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004604:	e001      	b.n	800460a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004606:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4902      	ldr	r1, [pc, #8]	; (800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004612:	428b      	cmp	r3, r1
 8004614:	d106      	bne.n	8004624 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004616:	4b02      	ldr	r3, [pc, #8]	; (8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004618:	e006      	b.n	8004628 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800461a:	bf00      	nop
 800461c:	40003800 	.word	0x40003800
 8004620:	40003400 	.word	0x40003400
 8004624:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004628:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800462c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800463c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	f043 0204 	orr.w	r2, r3, #4
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff fdc0 	bl	80041d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004658:	e000      	b.n	800465c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800465a:	bf00      	nop
}
 800465c:	bf00      	nop
 800465e:	3720      	adds	r7, #32
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	1c99      	adds	r1, r3, #2
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6251      	str	r1, [r2, #36]	; 0x24
 800468a:	881a      	ldrh	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d113      	bne.n	80046d2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d106      	bne.n	80046d2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7ff ffc9 	bl	8004664 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046d2:	bf00      	nop
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	1c99      	adds	r1, r3, #2
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6251      	str	r1, [r2, #36]	; 0x24
 80046ee:	8819      	ldrh	r1, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a1d      	ldr	r2, [pc, #116]	; (800476c <I2SEx_TxISR_I2SExt+0x90>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d101      	bne.n	80046fe <I2SEx_TxISR_I2SExt+0x22>
 80046fa:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <I2SEx_TxISR_I2SExt+0x94>)
 80046fc:	e001      	b.n	8004702 <I2SEx_TxISR_I2SExt+0x26>
 80046fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004702:	460a      	mov	r2, r1
 8004704:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d121      	bne.n	8004762 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a12      	ldr	r2, [pc, #72]	; (800476c <I2SEx_TxISR_I2SExt+0x90>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d101      	bne.n	800472c <I2SEx_TxISR_I2SExt+0x50>
 8004728:	4b11      	ldr	r3, [pc, #68]	; (8004770 <I2SEx_TxISR_I2SExt+0x94>)
 800472a:	e001      	b.n	8004730 <I2SEx_TxISR_I2SExt+0x54>
 800472c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	490d      	ldr	r1, [pc, #52]	; (800476c <I2SEx_TxISR_I2SExt+0x90>)
 8004738:	428b      	cmp	r3, r1
 800473a:	d101      	bne.n	8004740 <I2SEx_TxISR_I2SExt+0x64>
 800473c:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <I2SEx_TxISR_I2SExt+0x94>)
 800473e:	e001      	b.n	8004744 <I2SEx_TxISR_I2SExt+0x68>
 8004740:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004744:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004748:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800474e:	b29b      	uxth	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d106      	bne.n	8004762 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7ff ff81 	bl	8004664 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004762:	bf00      	nop
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40003800 	.word	0x40003800
 8004770:	40003400 	.word	0x40003400

08004774 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68d8      	ldr	r0, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	1c99      	adds	r1, r3, #2
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800478c:	b282      	uxth	r2, r0
 800478e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004794:	b29b      	uxth	r3, r3
 8004796:	3b01      	subs	r3, #1
 8004798:	b29a      	uxth	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d113      	bne.n	80047d0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047b6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff ff4a 	bl	8004664 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a20      	ldr	r2, [pc, #128]	; (8004868 <I2SEx_RxISR_I2SExt+0x90>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d101      	bne.n	80047ee <I2SEx_RxISR_I2SExt+0x16>
 80047ea:	4b20      	ldr	r3, [pc, #128]	; (800486c <I2SEx_RxISR_I2SExt+0x94>)
 80047ec:	e001      	b.n	80047f2 <I2SEx_RxISR_I2SExt+0x1a>
 80047ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047f2:	68d8      	ldr	r0, [r3, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	1c99      	adds	r1, r3, #2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80047fe:	b282      	uxth	r2, r0
 8004800:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d121      	bne.n	800485e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a12      	ldr	r2, [pc, #72]	; (8004868 <I2SEx_RxISR_I2SExt+0x90>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d101      	bne.n	8004828 <I2SEx_RxISR_I2SExt+0x50>
 8004824:	4b11      	ldr	r3, [pc, #68]	; (800486c <I2SEx_RxISR_I2SExt+0x94>)
 8004826:	e001      	b.n	800482c <I2SEx_RxISR_I2SExt+0x54>
 8004828:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	490d      	ldr	r1, [pc, #52]	; (8004868 <I2SEx_RxISR_I2SExt+0x90>)
 8004834:	428b      	cmp	r3, r1
 8004836:	d101      	bne.n	800483c <I2SEx_RxISR_I2SExt+0x64>
 8004838:	4b0c      	ldr	r3, [pc, #48]	; (800486c <I2SEx_RxISR_I2SExt+0x94>)
 800483a:	e001      	b.n	8004840 <I2SEx_RxISR_I2SExt+0x68>
 800483c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004840:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004844:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d106      	bne.n	800485e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff ff03 	bl	8004664 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800485e:	bf00      	nop
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40003800 	.word	0x40003800
 800486c:	40003400 	.word	0x40003400

08004870 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e267      	b.n	8004d52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d075      	beq.n	800497a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800488e:	4b88      	ldr	r3, [pc, #544]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 030c 	and.w	r3, r3, #12
 8004896:	2b04      	cmp	r3, #4
 8004898:	d00c      	beq.n	80048b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800489a:	4b85      	ldr	r3, [pc, #532]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d112      	bne.n	80048cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048a6:	4b82      	ldr	r3, [pc, #520]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048b2:	d10b      	bne.n	80048cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b4:	4b7e      	ldr	r3, [pc, #504]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d05b      	beq.n	8004978 <HAL_RCC_OscConfig+0x108>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d157      	bne.n	8004978 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e242      	b.n	8004d52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d4:	d106      	bne.n	80048e4 <HAL_RCC_OscConfig+0x74>
 80048d6:	4b76      	ldr	r3, [pc, #472]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a75      	ldr	r2, [pc, #468]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 80048dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	e01d      	b.n	8004920 <HAL_RCC_OscConfig+0xb0>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048ec:	d10c      	bne.n	8004908 <HAL_RCC_OscConfig+0x98>
 80048ee:	4b70      	ldr	r3, [pc, #448]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a6f      	ldr	r2, [pc, #444]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 80048f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	4b6d      	ldr	r3, [pc, #436]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a6c      	ldr	r2, [pc, #432]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 8004900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	e00b      	b.n	8004920 <HAL_RCC_OscConfig+0xb0>
 8004908:	4b69      	ldr	r3, [pc, #420]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a68      	ldr	r2, [pc, #416]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 800490e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	4b66      	ldr	r3, [pc, #408]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a65      	ldr	r2, [pc, #404]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 800491a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800491e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d013      	beq.n	8004950 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004928:	f7fc fe86 	bl	8001638 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004930:	f7fc fe82 	bl	8001638 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b64      	cmp	r3, #100	; 0x64
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e207      	b.n	8004d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004942:	4b5b      	ldr	r3, [pc, #364]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0f0      	beq.n	8004930 <HAL_RCC_OscConfig+0xc0>
 800494e:	e014      	b.n	800497a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fc fe72 	bl	8001638 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004958:	f7fc fe6e 	bl	8001638 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b64      	cmp	r3, #100	; 0x64
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e1f3      	b.n	8004d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800496a:	4b51      	ldr	r3, [pc, #324]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0xe8>
 8004976:	e000      	b.n	800497a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d063      	beq.n	8004a4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004986:	4b4a      	ldr	r3, [pc, #296]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 030c 	and.w	r3, r3, #12
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004992:	4b47      	ldr	r3, [pc, #284]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800499a:	2b08      	cmp	r3, #8
 800499c:	d11c      	bne.n	80049d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800499e:	4b44      	ldr	r3, [pc, #272]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d116      	bne.n	80049d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049aa:	4b41      	ldr	r3, [pc, #260]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d005      	beq.n	80049c2 <HAL_RCC_OscConfig+0x152>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d001      	beq.n	80049c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e1c7      	b.n	8004d52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c2:	4b3b      	ldr	r3, [pc, #236]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	4937      	ldr	r1, [pc, #220]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d6:	e03a      	b.n	8004a4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d020      	beq.n	8004a22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049e0:	4b34      	ldr	r3, [pc, #208]	; (8004ab4 <HAL_RCC_OscConfig+0x244>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e6:	f7fc fe27 	bl	8001638 <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ec:	e008      	b.n	8004a00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ee:	f7fc fe23 	bl	8001638 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e1a8      	b.n	8004d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a00:	4b2b      	ldr	r3, [pc, #172]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0f0      	beq.n	80049ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0c:	4b28      	ldr	r3, [pc, #160]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	4925      	ldr	r1, [pc, #148]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	600b      	str	r3, [r1, #0]
 8004a20:	e015      	b.n	8004a4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a22:	4b24      	ldr	r3, [pc, #144]	; (8004ab4 <HAL_RCC_OscConfig+0x244>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a28:	f7fc fe06 	bl	8001638 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a30:	f7fc fe02 	bl	8001638 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e187      	b.n	8004d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a42:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f0      	bne.n	8004a30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d036      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d016      	beq.n	8004a90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a62:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <HAL_RCC_OscConfig+0x248>)
 8004a64:	2201      	movs	r2, #1
 8004a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a68:	f7fc fde6 	bl	8001638 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a70:	f7fc fde2 	bl	8001638 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e167      	b.n	8004d52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a82:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <HAL_RCC_OscConfig+0x240>)
 8004a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0f0      	beq.n	8004a70 <HAL_RCC_OscConfig+0x200>
 8004a8e:	e01b      	b.n	8004ac8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a90:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <HAL_RCC_OscConfig+0x248>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a96:	f7fc fdcf 	bl	8001638 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a9c:	e00e      	b.n	8004abc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a9e:	f7fc fdcb 	bl	8001638 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d907      	bls.n	8004abc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e150      	b.n	8004d52 <HAL_RCC_OscConfig+0x4e2>
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	42470000 	.word	0x42470000
 8004ab8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004abc:	4b88      	ldr	r3, [pc, #544]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1ea      	bne.n	8004a9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 8097 	beq.w	8004c04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ada:	4b81      	ldr	r3, [pc, #516]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10f      	bne.n	8004b06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60bb      	str	r3, [r7, #8]
 8004aea:	4b7d      	ldr	r3, [pc, #500]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	4a7c      	ldr	r2, [pc, #496]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af4:	6413      	str	r3, [r2, #64]	; 0x40
 8004af6:	4b7a      	ldr	r3, [pc, #488]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afe:	60bb      	str	r3, [r7, #8]
 8004b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b02:	2301      	movs	r3, #1
 8004b04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b06:	4b77      	ldr	r3, [pc, #476]	; (8004ce4 <HAL_RCC_OscConfig+0x474>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d118      	bne.n	8004b44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b12:	4b74      	ldr	r3, [pc, #464]	; (8004ce4 <HAL_RCC_OscConfig+0x474>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a73      	ldr	r2, [pc, #460]	; (8004ce4 <HAL_RCC_OscConfig+0x474>)
 8004b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b1e:	f7fc fd8b 	bl	8001638 <HAL_GetTick>
 8004b22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b24:	e008      	b.n	8004b38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b26:	f7fc fd87 	bl	8001638 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e10c      	b.n	8004d52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b38:	4b6a      	ldr	r3, [pc, #424]	; (8004ce4 <HAL_RCC_OscConfig+0x474>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0f0      	beq.n	8004b26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d106      	bne.n	8004b5a <HAL_RCC_OscConfig+0x2ea>
 8004b4c:	4b64      	ldr	r3, [pc, #400]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b50:	4a63      	ldr	r2, [pc, #396]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004b52:	f043 0301 	orr.w	r3, r3, #1
 8004b56:	6713      	str	r3, [r2, #112]	; 0x70
 8004b58:	e01c      	b.n	8004b94 <HAL_RCC_OscConfig+0x324>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	2b05      	cmp	r3, #5
 8004b60:	d10c      	bne.n	8004b7c <HAL_RCC_OscConfig+0x30c>
 8004b62:	4b5f      	ldr	r3, [pc, #380]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b66:	4a5e      	ldr	r2, [pc, #376]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004b68:	f043 0304 	orr.w	r3, r3, #4
 8004b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b6e:	4b5c      	ldr	r3, [pc, #368]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b72:	4a5b      	ldr	r2, [pc, #364]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004b74:	f043 0301 	orr.w	r3, r3, #1
 8004b78:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7a:	e00b      	b.n	8004b94 <HAL_RCC_OscConfig+0x324>
 8004b7c:	4b58      	ldr	r3, [pc, #352]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	4a57      	ldr	r2, [pc, #348]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004b82:	f023 0301 	bic.w	r3, r3, #1
 8004b86:	6713      	str	r3, [r2, #112]	; 0x70
 8004b88:	4b55      	ldr	r3, [pc, #340]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8c:	4a54      	ldr	r2, [pc, #336]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004b8e:	f023 0304 	bic.w	r3, r3, #4
 8004b92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d015      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9c:	f7fc fd4c 	bl	8001638 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba2:	e00a      	b.n	8004bba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ba4:	f7fc fd48 	bl	8001638 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e0cb      	b.n	8004d52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bba:	4b49      	ldr	r3, [pc, #292]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0ee      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x334>
 8004bc6:	e014      	b.n	8004bf2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc8:	f7fc fd36 	bl	8001638 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bce:	e00a      	b.n	8004be6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bd0:	f7fc fd32 	bl	8001638 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e0b5      	b.n	8004d52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004be6:	4b3e      	ldr	r3, [pc, #248]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1ee      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bf2:	7dfb      	ldrb	r3, [r7, #23]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d105      	bne.n	8004c04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bf8:	4b39      	ldr	r3, [pc, #228]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	4a38      	ldr	r2, [pc, #224]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004bfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 80a1 	beq.w	8004d50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c0e:	4b34      	ldr	r3, [pc, #208]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 030c 	and.w	r3, r3, #12
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d05c      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d141      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c22:	4b31      	ldr	r3, [pc, #196]	; (8004ce8 <HAL_RCC_OscConfig+0x478>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c28:	f7fc fd06 	bl	8001638 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c30:	f7fc fd02 	bl	8001638 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e087      	b.n	8004d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c42:	4b27      	ldr	r3, [pc, #156]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1f0      	bne.n	8004c30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69da      	ldr	r2, [r3, #28]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	019b      	lsls	r3, r3, #6
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	085b      	lsrs	r3, r3, #1
 8004c66:	3b01      	subs	r3, #1
 8004c68:	041b      	lsls	r3, r3, #16
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	061b      	lsls	r3, r3, #24
 8004c72:	491b      	ldr	r1, [pc, #108]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c78:	4b1b      	ldr	r3, [pc, #108]	; (8004ce8 <HAL_RCC_OscConfig+0x478>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c7e:	f7fc fcdb 	bl	8001638 <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c86:	f7fc fcd7 	bl	8001638 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e05c      	b.n	8004d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c98:	4b11      	ldr	r3, [pc, #68]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0f0      	beq.n	8004c86 <HAL_RCC_OscConfig+0x416>
 8004ca4:	e054      	b.n	8004d50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca6:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <HAL_RCC_OscConfig+0x478>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cac:	f7fc fcc4 	bl	8001638 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb4:	f7fc fcc0 	bl	8001638 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e045      	b.n	8004d52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc6:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <HAL_RCC_OscConfig+0x470>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f0      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x444>
 8004cd2:	e03d      	b.n	8004d50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d107      	bne.n	8004cec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e038      	b.n	8004d52 <HAL_RCC_OscConfig+0x4e2>
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	40007000 	.word	0x40007000
 8004ce8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cec:	4b1b      	ldr	r3, [pc, #108]	; (8004d5c <HAL_RCC_OscConfig+0x4ec>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d028      	beq.n	8004d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d121      	bne.n	8004d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d11a      	bne.n	8004d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d111      	bne.n	8004d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d32:	085b      	lsrs	r3, r3, #1
 8004d34:	3b01      	subs	r3, #1
 8004d36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d107      	bne.n	8004d4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e000      	b.n	8004d52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40023800 	.word	0x40023800

08004d60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e0cc      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d74:	4b68      	ldr	r3, [pc, #416]	; (8004f18 <HAL_RCC_ClockConfig+0x1b8>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d90c      	bls.n	8004d9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d82:	4b65      	ldr	r3, [pc, #404]	; (8004f18 <HAL_RCC_ClockConfig+0x1b8>)
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d8a:	4b63      	ldr	r3, [pc, #396]	; (8004f18 <HAL_RCC_ClockConfig+0x1b8>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d001      	beq.n	8004d9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0b8      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d020      	beq.n	8004dea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d005      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004db4:	4b59      	ldr	r3, [pc, #356]	; (8004f1c <HAL_RCC_ClockConfig+0x1bc>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	4a58      	ldr	r2, [pc, #352]	; (8004f1c <HAL_RCC_ClockConfig+0x1bc>)
 8004dba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dcc:	4b53      	ldr	r3, [pc, #332]	; (8004f1c <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	4a52      	ldr	r2, [pc, #328]	; (8004f1c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd8:	4b50      	ldr	r3, [pc, #320]	; (8004f1c <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	494d      	ldr	r1, [pc, #308]	; (8004f1c <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d044      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d107      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfe:	4b47      	ldr	r3, [pc, #284]	; (8004f1c <HAL_RCC_ClockConfig+0x1bc>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d119      	bne.n	8004e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e07f      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d003      	beq.n	8004e1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d107      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e1e:	4b3f      	ldr	r3, [pc, #252]	; (8004f1c <HAL_RCC_ClockConfig+0x1bc>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d109      	bne.n	8004e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e06f      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e2e:	4b3b      	ldr	r3, [pc, #236]	; (8004f1c <HAL_RCC_ClockConfig+0x1bc>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e067      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e3e:	4b37      	ldr	r3, [pc, #220]	; (8004f1c <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f023 0203 	bic.w	r2, r3, #3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	4934      	ldr	r1, [pc, #208]	; (8004f1c <HAL_RCC_ClockConfig+0x1bc>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e50:	f7fc fbf2 	bl	8001638 <HAL_GetTick>
 8004e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e56:	e00a      	b.n	8004e6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e58:	f7fc fbee 	bl	8001638 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e04f      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e6e:	4b2b      	ldr	r3, [pc, #172]	; (8004f1c <HAL_RCC_ClockConfig+0x1bc>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 020c 	and.w	r2, r3, #12
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d1eb      	bne.n	8004e58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e80:	4b25      	ldr	r3, [pc, #148]	; (8004f18 <HAL_RCC_ClockConfig+0x1b8>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d20c      	bcs.n	8004ea8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e8e:	4b22      	ldr	r3, [pc, #136]	; (8004f18 <HAL_RCC_ClockConfig+0x1b8>)
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e96:	4b20      	ldr	r3, [pc, #128]	; (8004f18 <HAL_RCC_ClockConfig+0x1b8>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d001      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e032      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d008      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eb4:	4b19      	ldr	r3, [pc, #100]	; (8004f1c <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4916      	ldr	r1, [pc, #88]	; (8004f1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d009      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ed2:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	490e      	ldr	r1, [pc, #56]	; (8004f1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ee6:	f000 f821 	bl	8004f2c <HAL_RCC_GetSysClockFreq>
 8004eea:	4602      	mov	r2, r0
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	091b      	lsrs	r3, r3, #4
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	490a      	ldr	r1, [pc, #40]	; (8004f20 <HAL_RCC_ClockConfig+0x1c0>)
 8004ef8:	5ccb      	ldrb	r3, [r1, r3]
 8004efa:	fa22 f303 	lsr.w	r3, r2, r3
 8004efe:	4a09      	ldr	r2, [pc, #36]	; (8004f24 <HAL_RCC_ClockConfig+0x1c4>)
 8004f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f02:	4b09      	ldr	r3, [pc, #36]	; (8004f28 <HAL_RCC_ClockConfig+0x1c8>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fc fb52 	bl	80015b0 <HAL_InitTick>

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	40023c00 	.word	0x40023c00
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	0800a204 	.word	0x0800a204
 8004f24:	20000008 	.word	0x20000008
 8004f28:	2000000c 	.word	0x2000000c

08004f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f30:	b094      	sub	sp, #80	; 0x50
 8004f32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	647b      	str	r3, [r7, #68]	; 0x44
 8004f38:	2300      	movs	r3, #0
 8004f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f44:	4b79      	ldr	r3, [pc, #484]	; (800512c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f003 030c 	and.w	r3, r3, #12
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d00d      	beq.n	8004f6c <HAL_RCC_GetSysClockFreq+0x40>
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	f200 80e1 	bhi.w	8005118 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <HAL_RCC_GetSysClockFreq+0x34>
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d003      	beq.n	8004f66 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f5e:	e0db      	b.n	8005118 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f60:	4b73      	ldr	r3, [pc, #460]	; (8005130 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004f64:	e0db      	b.n	800511e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f66:	4b73      	ldr	r3, [pc, #460]	; (8005134 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f6a:	e0d8      	b.n	800511e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f6c:	4b6f      	ldr	r3, [pc, #444]	; (800512c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f76:	4b6d      	ldr	r3, [pc, #436]	; (800512c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d063      	beq.n	800504a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f82:	4b6a      	ldr	r3, [pc, #424]	; (800512c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	099b      	lsrs	r3, r3, #6
 8004f88:	2200      	movs	r2, #0
 8004f8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f94:	633b      	str	r3, [r7, #48]	; 0x30
 8004f96:	2300      	movs	r3, #0
 8004f98:	637b      	str	r3, [r7, #52]	; 0x34
 8004f9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f9e:	4622      	mov	r2, r4
 8004fa0:	462b      	mov	r3, r5
 8004fa2:	f04f 0000 	mov.w	r0, #0
 8004fa6:	f04f 0100 	mov.w	r1, #0
 8004faa:	0159      	lsls	r1, r3, #5
 8004fac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fb0:	0150      	lsls	r0, r2, #5
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4621      	mov	r1, r4
 8004fb8:	1a51      	subs	r1, r2, r1
 8004fba:	6139      	str	r1, [r7, #16]
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	eb63 0301 	sbc.w	r3, r3, r1
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	f04f 0200 	mov.w	r2, #0
 8004fc8:	f04f 0300 	mov.w	r3, #0
 8004fcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fd0:	4659      	mov	r1, fp
 8004fd2:	018b      	lsls	r3, r1, #6
 8004fd4:	4651      	mov	r1, sl
 8004fd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fda:	4651      	mov	r1, sl
 8004fdc:	018a      	lsls	r2, r1, #6
 8004fde:	4651      	mov	r1, sl
 8004fe0:	ebb2 0801 	subs.w	r8, r2, r1
 8004fe4:	4659      	mov	r1, fp
 8004fe6:	eb63 0901 	sbc.w	r9, r3, r1
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ff6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ffa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ffe:	4690      	mov	r8, r2
 8005000:	4699      	mov	r9, r3
 8005002:	4623      	mov	r3, r4
 8005004:	eb18 0303 	adds.w	r3, r8, r3
 8005008:	60bb      	str	r3, [r7, #8]
 800500a:	462b      	mov	r3, r5
 800500c:	eb49 0303 	adc.w	r3, r9, r3
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800501e:	4629      	mov	r1, r5
 8005020:	024b      	lsls	r3, r1, #9
 8005022:	4621      	mov	r1, r4
 8005024:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005028:	4621      	mov	r1, r4
 800502a:	024a      	lsls	r2, r1, #9
 800502c:	4610      	mov	r0, r2
 800502e:	4619      	mov	r1, r3
 8005030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005032:	2200      	movs	r2, #0
 8005034:	62bb      	str	r3, [r7, #40]	; 0x28
 8005036:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005038:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800503c:	f7fb f920 	bl	8000280 <__aeabi_uldivmod>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4613      	mov	r3, r2
 8005046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005048:	e058      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800504a:	4b38      	ldr	r3, [pc, #224]	; (800512c <HAL_RCC_GetSysClockFreq+0x200>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	099b      	lsrs	r3, r3, #6
 8005050:	2200      	movs	r2, #0
 8005052:	4618      	mov	r0, r3
 8005054:	4611      	mov	r1, r2
 8005056:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800505a:	623b      	str	r3, [r7, #32]
 800505c:	2300      	movs	r3, #0
 800505e:	627b      	str	r3, [r7, #36]	; 0x24
 8005060:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005064:	4642      	mov	r2, r8
 8005066:	464b      	mov	r3, r9
 8005068:	f04f 0000 	mov.w	r0, #0
 800506c:	f04f 0100 	mov.w	r1, #0
 8005070:	0159      	lsls	r1, r3, #5
 8005072:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005076:	0150      	lsls	r0, r2, #5
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4641      	mov	r1, r8
 800507e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005082:	4649      	mov	r1, r9
 8005084:	eb63 0b01 	sbc.w	fp, r3, r1
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005094:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005098:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800509c:	ebb2 040a 	subs.w	r4, r2, sl
 80050a0:	eb63 050b 	sbc.w	r5, r3, fp
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	00eb      	lsls	r3, r5, #3
 80050ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050b2:	00e2      	lsls	r2, r4, #3
 80050b4:	4614      	mov	r4, r2
 80050b6:	461d      	mov	r5, r3
 80050b8:	4643      	mov	r3, r8
 80050ba:	18e3      	adds	r3, r4, r3
 80050bc:	603b      	str	r3, [r7, #0]
 80050be:	464b      	mov	r3, r9
 80050c0:	eb45 0303 	adc.w	r3, r5, r3
 80050c4:	607b      	str	r3, [r7, #4]
 80050c6:	f04f 0200 	mov.w	r2, #0
 80050ca:	f04f 0300 	mov.w	r3, #0
 80050ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050d2:	4629      	mov	r1, r5
 80050d4:	028b      	lsls	r3, r1, #10
 80050d6:	4621      	mov	r1, r4
 80050d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050dc:	4621      	mov	r1, r4
 80050de:	028a      	lsls	r2, r1, #10
 80050e0:	4610      	mov	r0, r2
 80050e2:	4619      	mov	r1, r3
 80050e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050e6:	2200      	movs	r2, #0
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	61fa      	str	r2, [r7, #28]
 80050ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050f0:	f7fb f8c6 	bl	8000280 <__aeabi_uldivmod>
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	4613      	mov	r3, r2
 80050fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050fc:	4b0b      	ldr	r3, [pc, #44]	; (800512c <HAL_RCC_GetSysClockFreq+0x200>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	0c1b      	lsrs	r3, r3, #16
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	3301      	adds	r3, #1
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800510c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800510e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005110:	fbb2 f3f3 	udiv	r3, r2, r3
 8005114:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005116:	e002      	b.n	800511e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005118:	4b05      	ldr	r3, [pc, #20]	; (8005130 <HAL_RCC_GetSysClockFreq+0x204>)
 800511a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800511c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800511e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005120:	4618      	mov	r0, r3
 8005122:	3750      	adds	r7, #80	; 0x50
 8005124:	46bd      	mov	sp, r7
 8005126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800512a:	bf00      	nop
 800512c:	40023800 	.word	0x40023800
 8005130:	00f42400 	.word	0x00f42400
 8005134:	007a1200 	.word	0x007a1200

08005138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800513c:	4b03      	ldr	r3, [pc, #12]	; (800514c <HAL_RCC_GetHCLKFreq+0x14>)
 800513e:	681b      	ldr	r3, [r3, #0]
}
 8005140:	4618      	mov	r0, r3
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	20000008 	.word	0x20000008

08005150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005154:	f7ff fff0 	bl	8005138 <HAL_RCC_GetHCLKFreq>
 8005158:	4602      	mov	r2, r0
 800515a:	4b05      	ldr	r3, [pc, #20]	; (8005170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	0a9b      	lsrs	r3, r3, #10
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	4903      	ldr	r1, [pc, #12]	; (8005174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005166:	5ccb      	ldrb	r3, [r1, r3]
 8005168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800516c:	4618      	mov	r0, r3
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40023800 	.word	0x40023800
 8005174:	0800a214 	.word	0x0800a214

08005178 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d105      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800519c:	2b00      	cmp	r3, #0
 800519e:	d038      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051a0:	4b68      	ldr	r3, [pc, #416]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051a6:	f7fc fa47 	bl	8001638 <HAL_GetTick>
 80051aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051ac:	e008      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051ae:	f7fc fa43 	bl	8001638 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e0bd      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051c0:	4b61      	ldr	r3, [pc, #388]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1f0      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	019b      	lsls	r3, r3, #6
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	071b      	lsls	r3, r3, #28
 80051de:	495a      	ldr	r1, [pc, #360]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051e6:	4b57      	ldr	r3, [pc, #348]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80051e8:	2201      	movs	r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051ec:	f7fc fa24 	bl	8001638 <HAL_GetTick>
 80051f0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051f2:	e008      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051f4:	f7fc fa20 	bl	8001638 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e09a      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005206:	4b50      	ldr	r3, [pc, #320]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0f0      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 8083 	beq.w	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	4b48      	ldr	r3, [pc, #288]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	4a47      	ldr	r2, [pc, #284]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800522a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800522e:	6413      	str	r3, [r2, #64]	; 0x40
 8005230:	4b45      	ldr	r3, [pc, #276]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800523c:	4b43      	ldr	r3, [pc, #268]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a42      	ldr	r2, [pc, #264]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005246:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005248:	f7fc f9f6 	bl	8001638 <HAL_GetTick>
 800524c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005250:	f7fc f9f2 	bl	8001638 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e06c      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005262:	4b3a      	ldr	r3, [pc, #232]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f0      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800526e:	4b36      	ldr	r3, [pc, #216]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005276:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d02f      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x166>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	429a      	cmp	r2, r3
 800528a:	d028      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800528c:	4b2e      	ldr	r3, [pc, #184]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800528e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005294:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005296:	4b2e      	ldr	r3, [pc, #184]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005298:	2201      	movs	r2, #1
 800529a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800529c:	4b2c      	ldr	r3, [pc, #176]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052a2:	4a29      	ldr	r2, [pc, #164]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052a8:	4b27      	ldr	r3, [pc, #156]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d114      	bne.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052b4:	f7fc f9c0 	bl	8001638 <HAL_GetTick>
 80052b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ba:	e00a      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052bc:	f7fc f9bc 	bl	8001638 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e034      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d2:	4b1d      	ldr	r3, [pc, #116]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0ee      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ea:	d10d      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80052ec:	4b16      	ldr	r3, [pc, #88]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80052fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005300:	4911      	ldr	r1, [pc, #68]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005302:	4313      	orrs	r3, r2
 8005304:	608b      	str	r3, [r1, #8]
 8005306:	e005      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005308:	4b0f      	ldr	r3, [pc, #60]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	4a0e      	ldr	r2, [pc, #56]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800530e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005312:	6093      	str	r3, [r2, #8]
 8005314:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005316:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005320:	4909      	ldr	r1, [pc, #36]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005322:	4313      	orrs	r3, r2
 8005324:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	7d1a      	ldrb	r2, [r3, #20]
 8005336:	4b07      	ldr	r3, [pc, #28]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005338:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	42470068 	.word	0x42470068
 8005348:	40023800 	.word	0x40023800
 800534c:	40007000 	.word	0x40007000
 8005350:	42470e40 	.word	0x42470e40
 8005354:	424711e0 	.word	0x424711e0

08005358 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d140      	bne.n	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005376:	4b24      	ldr	r3, [pc, #144]	; (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d005      	beq.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d131      	bne.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800538c:	4b1f      	ldr	r3, [pc, #124]	; (800540c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800538e:	617b      	str	r3, [r7, #20]
          break;
 8005390:	e031      	b.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005392:	4b1d      	ldr	r3, [pc, #116]	; (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800539a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800539e:	d109      	bne.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80053a0:	4b19      	ldr	r3, [pc, #100]	; (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053aa:	4a19      	ldr	r2, [pc, #100]	; (8005410 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80053ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	e008      	b.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80053b4:	4b14      	ldr	r3, [pc, #80]	; (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053be:	4a15      	ldr	r2, [pc, #84]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80053c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c4:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80053c6:	4b10      	ldr	r3, [pc, #64]	; (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053cc:	099b      	lsrs	r3, r3, #6
 80053ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	fb02 f303 	mul.w	r3, r2, r3
 80053d8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80053da:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053e0:	0f1b      	lsrs	r3, r3, #28
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ec:	617b      	str	r3, [r7, #20]
          break;
 80053ee:	e002      	b.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	617b      	str	r3, [r7, #20]
          break;
 80053f4:	bf00      	nop
        }
      }
      break;
 80053f6:	bf00      	nop
    }
  }
  return frequency;
 80053f8:	697b      	ldr	r3, [r7, #20]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40023800 	.word	0x40023800
 800540c:	00bb8000 	.word	0x00bb8000
 8005410:	007a1200 	.word	0x007a1200
 8005414:	00f42400 	.word	0x00f42400

08005418 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e07b      	b.n	8005522 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	2b00      	cmp	r3, #0
 8005430:	d108      	bne.n	8005444 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800543a:	d009      	beq.n	8005450 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	61da      	str	r2, [r3, #28]
 8005442:	e005      	b.n	8005450 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7fb ff90 	bl	8001390 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005486:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005498:	431a      	orrs	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d4:	ea42 0103 	orr.w	r1, r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	0c1b      	lsrs	r3, r3, #16
 80054ee:	f003 0104 	and.w	r1, r3, #4
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	f003 0210 	and.w	r2, r3, #16
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69da      	ldr	r2, [r3, #28]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005510:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800552a:	b084      	sub	sp, #16
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	f107 001c 	add.w	r0, r7, #28
 8005538:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800553c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553e:	2b01      	cmp	r3, #1
 8005540:	d122      	bne.n	8005588 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005546:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800556a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800556c:	2b01      	cmp	r3, #1
 800556e:	d105      	bne.n	800557c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f9bf 	bl	8005900 <USB_CoreReset>
 8005582:	4603      	mov	r3, r0
 8005584:	73fb      	strb	r3, [r7, #15]
 8005586:	e01a      	b.n	80055be <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f9b3 	bl	8005900 <USB_CoreReset>
 800559a:	4603      	mov	r3, r0
 800559c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800559e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d106      	bne.n	80055b2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	639a      	str	r2, [r3, #56]	; 0x38
 80055b0:	e005      	b.n	80055be <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d10b      	bne.n	80055dc <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f043 0206 	orr.w	r2, r3, #6
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f043 0220 	orr.w	r2, r3, #32
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055e8:	b004      	add	sp, #16
 80055ea:	4770      	bx	lr

080055ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f043 0201 	orr.w	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f023 0201 	bic.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800564c:	78fb      	ldrb	r3, [r7, #3]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d115      	bne.n	800567e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800565e:	2001      	movs	r0, #1
 8005660:	f7fb fff6 	bl	8001650 <HAL_Delay>
      ms++;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3301      	adds	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f939 	bl	80058e2 <USB_GetMode>
 8005670:	4603      	mov	r3, r0
 8005672:	2b01      	cmp	r3, #1
 8005674:	d01e      	beq.n	80056b4 <USB_SetCurrentMode+0x84>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b31      	cmp	r3, #49	; 0x31
 800567a:	d9f0      	bls.n	800565e <USB_SetCurrentMode+0x2e>
 800567c:	e01a      	b.n	80056b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800567e:	78fb      	ldrb	r3, [r7, #3]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d115      	bne.n	80056b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005690:	2001      	movs	r0, #1
 8005692:	f7fb ffdd 	bl	8001650 <HAL_Delay>
      ms++;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3301      	adds	r3, #1
 800569a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f920 	bl	80058e2 <USB_GetMode>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <USB_SetCurrentMode+0x84>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b31      	cmp	r3, #49	; 0x31
 80056ac:	d9f0      	bls.n	8005690 <USB_SetCurrentMode+0x60>
 80056ae:	e001      	b.n	80056b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e005      	b.n	80056c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b32      	cmp	r3, #50	; 0x32
 80056b8:	d101      	bne.n	80056be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3301      	adds	r3, #1
 80056da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4a13      	ldr	r2, [pc, #76]	; (800572c <USB_FlushTxFifo+0x64>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d901      	bls.n	80056e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e01b      	b.n	8005720 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	daf2      	bge.n	80056d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	019b      	lsls	r3, r3, #6
 80056f8:	f043 0220 	orr.w	r2, r3, #32
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3301      	adds	r3, #1
 8005704:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4a08      	ldr	r2, [pc, #32]	; (800572c <USB_FlushTxFifo+0x64>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d901      	bls.n	8005712 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e006      	b.n	8005720 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b20      	cmp	r3, #32
 800571c:	d0f0      	beq.n	8005700 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	00030d40 	.word	0x00030d40

08005730 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3301      	adds	r3, #1
 8005740:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4a11      	ldr	r2, [pc, #68]	; (800578c <USB_FlushRxFifo+0x5c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d901      	bls.n	800574e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e018      	b.n	8005780 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	daf2      	bge.n	800573c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2210      	movs	r2, #16
 800575e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	3301      	adds	r3, #1
 8005764:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4a08      	ldr	r2, [pc, #32]	; (800578c <USB_FlushRxFifo+0x5c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d901      	bls.n	8005772 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e006      	b.n	8005780 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 0310 	and.w	r3, r3, #16
 800577a:	2b10      	cmp	r3, #16
 800577c:	d0f0      	beq.n	8005760 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	00030d40 	.word	0x00030d40

08005790 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005790:	b480      	push	{r7}
 8005792:	b089      	sub	sp, #36	; 0x24
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	4611      	mov	r1, r2
 800579c:	461a      	mov	r2, r3
 800579e:	460b      	mov	r3, r1
 80057a0:	71fb      	strb	r3, [r7, #7]
 80057a2:	4613      	mov	r3, r2
 80057a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80057ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d123      	bne.n	80057fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057b6:	88bb      	ldrh	r3, [r7, #4]
 80057b8:	3303      	adds	r3, #3
 80057ba:	089b      	lsrs	r3, r3, #2
 80057bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057be:	2300      	movs	r3, #0
 80057c0:	61bb      	str	r3, [r7, #24]
 80057c2:	e018      	b.n	80057f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057c4:	79fb      	ldrb	r3, [r7, #7]
 80057c6:	031a      	lsls	r2, r3, #12
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057d0:	461a      	mov	r2, r3
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	3301      	adds	r3, #1
 80057dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	3301      	adds	r3, #1
 80057e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	3301      	adds	r3, #1
 80057e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	3301      	adds	r3, #1
 80057ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	3301      	adds	r3, #1
 80057f4:	61bb      	str	r3, [r7, #24]
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d3e2      	bcc.n	80057c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3724      	adds	r7, #36	; 0x24
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800580c:	b480      	push	{r7}
 800580e:	b08b      	sub	sp, #44	; 0x2c
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	4613      	mov	r3, r2
 8005818:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005822:	88fb      	ldrh	r3, [r7, #6]
 8005824:	089b      	lsrs	r3, r3, #2
 8005826:	b29b      	uxth	r3, r3
 8005828:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800582a:	88fb      	ldrh	r3, [r7, #6]
 800582c:	f003 0303 	and.w	r3, r3, #3
 8005830:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005832:	2300      	movs	r3, #0
 8005834:	623b      	str	r3, [r7, #32]
 8005836:	e014      	b.n	8005862 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	601a      	str	r2, [r3, #0]
    pDest++;
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	3301      	adds	r3, #1
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	3301      	adds	r3, #1
 800584e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	3301      	adds	r3, #1
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	3301      	adds	r3, #1
 800585a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	3301      	adds	r3, #1
 8005860:	623b      	str	r3, [r7, #32]
 8005862:	6a3a      	ldr	r2, [r7, #32]
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	429a      	cmp	r2, r3
 8005868:	d3e6      	bcc.n	8005838 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800586a:	8bfb      	ldrh	r3, [r7, #30]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01e      	beq.n	80058ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800587a:	461a      	mov	r2, r3
 800587c:	f107 0310 	add.w	r3, r7, #16
 8005880:	6812      	ldr	r2, [r2, #0]
 8005882:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	fa22 f303 	lsr.w	r3, r2, r3
 8005890:	b2da      	uxtb	r2, r3
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	701a      	strb	r2, [r3, #0]
      i++;
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	3301      	adds	r3, #1
 800589a:	623b      	str	r3, [r7, #32]
      pDest++;
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	3301      	adds	r3, #1
 80058a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80058a2:	8bfb      	ldrh	r3, [r7, #30]
 80058a4:	3b01      	subs	r3, #1
 80058a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80058a8:	8bfb      	ldrh	r3, [r7, #30]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1ea      	bne.n	8005884 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	372c      	adds	r7, #44	; 0x2c
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4013      	ands	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80058d4:	68fb      	ldr	r3, [r7, #12]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	f003 0301 	and.w	r3, r3, #1
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
	...

08005900 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3301      	adds	r3, #1
 8005910:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4a13      	ldr	r2, [pc, #76]	; (8005964 <USB_CoreReset+0x64>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d901      	bls.n	800591e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e01b      	b.n	8005956 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	daf2      	bge.n	800590c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f043 0201 	orr.w	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3301      	adds	r3, #1
 800593a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4a09      	ldr	r2, [pc, #36]	; (8005964 <USB_CoreReset+0x64>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d901      	bls.n	8005948 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e006      	b.n	8005956 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b01      	cmp	r3, #1
 8005952:	d0f0      	beq.n	8005936 <USB_CoreReset+0x36>

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	00030d40 	.word	0x00030d40

08005968 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005968:	b084      	sub	sp, #16
 800596a:	b580      	push	{r7, lr}
 800596c:	b086      	sub	sp, #24
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005988:	461a      	mov	r2, r3
 800598a:	2300      	movs	r3, #0
 800598c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d018      	beq.n	80059f0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80059be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d10a      	bne.n	80059da <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059d2:	f043 0304 	orr.w	r3, r3, #4
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	e014      	b.n	8005a04 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059e8:	f023 0304 	bic.w	r3, r3, #4
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	e009      	b.n	8005a04 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059fe:	f023 0304 	bic.w	r3, r3, #4
 8005a02:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a04:	2110      	movs	r1, #16
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff fe5e 	bl	80056c8 <USB_FlushTxFifo>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff fe8a 	bl	8005730 <USB_FlushRxFifo>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a26:	2300      	movs	r3, #0
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	e015      	b.n	8005a58 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a3e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	3301      	adds	r3, #1
 8005a56:	613b      	str	r3, [r7, #16]
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d3e5      	bcc.n	8005a2c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a6c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00b      	beq.n	8005a92 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a80:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a13      	ldr	r2, [pc, #76]	; (8005ad4 <USB_HostInit+0x16c>)
 8005a86:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a13      	ldr	r2, [pc, #76]	; (8005ad8 <USB_HostInit+0x170>)
 8005a8c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005a90:	e009      	b.n	8005aa6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2280      	movs	r2, #128	; 0x80
 8005a96:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a10      	ldr	r2, [pc, #64]	; (8005adc <USB_HostInit+0x174>)
 8005a9c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a0f      	ldr	r2, [pc, #60]	; (8005ae0 <USB_HostInit+0x178>)
 8005aa2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d105      	bne.n	8005ab8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	f043 0210 	orr.w	r2, r3, #16
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	699a      	ldr	r2, [r3, #24]
 8005abc:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <USB_HostInit+0x17c>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ad0:	b004      	add	sp, #16
 8005ad2:	4770      	bx	lr
 8005ad4:	01000200 	.word	0x01000200
 8005ad8:	00e00300 	.word	0x00e00300
 8005adc:	00600080 	.word	0x00600080
 8005ae0:	004000e0 	.word	0x004000e0
 8005ae4:	a3200008 	.word	0xa3200008

08005ae8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	460b      	mov	r3, r1
 8005af2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b06:	f023 0303 	bic.w	r3, r3, #3
 8005b0a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	78fb      	ldrb	r3, [r7, #3]
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	68f9      	ldr	r1, [r7, #12]
 8005b1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b20:	4313      	orrs	r3, r2
 8005b22:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005b24:	78fb      	ldrb	r3, [r7, #3]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d107      	bne.n	8005b3a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b30:	461a      	mov	r2, r3
 8005b32:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005b36:	6053      	str	r3, [r2, #4]
 8005b38:	e009      	b.n	8005b4e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005b3a:	78fb      	ldrb	r3, [r7, #3]
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d106      	bne.n	8005b4e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b46:	461a      	mov	r2, r3
 8005b48:	f241 7370 	movw	r3, #6000	; 0x1770
 8005b4c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b7c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b8a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005b8c:	2064      	movs	r0, #100	; 0x64
 8005b8e:	f7fb fd5f 	bl	8001650 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b9e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005ba0:	200a      	movs	r0, #10
 8005ba2:	f7fb fd55 	bl	8001650 <HAL_Delay>

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005bd4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d109      	bne.n	8005bf4 <USB_DriveVbus+0x44>
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d106      	bne.n	8005bf4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005bee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005bf2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfe:	d109      	bne.n	8005c14 <USB_DriveVbus+0x64>
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c12:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b085      	sub	sp, #20
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	0c5b      	lsrs	r3, r3, #17
 8005c40:	f003 0303 	and.w	r3, r3, #3
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	b29b      	uxth	r3, r3
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
	...

08005c74 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	4608      	mov	r0, r1
 8005c7e:	4611      	mov	r1, r2
 8005c80:	461a      	mov	r2, r3
 8005c82:	4603      	mov	r3, r0
 8005c84:	70fb      	strb	r3, [r7, #3]
 8005c86:	460b      	mov	r3, r1
 8005c88:	70bb      	strb	r3, [r7, #2]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005c96:	78fb      	ldrb	r3, [r7, #3]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ca8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005caa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d87e      	bhi.n	8005db0 <USB_HC_Init+0x13c>
 8005cb2:	a201      	add	r2, pc, #4	; (adr r2, 8005cb8 <USB_HC_Init+0x44>)
 8005cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb8:	08005cc9 	.word	0x08005cc9
 8005cbc:	08005d73 	.word	0x08005d73
 8005cc0:	08005cc9 	.word	0x08005cc9
 8005cc4:	08005d35 	.word	0x08005d35
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f240 439d 	movw	r3, #1181	; 0x49d
 8005cda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005cdc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	da10      	bge.n	8005d06 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	78fa      	ldrb	r2, [r7, #3]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d02:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005d04:	e057      	b.n	8005db6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d051      	beq.n	8005db6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005d12:	78fb      	ldrb	r3, [r7, #3]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	78fa      	ldrb	r2, [r7, #3]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d30:	60d3      	str	r3, [r2, #12]
      break;
 8005d32:	e040      	b.n	8005db6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d34:	78fb      	ldrb	r3, [r7, #3]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d40:	461a      	mov	r2, r3
 8005d42:	f240 639d 	movw	r3, #1693	; 0x69d
 8005d46:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d48:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	da34      	bge.n	8005dba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d50:	78fb      	ldrb	r3, [r7, #3]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	78fa      	ldrb	r2, [r7, #3]
 8005d60:	0151      	lsls	r1, r2, #5
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	440a      	add	r2, r1
 8005d66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d6e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005d70:	e023      	b.n	8005dba <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f240 2325 	movw	r3, #549	; 0x225
 8005d84:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d86:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	da17      	bge.n	8005dbe <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005d8e:	78fb      	ldrb	r3, [r7, #3]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	78fa      	ldrb	r2, [r7, #3]
 8005d9e:	0151      	lsls	r1, r2, #5
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	440a      	add	r2, r1
 8005da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005da8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005dac:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005dae:	e006      	b.n	8005dbe <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	77fb      	strb	r3, [r7, #31]
      break;
 8005db4:	e004      	b.n	8005dc0 <USB_HC_Init+0x14c>
      break;
 8005db6:	bf00      	nop
 8005db8:	e002      	b.n	8005dc0 <USB_HC_Init+0x14c>
      break;
 8005dba:	bf00      	nop
 8005dbc:	e000      	b.n	8005dc0 <USB_HC_Init+0x14c>
      break;
 8005dbe:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005dc0:	78fb      	ldrb	r3, [r7, #3]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	78fa      	ldrb	r2, [r7, #3]
 8005dd0:	0151      	lsls	r1, r2, #5
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	440a      	add	r2, r1
 8005dd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dda:	f043 0302 	orr.w	r3, r3, #2
 8005dde:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005de6:	699a      	ldr	r2, [r3, #24]
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	2101      	movs	r1, #1
 8005df0:	fa01 f303 	lsl.w	r3, r1, r3
 8005df4:	6939      	ldr	r1, [r7, #16]
 8005df6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005e0a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	da03      	bge.n	8005e1a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e16:	61bb      	str	r3, [r7, #24]
 8005e18:	e001      	b.n	8005e1e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff feff 	bl	8005c22 <USB_GetHostSpeed>
 8005e24:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005e26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d106      	bne.n	8005e3c <USB_HC_Init+0x1c8>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d003      	beq.n	8005e3c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e38:	617b      	str	r3, [r7, #20]
 8005e3a:	e001      	b.n	8005e40 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e40:	787b      	ldrb	r3, [r7, #1]
 8005e42:	059b      	lsls	r3, r3, #22
 8005e44:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e48:	78bb      	ldrb	r3, [r7, #2]
 8005e4a:	02db      	lsls	r3, r3, #11
 8005e4c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e50:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e56:	049b      	lsls	r3, r3, #18
 8005e58:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e5c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e5e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005e60:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e64:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	0159      	lsls	r1, r3, #5
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	440b      	add	r3, r1
 8005e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e76:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e7c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005e7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d003      	beq.n	8005e8e <USB_HC_Init+0x21a>
 8005e86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d10f      	bne.n	8005eae <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005e8e:	78fb      	ldrb	r3, [r7, #3]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	78fa      	ldrb	r2, [r7, #3]
 8005e9e:	0151      	lsls	r1, r2, #5
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	440a      	add	r2, r1
 8005ea4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ea8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005eac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005eae:	7ffb      	ldrb	r3, [r7, #31]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3720      	adds	r7, #32
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08c      	sub	sp, #48	; 0x30
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	785b      	ldrb	r3, [r3, #1]
 8005ece:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005ed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ed4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d02d      	beq.n	8005f3e <USB_HC_StartXfer+0x86>
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	791b      	ldrb	r3, [r3, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d129      	bne.n	8005f3e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005eea:	79fb      	ldrb	r3, [r7, #7]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d117      	bne.n	8005f20 <USB_HC_StartXfer+0x68>
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	79db      	ldrb	r3, [r3, #7]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <USB_HC_StartXfer+0x48>
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	79db      	ldrb	r3, [r3, #7]
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d10f      	bne.n	8005f20 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	69fa      	ldr	r2, [r7, #28]
 8005f10:	0151      	lsls	r1, r2, #5
 8005f12:	6a3a      	ldr	r2, [r7, #32]
 8005f14:	440a      	add	r2, r1
 8005f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005f20:	79fb      	ldrb	r3, [r7, #7]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10b      	bne.n	8005f3e <USB_HC_StartXfer+0x86>
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	795b      	ldrb	r3, [r3, #5]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d107      	bne.n	8005f3e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	785b      	ldrb	r3, [r3, #1]
 8005f32:	4619      	mov	r1, r3
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 fa0f 	bl	8006358 <USB_DoPing>
      return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	e0f8      	b.n	8006130 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d018      	beq.n	8005f78 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	8912      	ldrh	r2, [r2, #8]
 8005f4e:	4413      	add	r3, r2
 8005f50:	3b01      	subs	r3, #1
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	8912      	ldrh	r2, [r2, #8]
 8005f56:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f5a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005f5c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005f5e:	8b7b      	ldrh	r3, [r7, #26]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d90b      	bls.n	8005f7c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005f64:	8b7b      	ldrh	r3, [r7, #26]
 8005f66:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	8912      	ldrh	r2, [r2, #8]
 8005f6e:	fb03 f202 	mul.w	r2, r3, r2
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	611a      	str	r2, [r3, #16]
 8005f76:	e001      	b.n	8005f7c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	78db      	ldrb	r3, [r3, #3]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d007      	beq.n	8005f94 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	8912      	ldrh	r2, [r2, #8]
 8005f8a:	fb03 f202 	mul.w	r2, r3, r2
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	611a      	str	r2, [r3, #16]
 8005f92:	e003      	b.n	8005f9c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	695a      	ldr	r2, [r3, #20]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005fa4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005fa6:	04d9      	lsls	r1, r3, #19
 8005fa8:	4b63      	ldr	r3, [pc, #396]	; (8006138 <USB_HC_StartXfer+0x280>)
 8005faa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005fac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	7a9b      	ldrb	r3, [r3, #10]
 8005fb2:	075b      	lsls	r3, r3, #29
 8005fb4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005fb8:	69f9      	ldr	r1, [r7, #28]
 8005fba:	0148      	lsls	r0, r1, #5
 8005fbc:	6a39      	ldr	r1, [r7, #32]
 8005fbe:	4401      	add	r1, r0
 8005fc0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005fc4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005fc6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d009      	beq.n	8005fe2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	68d9      	ldr	r1, [r3, #12]
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fde:	460a      	mov	r2, r1
 8005fe0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	bf0c      	ite	eq
 8005ff2:	2301      	moveq	r3, #1
 8005ff4:	2300      	movne	r3, #0
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	4413      	add	r3, r2
 8006002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	0151      	lsls	r1, r2, #5
 800600c:	6a3a      	ldr	r2, [r7, #32]
 800600e:	440a      	add	r2, r1
 8006010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006014:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006018:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	4413      	add	r3, r2
 8006022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	7e7b      	ldrb	r3, [r7, #25]
 800602a:	075b      	lsls	r3, r3, #29
 800602c:	69f9      	ldr	r1, [r7, #28]
 800602e:	0148      	lsls	r0, r1, #5
 8006030:	6a39      	ldr	r1, [r7, #32]
 8006032:	4401      	add	r1, r0
 8006034:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006038:	4313      	orrs	r3, r2
 800603a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	4413      	add	r3, r2
 8006044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006052:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	78db      	ldrb	r3, [r3, #3]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d004      	beq.n	8006066 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006062:	613b      	str	r3, [r7, #16]
 8006064:	e003      	b.n	800606e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800606c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006074:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	4413      	add	r3, r2
 800607e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006082:	461a      	mov	r2, r3
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006088:	79fb      	ldrb	r3, [r7, #7]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	e04e      	b.n	8006130 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	78db      	ldrb	r3, [r3, #3]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d149      	bne.n	800612e <USB_HC_StartXfer+0x276>
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d045      	beq.n	800612e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	79db      	ldrb	r3, [r3, #7]
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	d830      	bhi.n	800610c <USB_HC_StartXfer+0x254>
 80060aa:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <USB_HC_StartXfer+0x1f8>)
 80060ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b0:	080060c1 	.word	0x080060c1
 80060b4:	080060e5 	.word	0x080060e5
 80060b8:	080060c1 	.word	0x080060c1
 80060bc:	080060e5 	.word	0x080060e5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	3303      	adds	r3, #3
 80060c6:	089b      	lsrs	r3, r3, #2
 80060c8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80060ca:	8afa      	ldrh	r2, [r7, #22]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d91c      	bls.n	8006110 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	f043 0220 	orr.w	r2, r3, #32
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80060e2:	e015      	b.n	8006110 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	3303      	adds	r3, #3
 80060ea:	089b      	lsrs	r3, r3, #2
 80060ec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80060ee:	8afa      	ldrh	r2, [r7, #22]
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d90a      	bls.n	8006114 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	619a      	str	r2, [r3, #24]
        }
        break;
 800610a:	e003      	b.n	8006114 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800610c:	bf00      	nop
 800610e:	e002      	b.n	8006116 <USB_HC_StartXfer+0x25e>
        break;
 8006110:	bf00      	nop
 8006112:	e000      	b.n	8006116 <USB_HC_StartXfer+0x25e>
        break;
 8006114:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	68d9      	ldr	r1, [r3, #12]
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	785a      	ldrb	r2, [r3, #1]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	b29b      	uxth	r3, r3
 8006124:	2000      	movs	r0, #0
 8006126:	9000      	str	r0, [sp, #0]
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f7ff fb31 	bl	8005790 <USB_WritePacket>
  }

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3728      	adds	r7, #40	; 0x28
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	1ff80000 	.word	0x1ff80000

0800613c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	b29b      	uxth	r3, r3
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800615e:	b480      	push	{r7}
 8006160:	b089      	sub	sp, #36	; 0x24
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	460b      	mov	r3, r1
 8006168:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800616e:	78fb      	ldrb	r3, [r7, #3]
 8006170:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	4413      	add	r3, r2
 800617e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	0c9b      	lsrs	r3, r3, #18
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	4413      	add	r3, r2
 8006194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	0fdb      	lsrs	r3, r3, #31
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f003 0320 	and.w	r3, r3, #32
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	d104      	bne.n	80061b8 <USB_HC_Halt+0x5a>
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	e0c8      	b.n	800634a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d002      	beq.n	80061c4 <USB_HC_Halt+0x66>
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d163      	bne.n	800628c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	0151      	lsls	r1, r2, #5
 80061d6:	69fa      	ldr	r2, [r7, #28]
 80061d8:	440a      	add	r2, r1
 80061da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061e2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f003 0320 	and.w	r3, r3, #32
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f040 80ab 	bne.w	8006348 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d133      	bne.n	8006266 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	4413      	add	r3, r2
 8006206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	0151      	lsls	r1, r2, #5
 8006210:	69fa      	ldr	r2, [r7, #28]
 8006212:	440a      	add	r2, r1
 8006214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800621c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	0151      	lsls	r1, r2, #5
 8006230:	69fa      	ldr	r2, [r7, #28]
 8006232:	440a      	add	r2, r1
 8006234:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006238:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800623c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3301      	adds	r3, #1
 8006242:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800624a:	d81d      	bhi.n	8006288 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	4413      	add	r3, r2
 8006254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800625e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006262:	d0ec      	beq.n	800623e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006264:	e070      	b.n	8006348 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	4413      	add	r3, r2
 800626e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	0151      	lsls	r1, r2, #5
 8006278:	69fa      	ldr	r2, [r7, #28]
 800627a:	440a      	add	r2, r1
 800627c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006280:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006284:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006286:	e05f      	b.n	8006348 <USB_HC_Halt+0x1ea>
            break;
 8006288:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800628a:	e05d      	b.n	8006348 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	4413      	add	r3, r2
 8006294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	0151      	lsls	r1, r2, #5
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	440a      	add	r2, r1
 80062a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062aa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d133      	bne.n	8006324 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	69fa      	ldr	r2, [r7, #28]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062fa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	3301      	adds	r3, #1
 8006300:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006308:	d81d      	bhi.n	8006346 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	4413      	add	r3, r2
 8006312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800631c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006320:	d0ec      	beq.n	80062fc <USB_HC_Halt+0x19e>
 8006322:	e011      	b.n	8006348 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	4413      	add	r3, r2
 800632c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	440a      	add	r2, r1
 800633a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800633e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	e000      	b.n	8006348 <USB_HC_Halt+0x1ea>
          break;
 8006346:	bf00      	nop
    }
  }

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3724      	adds	r7, #36	; 0x24
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
	...

08006358 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800636c:	2301      	movs	r3, #1
 800636e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	04da      	lsls	r2, r3, #19
 8006374:	4b15      	ldr	r3, [pc, #84]	; (80063cc <USB_DoPing+0x74>)
 8006376:	4013      	ands	r3, r2
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	0151      	lsls	r1, r2, #5
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	440a      	add	r2, r1
 8006380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006384:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006388:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	4413      	add	r3, r2
 8006392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063a0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063a8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b6:	461a      	mov	r2, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	1ff80000 	.word	0x1ff80000

080063d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80063d8:	2300      	movs	r3, #0
 80063da:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7ff f912 	bl	800560e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063ea:	2110      	movs	r1, #16
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff f96b 	bl	80056c8 <USB_FlushTxFifo>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff f997 	bl	8005730 <USB_FlushRxFifo>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800640c:	2300      	movs	r3, #0
 800640e:	61bb      	str	r3, [r7, #24]
 8006410:	e01f      	b.n	8006452 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	4413      	add	r3, r2
 800641a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006428:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006430:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006438:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	4413      	add	r3, r2
 8006442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006446:	461a      	mov	r2, r3
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	3301      	adds	r3, #1
 8006450:	61bb      	str	r3, [r7, #24]
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	2b0f      	cmp	r3, #15
 8006456:	d9dc      	bls.n	8006412 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006458:	2300      	movs	r3, #0
 800645a:	61bb      	str	r3, [r7, #24]
 800645c:	e034      	b.n	80064c8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	015a      	lsls	r2, r3, #5
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	4413      	add	r3, r2
 8006466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006474:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800647c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006484:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	4413      	add	r3, r2
 800648e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006492:	461a      	mov	r2, r3
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3301      	adds	r3, #1
 800649c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064a4:	d80c      	bhi.n	80064c0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064bc:	d0ec      	beq.n	8006498 <USB_StopHost+0xc8>
 80064be:	e000      	b.n	80064c2 <USB_StopHost+0xf2>
        break;
 80064c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	3301      	adds	r3, #1
 80064c6:	61bb      	str	r3, [r7, #24]
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	2b0f      	cmp	r3, #15
 80064cc:	d9c7      	bls.n	800645e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064d4:	461a      	mov	r2, r3
 80064d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064e2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7ff f881 	bl	80055ec <USB_EnableGlobalInt>

  return ret;
 80064ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3720      	adds	r7, #32
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80064f4:	b590      	push	{r4, r7, lr}
 80064f6:	b089      	sub	sp, #36	; 0x24
 80064f8:	af04      	add	r7, sp, #16
 80064fa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80064fc:	2301      	movs	r3, #1
 80064fe:	2202      	movs	r2, #2
 8006500:	2102      	movs	r1, #2
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fc66 	bl	8006dd4 <USBH_FindInterface>
 8006508:	4603      	mov	r3, r0
 800650a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	2bff      	cmp	r3, #255	; 0xff
 8006510:	d002      	beq.n	8006518 <USBH_CDC_InterfaceInit+0x24>
 8006512:	7bfb      	ldrb	r3, [r7, #15]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d901      	bls.n	800651c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006518:	2302      	movs	r3, #2
 800651a:	e13d      	b.n	8006798 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	4619      	mov	r1, r3
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fc3b 	bl	8006d9c <USBH_SelectInterface>
 8006526:	4603      	mov	r3, r0
 8006528:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800652a:	7bbb      	ldrb	r3, [r7, #14]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006530:	2302      	movs	r3, #2
 8006532:	e131      	b.n	8006798 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800653a:	2050      	movs	r0, #80	; 0x50
 800653c:	f002 fafa 	bl	8008b34 <malloc>
 8006540:	4603      	mov	r3, r0
 8006542:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006554:	2302      	movs	r3, #2
 8006556:	e11f      	b.n	8006798 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006558:	2250      	movs	r2, #80	; 0x50
 800655a:	2100      	movs	r1, #0
 800655c:	68b8      	ldr	r0, [r7, #8]
 800655e:	f002 faf9 	bl	8008b54 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006562:	7bfb      	ldrb	r3, [r7, #15]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	211a      	movs	r1, #26
 8006568:	fb01 f303 	mul.w	r3, r1, r3
 800656c:	4413      	add	r3, r2
 800656e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	b25b      	sxtb	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	da15      	bge.n	80065a6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	211a      	movs	r1, #26
 8006580:	fb01 f303 	mul.w	r3, r1, r3
 8006584:	4413      	add	r3, r2
 8006586:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800658a:	781a      	ldrb	r2, [r3, #0]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006590:	7bfb      	ldrb	r3, [r7, #15]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	211a      	movs	r1, #26
 8006596:	fb01 f303 	mul.w	r3, r1, r3
 800659a:	4413      	add	r3, r2
 800659c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80065a0:	881a      	ldrh	r2, [r3, #0]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	785b      	ldrb	r3, [r3, #1]
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f001 ff2c 	bl	800840a <USBH_AllocPipe>
 80065b2:	4603      	mov	r3, r0
 80065b4:	461a      	mov	r2, r3
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	7819      	ldrb	r1, [r3, #0]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	7858      	ldrb	r0, [r3, #1]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	8952      	ldrh	r2, [r2, #10]
 80065d2:	9202      	str	r2, [sp, #8]
 80065d4:	2203      	movs	r2, #3
 80065d6:	9201      	str	r2, [sp, #4]
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	4623      	mov	r3, r4
 80065dc:	4602      	mov	r2, r0
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f001 fee4 	bl	80083ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	2200      	movs	r2, #0
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f002 f9f3 	bl	80089d8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80065f2:	2300      	movs	r3, #0
 80065f4:	2200      	movs	r2, #0
 80065f6:	210a      	movs	r1, #10
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fbeb 	bl	8006dd4 <USBH_FindInterface>
 80065fe:	4603      	mov	r3, r0
 8006600:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	2bff      	cmp	r3, #255	; 0xff
 8006606:	d002      	beq.n	800660e <USBH_CDC_InterfaceInit+0x11a>
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d901      	bls.n	8006612 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800660e:	2302      	movs	r3, #2
 8006610:	e0c2      	b.n	8006798 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006612:	7bfb      	ldrb	r3, [r7, #15]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	211a      	movs	r1, #26
 8006618:	fb01 f303 	mul.w	r3, r1, r3
 800661c:	4413      	add	r3, r2
 800661e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	b25b      	sxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	da16      	bge.n	8006658 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	211a      	movs	r1, #26
 8006630:	fb01 f303 	mul.w	r3, r1, r3
 8006634:	4413      	add	r3, r2
 8006636:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800663a:	781a      	ldrb	r2, [r3, #0]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	211a      	movs	r1, #26
 8006646:	fb01 f303 	mul.w	r3, r1, r3
 800664a:	4413      	add	r3, r2
 800664c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006650:	881a      	ldrh	r2, [r3, #0]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	835a      	strh	r2, [r3, #26]
 8006656:	e015      	b.n	8006684 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	211a      	movs	r1, #26
 800665e:	fb01 f303 	mul.w	r3, r1, r3
 8006662:	4413      	add	r3, r2
 8006664:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006668:	781a      	ldrb	r2, [r3, #0]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800666e:	7bfb      	ldrb	r3, [r7, #15]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	211a      	movs	r1, #26
 8006674:	fb01 f303 	mul.w	r3, r1, r3
 8006678:	4413      	add	r3, r2
 800667a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800667e:	881a      	ldrh	r2, [r3, #0]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	211a      	movs	r1, #26
 800668a:	fb01 f303 	mul.w	r3, r1, r3
 800668e:	4413      	add	r3, r2
 8006690:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	b25b      	sxtb	r3, r3
 8006698:	2b00      	cmp	r3, #0
 800669a:	da16      	bge.n	80066ca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800669c:	7bfb      	ldrb	r3, [r7, #15]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	211a      	movs	r1, #26
 80066a2:	fb01 f303 	mul.w	r3, r1, r3
 80066a6:	4413      	add	r3, r2
 80066a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80066ac:	781a      	ldrb	r2, [r3, #0]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	211a      	movs	r1, #26
 80066b8:	fb01 f303 	mul.w	r3, r1, r3
 80066bc:	4413      	add	r3, r2
 80066be:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80066c2:	881a      	ldrh	r2, [r3, #0]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	835a      	strh	r2, [r3, #26]
 80066c8:	e015      	b.n	80066f6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	211a      	movs	r1, #26
 80066d0:	fb01 f303 	mul.w	r3, r1, r3
 80066d4:	4413      	add	r3, r2
 80066d6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80066da:	781a      	ldrb	r2, [r3, #0]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	211a      	movs	r1, #26
 80066e6:	fb01 f303 	mul.w	r3, r1, r3
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80066f0:	881a      	ldrh	r2, [r3, #0]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	7b9b      	ldrb	r3, [r3, #14]
 80066fa:	4619      	mov	r1, r3
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 fe84 	bl	800840a <USBH_AllocPipe>
 8006702:	4603      	mov	r3, r0
 8006704:	461a      	mov	r2, r3
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	7bdb      	ldrb	r3, [r3, #15]
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f001 fe7a 	bl	800840a <USBH_AllocPipe>
 8006716:	4603      	mov	r3, r0
 8006718:	461a      	mov	r2, r3
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	7b59      	ldrb	r1, [r3, #13]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	7b98      	ldrb	r0, [r3, #14]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	8b12      	ldrh	r2, [r2, #24]
 8006736:	9202      	str	r2, [sp, #8]
 8006738:	2202      	movs	r2, #2
 800673a:	9201      	str	r2, [sp, #4]
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	4623      	mov	r3, r4
 8006740:	4602      	mov	r2, r0
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f001 fe32 	bl	80083ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	7b19      	ldrb	r1, [r3, #12]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	7bd8      	ldrb	r0, [r3, #15]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	8b52      	ldrh	r2, [r2, #26]
 8006760:	9202      	str	r2, [sp, #8]
 8006762:	2202      	movs	r2, #2
 8006764:	9201      	str	r2, [sp, #4]
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	4623      	mov	r3, r4
 800676a:	4602      	mov	r2, r0
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f001 fe1d 	bl	80083ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	7b5b      	ldrb	r3, [r3, #13]
 800677e:	2200      	movs	r2, #0
 8006780:	4619      	mov	r1, r3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f002 f928 	bl	80089d8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	7b1b      	ldrb	r3, [r3, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f002 f921 	bl	80089d8 <USBH_LL_SetToggle>

  return USBH_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	bd90      	pop	{r4, r7, pc}

080067a0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00e      	beq.n	80067d8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 fe12 	bl	80083ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	4619      	mov	r1, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f001 fe3d 	bl	800844c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	7b1b      	ldrb	r3, [r3, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00e      	beq.n	80067fe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	7b1b      	ldrb	r3, [r3, #12]
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f001 fdff 	bl	80083ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	7b1b      	ldrb	r3, [r3, #12]
 80067f0:	4619      	mov	r1, r3
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f001 fe2a 	bl	800844c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	7b5b      	ldrb	r3, [r3, #13]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00e      	beq.n	8006824 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	7b5b      	ldrb	r3, [r3, #13]
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f001 fdec 	bl	80083ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	7b5b      	ldrb	r3, [r3, #13]
 8006816:	4619      	mov	r1, r3
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 fe17 	bl	800844c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00b      	beq.n	8006848 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	4618      	mov	r0, r3
 800683a:	f002 f983 	bl	8008b44 <free>
    phost->pActiveClass->pData = 0U;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006844:	2200      	movs	r2, #0
 8006846:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b084      	sub	sp, #16
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3340      	adds	r3, #64	; 0x40
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f8b1 	bl	80069d2 <GetLineCoding>
 8006870:	4603      	mov	r3, r0
 8006872:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006874:	7afb      	ldrb	r3, [r7, #11]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d105      	bne.n	8006886 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006880:	2102      	movs	r1, #2
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006886:	7afb      	ldrb	r3, [r7, #11]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006898:	2301      	movs	r3, #1
 800689a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800689c:	2300      	movs	r3, #0
 800689e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d877      	bhi.n	80069a4 <USBH_CDC_Process+0x114>
 80068b4:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <USBH_CDC_Process+0x2c>)
 80068b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ba:	bf00      	nop
 80068bc:	080068d1 	.word	0x080068d1
 80068c0:	080068d7 	.word	0x080068d7
 80068c4:	08006907 	.word	0x08006907
 80068c8:	0800697b 	.word	0x0800697b
 80068cc:	08006989 	.word	0x08006989
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	73fb      	strb	r3, [r7, #15]
      break;
 80068d4:	e06d      	b.n	80069b2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f897 	bl	8006a10 <SetLineCoding>
 80068e2:	4603      	mov	r3, r0
 80068e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80068e6:	7bbb      	ldrb	r3, [r7, #14]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d104      	bne.n	80068f6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80068f4:	e058      	b.n	80069a8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80068f6:	7bbb      	ldrb	r3, [r7, #14]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d055      	beq.n	80069a8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2204      	movs	r2, #4
 8006900:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006904:	e050      	b.n	80069a8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	3340      	adds	r3, #64	; 0x40
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f860 	bl	80069d2 <GetLineCoding>
 8006912:	4603      	mov	r3, r0
 8006914:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006916:	7bbb      	ldrb	r3, [r7, #14]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d126      	bne.n	800696a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800692e:	791b      	ldrb	r3, [r3, #4]
 8006930:	429a      	cmp	r2, r3
 8006932:	d13b      	bne.n	80069ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800693e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006940:	429a      	cmp	r2, r3
 8006942:	d133      	bne.n	80069ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800694e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006950:	429a      	cmp	r2, r3
 8006952:	d12b      	bne.n	80069ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800695c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800695e:	429a      	cmp	r2, r3
 8006960:	d124      	bne.n	80069ac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f958 	bl	8006c18 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006968:	e020      	b.n	80069ac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800696a:	7bbb      	ldrb	r3, [r7, #14]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d01d      	beq.n	80069ac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2204      	movs	r2, #4
 8006974:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006978:	e018      	b.n	80069ac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f867 	bl	8006a4e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f8da 	bl	8006b3a <CDC_ProcessReception>
      break;
 8006986:	e014      	b.n	80069b2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006988:	2100      	movs	r1, #0
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 ffef 	bl	800796e <USBH_ClrFeature>
 8006990:	4603      	mov	r3, r0
 8006992:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006994:	7bbb      	ldrb	r3, [r7, #14]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10a      	bne.n	80069b0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80069a2:	e005      	b.n	80069b0 <USBH_CDC_Process+0x120>

    default:
      break;
 80069a4:	bf00      	nop
 80069a6:	e004      	b.n	80069b2 <USBH_CDC_Process+0x122>
      break;
 80069a8:	bf00      	nop
 80069aa:	e002      	b.n	80069b2 <USBH_CDC_Process+0x122>
      break;
 80069ac:	bf00      	nop
 80069ae:	e000      	b.n	80069b2 <USBH_CDC_Process+0x122>
      break;
 80069b0:	bf00      	nop

  }

  return status;
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b082      	sub	sp, #8
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	22a1      	movs	r2, #161	; 0xa1
 80069e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2221      	movs	r2, #33	; 0x21
 80069e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2207      	movs	r2, #7
 80069f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2207      	movs	r2, #7
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 fa81 	bl	8007f08 <USBH_CtlReq>
 8006a06:	4603      	mov	r3, r0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2221      	movs	r2, #33	; 0x21
 8006a1e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2220      	movs	r2, #32
 8006a24:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2207      	movs	r2, #7
 8006a36:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2207      	movs	r2, #7
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 fa62 	bl	8007f08 <USBH_CtlReq>
 8006a44:	4603      	mov	r3, r0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b086      	sub	sp, #24
 8006a52:	af02      	add	r7, sp, #8
 8006a54:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a60:	2300      	movs	r3, #0
 8006a62:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d002      	beq.n	8006a74 <CDC_ProcessTransmission+0x26>
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d023      	beq.n	8006aba <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006a72:	e05e      	b.n	8006b32 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	8b12      	ldrh	r2, [r2, #24]
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d90b      	bls.n	8006a98 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	69d9      	ldr	r1, [r3, #28]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8b1a      	ldrh	r2, [r3, #24]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	7b5b      	ldrb	r3, [r3, #13]
 8006a8c:	2001      	movs	r0, #1
 8006a8e:	9000      	str	r0, [sp, #0]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f001 fc48 	bl	8008326 <USBH_BulkSendData>
 8006a96:	e00b      	b.n	8006ab0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	7b5b      	ldrb	r3, [r3, #13]
 8006aa6:	2001      	movs	r0, #1
 8006aa8:	9000      	str	r0, [sp, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f001 fc3b 	bl	8008326 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006ab8:	e03b      	b.n	8006b32 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	7b5b      	ldrb	r3, [r3, #13]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f001 ff5f 	bl	8008984 <USBH_LL_GetURBState>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006aca:	7afb      	ldrb	r3, [r7, #11]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d128      	bne.n	8006b22 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	8b12      	ldrh	r2, [r2, #24]
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d90e      	bls.n	8006afa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	8b12      	ldrh	r2, [r2, #24]
 8006ae4:	1a9a      	subs	r2, r3, r2
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	8b12      	ldrh	r2, [r2, #24]
 8006af2:	441a      	add	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	61da      	str	r2, [r3, #28]
 8006af8:	e002      	b.n	8006b00 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d004      	beq.n	8006b12 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b10:	e00e      	b.n	8006b30 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f868 	bl	8006bf0 <USBH_CDC_TransmitCallback>
      break;
 8006b20:	e006      	b.n	8006b30 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006b22:	7afb      	ldrb	r3, [r7, #11]
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d103      	bne.n	8006b30 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b30:	bf00      	nop
  }
}
 8006b32:	bf00      	nop
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b086      	sub	sp, #24
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d002      	beq.n	8006b60 <CDC_ProcessReception+0x26>
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	d00e      	beq.n	8006b7c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006b5e:	e043      	b.n	8006be8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	6a19      	ldr	r1, [r3, #32]
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	8b5a      	ldrh	r2, [r3, #26]
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	7b1b      	ldrb	r3, [r3, #12]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f001 fbff 	bl	8008370 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2204      	movs	r2, #4
 8006b76:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006b7a:	e035      	b.n	8006be8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	7b1b      	ldrb	r3, [r3, #12]
 8006b80:	4619      	mov	r1, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f001 fefe 	bl	8008984 <USBH_LL_GetURBState>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006b8c:	7cfb      	ldrb	r3, [r7, #19]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d129      	bne.n	8006be6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	7b1b      	ldrb	r3, [r3, #12]
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f001 fe61 	bl	8008860 <USBH_LL_GetLastXferSize>
 8006b9e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d016      	beq.n	8006bd8 <CDC_ProcessReception+0x9e>
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	8b5b      	ldrh	r3, [r3, #26]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d910      	bls.n	8006bd8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	1ad2      	subs	r2, r2, r3
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	6a1a      	ldr	r2, [r3, #32]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	441a      	add	r2, r3
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2203      	movs	r2, #3
 8006bd2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006bd6:	e006      	b.n	8006be6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f80f 	bl	8006c04 <USBH_CDC_ReceiveCallback>
      break;
 8006be6:	bf00      	nop
  }
}
 8006be8:	bf00      	nop
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	4613      	mov	r3, r2
 8006c38:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006c40:	2302      	movs	r3, #2
 8006c42:	e029      	b.n	8006c98 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	79fa      	ldrb	r2, [r7, #7]
 8006c48:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 f81f 	bl	8006ca0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f001 fd31 	bl	80086f8 <USBH_LL_Init>

  return USBH_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006cac:	2300      	movs	r3, #0
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	e009      	b.n	8006cc6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	33e0      	adds	r3, #224	; 0xe0
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	60fb      	str	r3, [r7, #12]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2b0f      	cmp	r3, #15
 8006cca:	d9f2      	bls.n	8006cb2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	e009      	b.n	8006ce6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006cdc:	2200      	movs	r2, #0
 8006cde:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cec:	d3f1      	bcc.n	8006cd2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2240      	movs	r2, #64	; 0x40
 8006d12:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d016      	beq.n	8006d8a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10e      	bne.n	8006d84 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d6c:	1c59      	adds	r1, r3, #1
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	33de      	adds	r3, #222	; 0xde
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	73fb      	strb	r3, [r7, #15]
 8006d82:	e004      	b.n	8006d8e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006d84:	2302      	movs	r3, #2
 8006d86:	73fb      	strb	r3, [r7, #15]
 8006d88:	e001      	b.n	8006d8e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	460b      	mov	r3, r1
 8006da6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006db2:	78fa      	ldrb	r2, [r7, #3]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d204      	bcs.n	8006dc2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	78fa      	ldrb	r2, [r7, #3]
 8006dbc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006dc0:	e001      	b.n	8006dc6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	4608      	mov	r0, r1
 8006dde:	4611      	mov	r1, r2
 8006de0:	461a      	mov	r2, r3
 8006de2:	4603      	mov	r3, r0
 8006de4:	70fb      	strb	r3, [r7, #3]
 8006de6:	460b      	mov	r3, r1
 8006de8:	70bb      	strb	r3, [r7, #2]
 8006dea:	4613      	mov	r3, r2
 8006dec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006dfc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006dfe:	e025      	b.n	8006e4c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
 8006e02:	221a      	movs	r2, #26
 8006e04:	fb02 f303 	mul.w	r3, r2, r3
 8006e08:	3308      	adds	r3, #8
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	3302      	adds	r3, #2
 8006e10:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	795b      	ldrb	r3, [r3, #5]
 8006e16:	78fa      	ldrb	r2, [r7, #3]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d002      	beq.n	8006e22 <USBH_FindInterface+0x4e>
 8006e1c:	78fb      	ldrb	r3, [r7, #3]
 8006e1e:	2bff      	cmp	r3, #255	; 0xff
 8006e20:	d111      	bne.n	8006e46 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006e26:	78ba      	ldrb	r2, [r7, #2]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d002      	beq.n	8006e32 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e2c:	78bb      	ldrb	r3, [r7, #2]
 8006e2e:	2bff      	cmp	r3, #255	; 0xff
 8006e30:	d109      	bne.n	8006e46 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e36:	787a      	ldrb	r2, [r7, #1]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d002      	beq.n	8006e42 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e3c:	787b      	ldrb	r3, [r7, #1]
 8006e3e:	2bff      	cmp	r3, #255	; 0xff
 8006e40:	d101      	bne.n	8006e46 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006e42:	7dfb      	ldrb	r3, [r7, #23]
 8006e44:	e006      	b.n	8006e54 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006e46:	7dfb      	ldrb	r3, [r7, #23]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d9d6      	bls.n	8006e00 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006e52:	23ff      	movs	r3, #255	; 0xff
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	371c      	adds	r7, #28
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f001 fc81 	bl	8008770 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006e6e:	2101      	movs	r1, #1
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 fd9a 	bl	80089aa <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af04      	add	r7, sp, #16
 8006e86:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006e88:	2302      	movs	r3, #2
 8006e8a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d102      	bne.n	8006ea2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2203      	movs	r2, #3
 8006ea0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b0b      	cmp	r3, #11
 8006eaa:	f200 81be 	bhi.w	800722a <USBH_Process+0x3aa>
 8006eae:	a201      	add	r2, pc, #4	; (adr r2, 8006eb4 <USBH_Process+0x34>)
 8006eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb4:	08006ee5 	.word	0x08006ee5
 8006eb8:	08006f17 	.word	0x08006f17
 8006ebc:	08006f7f 	.word	0x08006f7f
 8006ec0:	080071c5 	.word	0x080071c5
 8006ec4:	0800722b 	.word	0x0800722b
 8006ec8:	08007023 	.word	0x08007023
 8006ecc:	0800716b 	.word	0x0800716b
 8006ed0:	08007059 	.word	0x08007059
 8006ed4:	08007079 	.word	0x08007079
 8006ed8:	08007099 	.word	0x08007099
 8006edc:	080070dd 	.word	0x080070dd
 8006ee0:	080071ad 	.word	0x080071ad
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 819e 	beq.w	800722e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006ef8:	20c8      	movs	r0, #200	; 0xc8
 8006efa:	f001 fd9d 	bl	8008a38 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f001 fc93 	bl	800882a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006f14:	e18b      	b.n	800722e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d107      	bne.n	8006f30 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f2e:	e18d      	b.n	800724c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f3a:	d914      	bls.n	8006f66 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006f42:	3301      	adds	r3, #1
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	d903      	bls.n	8006f5e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	220d      	movs	r2, #13
 8006f5a:	701a      	strb	r2, [r3, #0]
      break;
 8006f5c:	e176      	b.n	800724c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	701a      	strb	r2, [r3, #0]
      break;
 8006f64:	e172      	b.n	800724c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f6c:	f103 020a 	add.w	r2, r3, #10
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006f76:	200a      	movs	r0, #10
 8006f78:	f001 fd5e 	bl	8008a38 <USBH_Delay>
      break;
 8006f7c:	e166      	b.n	800724c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d005      	beq.n	8006f94 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f8e:	2104      	movs	r1, #4
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006f94:	2064      	movs	r0, #100	; 0x64
 8006f96:	f001 fd4f 	bl	8008a38 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 fc1e 	bl	80087dc <USBH_LL_GetSpeed>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2205      	movs	r2, #5
 8006fae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f001 fa29 	bl	800840a <USBH_AllocPipe>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	461a      	mov	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006fc0:	2180      	movs	r1, #128	; 0x80
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f001 fa21 	bl	800840a <USBH_AllocPipe>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	461a      	mov	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	7919      	ldrb	r1, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006fe4:	b292      	uxth	r2, r2
 8006fe6:	9202      	str	r2, [sp, #8]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	9201      	str	r2, [sp, #4]
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2280      	movs	r2, #128	; 0x80
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f001 f9da 	bl	80083ac <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	7959      	ldrb	r1, [r3, #5]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800700c:	b292      	uxth	r2, r2
 800700e:	9202      	str	r2, [sp, #8]
 8007010:	2200      	movs	r2, #0
 8007012:	9201      	str	r2, [sp, #4]
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	4603      	mov	r3, r0
 8007018:	2200      	movs	r2, #0
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f001 f9c6 	bl	80083ac <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007020:	e114      	b.n	800724c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f918 	bl	8007258 <USBH_HandleEnum>
 8007028:	4603      	mov	r3, r0
 800702a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800702c:	7bbb      	ldrb	r3, [r7, #14]
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	f040 80fe 	bne.w	8007232 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007044:	2b01      	cmp	r3, #1
 8007046:	d103      	bne.n	8007050 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2208      	movs	r2, #8
 800704c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800704e:	e0f0      	b.n	8007232 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2207      	movs	r2, #7
 8007054:	701a      	strb	r2, [r3, #0]
      break;
 8007056:	e0ec      	b.n	8007232 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800705e:	2b00      	cmp	r3, #0
 8007060:	f000 80e9 	beq.w	8007236 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800706a:	2101      	movs	r1, #1
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2208      	movs	r2, #8
 8007074:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007076:	e0de      	b.n	8007236 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800707e:	b29b      	uxth	r3, r3
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fc2c 	bl	80078e0 <USBH_SetCfg>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	f040 80d5 	bne.w	800723a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2209      	movs	r2, #9
 8007094:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007096:	e0d0      	b.n	800723a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800709e:	f003 0320 	and.w	r3, r3, #32
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d016      	beq.n	80070d4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80070a6:	2101      	movs	r1, #1
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fc3c 	bl	8007926 <USBH_SetFeature>
 80070ae:	4603      	mov	r3, r0
 80070b0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80070b2:	7bbb      	ldrb	r3, [r7, #14]
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d103      	bne.n	80070c2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	220a      	movs	r2, #10
 80070be:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070c0:	e0bd      	b.n	800723e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80070c2:	7bbb      	ldrb	r3, [r7, #14]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	f040 80b9 	bne.w	800723e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	220a      	movs	r2, #10
 80070d0:	701a      	strb	r2, [r3, #0]
      break;
 80070d2:	e0b4      	b.n	800723e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	220a      	movs	r2, #10
 80070d8:	701a      	strb	r2, [r3, #0]
      break;
 80070da:	e0b0      	b.n	800723e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 80ad 	beq.w	8007242 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80070f0:	2300      	movs	r3, #0
 80070f2:	73fb      	strb	r3, [r7, #15]
 80070f4:	e016      	b.n	8007124 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80070f6:	7bfa      	ldrb	r2, [r7, #15]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	32de      	adds	r2, #222	; 0xde
 80070fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007100:	791a      	ldrb	r2, [r3, #4]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007108:	429a      	cmp	r2, r3
 800710a:	d108      	bne.n	800711e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800710c:	7bfa      	ldrb	r2, [r7, #15]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	32de      	adds	r2, #222	; 0xde
 8007112:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800711c:	e005      	b.n	800712a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800711e:	7bfb      	ldrb	r3, [r7, #15]
 8007120:	3301      	adds	r3, #1
 8007122:	73fb      	strb	r3, [r7, #15]
 8007124:	7bfb      	ldrb	r3, [r7, #15]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0e5      	beq.n	80070f6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007130:	2b00      	cmp	r3, #0
 8007132:	d016      	beq.n	8007162 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	4798      	blx	r3
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d109      	bne.n	800715a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2206      	movs	r2, #6
 800714a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007152:	2103      	movs	r1, #3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007158:	e073      	b.n	8007242 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	220d      	movs	r2, #13
 800715e:	701a      	strb	r2, [r3, #0]
      break;
 8007160:	e06f      	b.n	8007242 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	220d      	movs	r2, #13
 8007166:	701a      	strb	r2, [r3, #0]
      break;
 8007168:	e06b      	b.n	8007242 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007170:	2b00      	cmp	r3, #0
 8007172:	d017      	beq.n	80071a4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	4798      	blx	r3
 8007180:	4603      	mov	r3, r0
 8007182:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d103      	bne.n	8007194 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	220b      	movs	r2, #11
 8007190:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007192:	e058      	b.n	8007246 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007194:	7bbb      	ldrb	r3, [r7, #14]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b02      	cmp	r3, #2
 800719a:	d154      	bne.n	8007246 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	220d      	movs	r2, #13
 80071a0:	701a      	strb	r2, [r3, #0]
      break;
 80071a2:	e050      	b.n	8007246 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	220d      	movs	r2, #13
 80071a8:	701a      	strb	r2, [r3, #0]
      break;
 80071aa:	e04c      	b.n	8007246 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d049      	beq.n	800724a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	4798      	blx	r3
      }
      break;
 80071c2:	e042      	b.n	800724a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7ff fd67 	bl	8006ca0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d009      	beq.n	80071f0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d005      	beq.n	8007206 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007200:	2105      	movs	r1, #5
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b01      	cmp	r3, #1
 8007210:	d107      	bne.n	8007222 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff fe20 	bl	8006e60 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007220:	e014      	b.n	800724c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f001 faa4 	bl	8008770 <USBH_LL_Start>
      break;
 8007228:	e010      	b.n	800724c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800722a:	bf00      	nop
 800722c:	e00e      	b.n	800724c <USBH_Process+0x3cc>
      break;
 800722e:	bf00      	nop
 8007230:	e00c      	b.n	800724c <USBH_Process+0x3cc>
      break;
 8007232:	bf00      	nop
 8007234:	e00a      	b.n	800724c <USBH_Process+0x3cc>
    break;
 8007236:	bf00      	nop
 8007238:	e008      	b.n	800724c <USBH_Process+0x3cc>
      break;
 800723a:	bf00      	nop
 800723c:	e006      	b.n	800724c <USBH_Process+0x3cc>
      break;
 800723e:	bf00      	nop
 8007240:	e004      	b.n	800724c <USBH_Process+0x3cc>
      break;
 8007242:	bf00      	nop
 8007244:	e002      	b.n	800724c <USBH_Process+0x3cc>
      break;
 8007246:	bf00      	nop
 8007248:	e000      	b.n	800724c <USBH_Process+0x3cc>
      break;
 800724a:	bf00      	nop
  }
  return USBH_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop

08007258 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b088      	sub	sp, #32
 800725c:	af04      	add	r7, sp, #16
 800725e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007260:	2301      	movs	r3, #1
 8007262:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007264:	2301      	movs	r3, #1
 8007266:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	785b      	ldrb	r3, [r3, #1]
 800726c:	2b07      	cmp	r3, #7
 800726e:	f200 81c1 	bhi.w	80075f4 <USBH_HandleEnum+0x39c>
 8007272:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <USBH_HandleEnum+0x20>)
 8007274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007278:	08007299 	.word	0x08007299
 800727c:	08007357 	.word	0x08007357
 8007280:	080073c1 	.word	0x080073c1
 8007284:	0800744f 	.word	0x0800744f
 8007288:	080074b9 	.word	0x080074b9
 800728c:	08007529 	.word	0x08007529
 8007290:	0800756f 	.word	0x0800756f
 8007294:	080075b5 	.word	0x080075b5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007298:	2108      	movs	r1, #8
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fa50 	bl	8007740 <USBH_Get_DevDesc>
 80072a0:	4603      	mov	r3, r0
 80072a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072a4:	7bbb      	ldrb	r3, [r7, #14]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d130      	bne.n	800730c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	7919      	ldrb	r1, [r3, #4]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80072ce:	b292      	uxth	r2, r2
 80072d0:	9202      	str	r2, [sp, #8]
 80072d2:	2200      	movs	r2, #0
 80072d4:	9201      	str	r2, [sp, #4]
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	4603      	mov	r3, r0
 80072da:	2280      	movs	r2, #128	; 0x80
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 f865 	bl	80083ac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	7959      	ldrb	r1, [r3, #5]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072f6:	b292      	uxth	r2, r2
 80072f8:	9202      	str	r2, [sp, #8]
 80072fa:	2200      	movs	r2, #0
 80072fc:	9201      	str	r2, [sp, #4]
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	4603      	mov	r3, r0
 8007302:	2200      	movs	r2, #0
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 f851 	bl	80083ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800730a:	e175      	b.n	80075f8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800730c:	7bbb      	ldrb	r3, [r7, #14]
 800730e:	2b03      	cmp	r3, #3
 8007310:	f040 8172 	bne.w	80075f8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800731a:	3301      	adds	r3, #1
 800731c:	b2da      	uxtb	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800732a:	2b03      	cmp	r3, #3
 800732c:	d903      	bls.n	8007336 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	220d      	movs	r2, #13
 8007332:	701a      	strb	r2, [r3, #0]
      break;
 8007334:	e160      	b.n	80075f8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	795b      	ldrb	r3, [r3, #5]
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f001 f885 	bl	800844c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	791b      	ldrb	r3, [r3, #4]
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f001 f87f 	bl	800844c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	701a      	strb	r2, [r3, #0]
      break;
 8007354:	e150      	b.n	80075f8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007356:	2112      	movs	r1, #18
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f9f1 	bl	8007740 <USBH_Get_DevDesc>
 800735e:	4603      	mov	r3, r0
 8007360:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d103      	bne.n	8007370 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800736e:	e145      	b.n	80075fc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007370:	7bbb      	ldrb	r3, [r7, #14]
 8007372:	2b03      	cmp	r3, #3
 8007374:	f040 8142 	bne.w	80075fc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800737e:	3301      	adds	r3, #1
 8007380:	b2da      	uxtb	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800738e:	2b03      	cmp	r3, #3
 8007390:	d903      	bls.n	800739a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	220d      	movs	r2, #13
 8007396:	701a      	strb	r2, [r3, #0]
      break;
 8007398:	e130      	b.n	80075fc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	795b      	ldrb	r3, [r3, #5]
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f001 f853 	bl	800844c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	791b      	ldrb	r3, [r3, #4]
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f001 f84d 	bl	800844c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	701a      	strb	r2, [r3, #0]
      break;
 80073be:	e11d      	b.n	80075fc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80073c0:	2101      	movs	r1, #1
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fa68 	bl	8007898 <USBH_SetAddress>
 80073c8:	4603      	mov	r3, r0
 80073ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d132      	bne.n	8007438 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80073d2:	2002      	movs	r0, #2
 80073d4:	f001 fb30 	bl	8008a38 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2203      	movs	r2, #3
 80073e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	7919      	ldrb	r1, [r3, #4]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80073fa:	b292      	uxth	r2, r2
 80073fc:	9202      	str	r2, [sp, #8]
 80073fe:	2200      	movs	r2, #0
 8007400:	9201      	str	r2, [sp, #4]
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	4603      	mov	r3, r0
 8007406:	2280      	movs	r2, #128	; 0x80
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 ffcf 	bl	80083ac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	7959      	ldrb	r1, [r3, #5]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007422:	b292      	uxth	r2, r2
 8007424:	9202      	str	r2, [sp, #8]
 8007426:	2200      	movs	r2, #0
 8007428:	9201      	str	r2, [sp, #4]
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	4603      	mov	r3, r0
 800742e:	2200      	movs	r2, #0
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 ffbb 	bl	80083ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007436:	e0e3      	b.n	8007600 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	2b03      	cmp	r3, #3
 800743c:	f040 80e0 	bne.w	8007600 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	220d      	movs	r2, #13
 8007444:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	705a      	strb	r2, [r3, #1]
      break;
 800744c:	e0d8      	b.n	8007600 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800744e:	2109      	movs	r1, #9
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f99d 	bl	8007790 <USBH_Get_CfgDesc>
 8007456:	4603      	mov	r3, r0
 8007458:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800745a:	7bbb      	ldrb	r3, [r7, #14]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d103      	bne.n	8007468 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2204      	movs	r2, #4
 8007464:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007466:	e0cd      	b.n	8007604 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007468:	7bbb      	ldrb	r3, [r7, #14]
 800746a:	2b03      	cmp	r3, #3
 800746c:	f040 80ca 	bne.w	8007604 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007476:	3301      	adds	r3, #1
 8007478:	b2da      	uxtb	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007486:	2b03      	cmp	r3, #3
 8007488:	d903      	bls.n	8007492 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	220d      	movs	r2, #13
 800748e:	701a      	strb	r2, [r3, #0]
      break;
 8007490:	e0b8      	b.n	8007604 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	795b      	ldrb	r3, [r3, #5]
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 ffd7 	bl	800844c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	791b      	ldrb	r3, [r3, #4]
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 ffd1 	bl	800844c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	701a      	strb	r2, [r3, #0]
      break;
 80074b6:	e0a5      	b.n	8007604 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f965 	bl	8007790 <USBH_Get_CfgDesc>
 80074c6:	4603      	mov	r3, r0
 80074c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074ca:	7bbb      	ldrb	r3, [r7, #14]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d103      	bne.n	80074d8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2205      	movs	r2, #5
 80074d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80074d6:	e097      	b.n	8007608 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074d8:	7bbb      	ldrb	r3, [r7, #14]
 80074da:	2b03      	cmp	r3, #3
 80074dc:	f040 8094 	bne.w	8007608 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074e6:	3301      	adds	r3, #1
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d903      	bls.n	8007502 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	220d      	movs	r2, #13
 80074fe:	701a      	strb	r2, [r3, #0]
      break;
 8007500:	e082      	b.n	8007608 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	795b      	ldrb	r3, [r3, #5]
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 ff9f 	bl	800844c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	791b      	ldrb	r3, [r3, #4]
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 ff99 	bl	800844c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	701a      	strb	r2, [r3, #0]
      break;
 8007526:	e06f      	b.n	8007608 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800752e:	2b00      	cmp	r3, #0
 8007530:	d019      	beq.n	8007566 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800753e:	23ff      	movs	r3, #255	; 0xff
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f949 	bl	80077d8 <USBH_Get_StringDesc>
 8007546:	4603      	mov	r3, r0
 8007548:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800754a:	7bbb      	ldrb	r3, [r7, #14]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d103      	bne.n	8007558 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2206      	movs	r2, #6
 8007554:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007556:	e059      	b.n	800760c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007558:	7bbb      	ldrb	r3, [r7, #14]
 800755a:	2b03      	cmp	r3, #3
 800755c:	d156      	bne.n	800760c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2206      	movs	r2, #6
 8007562:	705a      	strb	r2, [r3, #1]
      break;
 8007564:	e052      	b.n	800760c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2206      	movs	r2, #6
 800756a:	705a      	strb	r2, [r3, #1]
      break;
 800756c:	e04e      	b.n	800760c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007574:	2b00      	cmp	r3, #0
 8007576:	d019      	beq.n	80075ac <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007584:	23ff      	movs	r3, #255	; 0xff
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f926 	bl	80077d8 <USBH_Get_StringDesc>
 800758c:	4603      	mov	r3, r0
 800758e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007590:	7bbb      	ldrb	r3, [r7, #14]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d103      	bne.n	800759e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2207      	movs	r2, #7
 800759a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800759c:	e038      	b.n	8007610 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800759e:	7bbb      	ldrb	r3, [r7, #14]
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d135      	bne.n	8007610 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2207      	movs	r2, #7
 80075a8:	705a      	strb	r2, [r3, #1]
      break;
 80075aa:	e031      	b.n	8007610 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2207      	movs	r2, #7
 80075b0:	705a      	strb	r2, [r3, #1]
      break;
 80075b2:	e02d      	b.n	8007610 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d017      	beq.n	80075ee <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80075ca:	23ff      	movs	r3, #255	; 0xff
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f903 	bl	80077d8 <USBH_Get_StringDesc>
 80075d2:	4603      	mov	r3, r0
 80075d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80075d6:	7bbb      	ldrb	r3, [r7, #14]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d102      	bne.n	80075e2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80075dc:	2300      	movs	r3, #0
 80075de:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80075e0:	e018      	b.n	8007614 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d115      	bne.n	8007614 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80075e8:	2300      	movs	r3, #0
 80075ea:	73fb      	strb	r3, [r7, #15]
      break;
 80075ec:	e012      	b.n	8007614 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	73fb      	strb	r3, [r7, #15]
      break;
 80075f2:	e00f      	b.n	8007614 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80075f4:	bf00      	nop
 80075f6:	e00e      	b.n	8007616 <USBH_HandleEnum+0x3be>
      break;
 80075f8:	bf00      	nop
 80075fa:	e00c      	b.n	8007616 <USBH_HandleEnum+0x3be>
      break;
 80075fc:	bf00      	nop
 80075fe:	e00a      	b.n	8007616 <USBH_HandleEnum+0x3be>
      break;
 8007600:	bf00      	nop
 8007602:	e008      	b.n	8007616 <USBH_HandleEnum+0x3be>
      break;
 8007604:	bf00      	nop
 8007606:	e006      	b.n	8007616 <USBH_HandleEnum+0x3be>
      break;
 8007608:	bf00      	nop
 800760a:	e004      	b.n	8007616 <USBH_HandleEnum+0x3be>
      break;
 800760c:	bf00      	nop
 800760e:	e002      	b.n	8007616 <USBH_HandleEnum+0x3be>
      break;
 8007610:	bf00      	nop
 8007612:	e000      	b.n	8007616 <USBH_HandleEnum+0x3be>
      break;
 8007614:	bf00      	nop
  }
  return Status;
 8007616:	7bfb      	ldrb	r3, [r7, #15]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007632:	bf00      	nop
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b082      	sub	sp, #8
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f804 	bl	8007662 <USBH_HandleSof>
}
 800765a:	bf00      	nop
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b0b      	cmp	r3, #11
 8007672:	d10a      	bne.n	800768a <USBH_HandleSof+0x28>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800767a:	2b00      	cmp	r3, #0
 800767c:	d005      	beq.n	800768a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	4798      	blx	r3
  }
}
 800768a:	bf00      	nop
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007692:	b480      	push	{r7}
 8007694:	b083      	sub	sp, #12
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80076a2:	bf00      	nop
}
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b083      	sub	sp, #12
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80076be:	bf00      	nop
}
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f001 f844 	bl	80087a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	791b      	ldrb	r3, [r3, #4]
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fe91 	bl	800844c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	795b      	ldrb	r3, [r3, #5]
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fe8b 	bl	800844c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af02      	add	r7, sp, #8
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007752:	78fb      	ldrb	r3, [r7, #3]
 8007754:	b29b      	uxth	r3, r3
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	4613      	mov	r3, r2
 800775a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800775e:	2100      	movs	r1, #0
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f864 	bl	800782e <USBH_GetDescriptor>
 8007766:	4603      	mov	r3, r0
 8007768:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800776a:	7bfb      	ldrb	r3, [r7, #15]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10a      	bne.n	8007786 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800777c:	78fa      	ldrb	r2, [r7, #3]
 800777e:	b292      	uxth	r2, r2
 8007780:	4619      	mov	r1, r3
 8007782:	f000 f918 	bl	80079b6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007786:	7bfb      	ldrb	r3, [r7, #15]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af02      	add	r7, sp, #8
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	331c      	adds	r3, #28
 80077a0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80077a2:	887b      	ldrh	r3, [r7, #2]
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077ac:	2100      	movs	r1, #0
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f83d 	bl	800782e <USBH_GetDescriptor>
 80077b4:	4603      	mov	r3, r0
 80077b6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d107      	bne.n	80077ce <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80077be:	887b      	ldrh	r3, [r7, #2]
 80077c0:	461a      	mov	r2, r3
 80077c2:	68b9      	ldr	r1, [r7, #8]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f987 	bl	8007ad8 <USBH_ParseCfgDesc>
 80077ca:	4603      	mov	r3, r0
 80077cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b088      	sub	sp, #32
 80077dc:	af02      	add	r7, sp, #8
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	607a      	str	r2, [r7, #4]
 80077e2:	461a      	mov	r2, r3
 80077e4:	460b      	mov	r3, r1
 80077e6:	72fb      	strb	r3, [r7, #11]
 80077e8:	4613      	mov	r3, r2
 80077ea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80077ec:	7afb      	ldrb	r3, [r7, #11]
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80077f4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80077fc:	893b      	ldrh	r3, [r7, #8]
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	460b      	mov	r3, r1
 8007802:	2100      	movs	r1, #0
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 f812 	bl	800782e <USBH_GetDescriptor>
 800780a:	4603      	mov	r3, r0
 800780c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800780e:	7dfb      	ldrb	r3, [r7, #23]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d107      	bne.n	8007824 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800781a:	893a      	ldrh	r2, [r7, #8]
 800781c:	6879      	ldr	r1, [r7, #4]
 800781e:	4618      	mov	r0, r3
 8007820:	f000 fb24 	bl	8007e6c <USBH_ParseStringDesc>
  }

  return status;
 8007824:	7dfb      	ldrb	r3, [r7, #23]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3718      	adds	r7, #24
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	60f8      	str	r0, [r7, #12]
 8007836:	607b      	str	r3, [r7, #4]
 8007838:	460b      	mov	r3, r1
 800783a:	72fb      	strb	r3, [r7, #11]
 800783c:	4613      	mov	r3, r2
 800783e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	789b      	ldrb	r3, [r3, #2]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d11c      	bne.n	8007882 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007848:	7afb      	ldrb	r3, [r7, #11]
 800784a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800784e:	b2da      	uxtb	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2206      	movs	r2, #6
 8007858:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	893a      	ldrh	r2, [r7, #8]
 800785e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007860:	893b      	ldrh	r3, [r7, #8]
 8007862:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800786a:	d104      	bne.n	8007876 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f240 4209 	movw	r2, #1033	; 0x409
 8007872:	829a      	strh	r2, [r3, #20]
 8007874:	e002      	b.n	800787c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8b3a      	ldrh	r2, [r7, #24]
 8007880:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007882:	8b3b      	ldrh	r3, [r7, #24]
 8007884:	461a      	mov	r2, r3
 8007886:	6879      	ldr	r1, [r7, #4]
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f000 fb3d 	bl	8007f08 <USBH_CtlReq>
 800788e:	4603      	mov	r3, r0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	789b      	ldrb	r3, [r3, #2]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d10f      	bne.n	80078cc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2205      	movs	r2, #5
 80078b6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80078b8:	78fb      	ldrb	r3, [r7, #3]
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80078cc:	2200      	movs	r2, #0
 80078ce:	2100      	movs	r1, #0
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fb19 	bl	8007f08 <USBH_CtlReq>
 80078d6:	4603      	mov	r3, r0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	460b      	mov	r3, r1
 80078ea:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	789b      	ldrb	r3, [r3, #2]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d10e      	bne.n	8007912 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2209      	movs	r2, #9
 80078fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	887a      	ldrh	r2, [r7, #2]
 8007904:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007912:	2200      	movs	r2, #0
 8007914:	2100      	movs	r1, #0
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 faf6 	bl	8007f08 <USBH_CtlReq>
 800791c:	4603      	mov	r3, r0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b082      	sub	sp, #8
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	460b      	mov	r3, r1
 8007930:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	789b      	ldrb	r3, [r3, #2]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d10f      	bne.n	800795a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2203      	movs	r2, #3
 8007944:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007946:	78fb      	ldrb	r3, [r7, #3]
 8007948:	b29a      	uxth	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800795a:	2200      	movs	r2, #0
 800795c:	2100      	movs	r1, #0
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fad2 	bl	8007f08 <USBH_CtlReq>
 8007964:	4603      	mov	r3, r0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b082      	sub	sp, #8
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	460b      	mov	r3, r1
 8007978:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	789b      	ldrb	r3, [r3, #2]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d10f      	bne.n	80079a2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2202      	movs	r2, #2
 8007986:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007994:	78fb      	ldrb	r3, [r7, #3]
 8007996:	b29a      	uxth	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80079a2:	2200      	movs	r2, #0
 80079a4:	2100      	movs	r1, #0
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 faae 	bl	8007f08 <USBH_CtlReq>
 80079ac:	4603      	mov	r3, r0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b085      	sub	sp, #20
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	60f8      	str	r0, [r7, #12]
 80079be:	60b9      	str	r1, [r7, #8]
 80079c0:	4613      	mov	r3, r2
 80079c2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	781a      	ldrb	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	785a      	ldrb	r2, [r3, #1]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	3302      	adds	r3, #2
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	b29a      	uxth	r2, r3
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	3303      	adds	r3, #3
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	021b      	lsls	r3, r3, #8
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	4313      	orrs	r3, r2
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	791a      	ldrb	r2, [r3, #4]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	795a      	ldrb	r2, [r3, #5]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	799a      	ldrb	r2, [r3, #6]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	79da      	ldrb	r2, [r3, #7]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	79db      	ldrb	r3, [r3, #7]
 8007a14:	2b20      	cmp	r3, #32
 8007a16:	dc11      	bgt.n	8007a3c <USBH_ParseDevDesc+0x86>
 8007a18:	2b08      	cmp	r3, #8
 8007a1a:	db16      	blt.n	8007a4a <USBH_ParseDevDesc+0x94>
 8007a1c:	3b08      	subs	r3, #8
 8007a1e:	2201      	movs	r2, #1
 8007a20:	fa02 f303 	lsl.w	r3, r2, r3
 8007a24:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	bf14      	ite	ne
 8007a30:	2301      	movne	r3, #1
 8007a32:	2300      	moveq	r3, #0
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d102      	bne.n	8007a40 <USBH_ParseDevDesc+0x8a>
 8007a3a:	e006      	b.n	8007a4a <USBH_ParseDevDesc+0x94>
 8007a3c:	2b40      	cmp	r3, #64	; 0x40
 8007a3e:	d104      	bne.n	8007a4a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	79da      	ldrb	r2, [r3, #7]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	71da      	strb	r2, [r3, #7]
      break;
 8007a48:	e003      	b.n	8007a52 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2240      	movs	r2, #64	; 0x40
 8007a4e:	71da      	strb	r2, [r3, #7]
      break;
 8007a50:	bf00      	nop
  }

  if (length > 8U)
 8007a52:	88fb      	ldrh	r3, [r7, #6]
 8007a54:	2b08      	cmp	r3, #8
 8007a56:	d939      	bls.n	8007acc <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	3309      	adds	r3, #9
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	021b      	lsls	r3, r3, #8
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	330a      	adds	r3, #10
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	330b      	adds	r3, #11
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	021b      	lsls	r3, r3, #8
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	330c      	adds	r3, #12
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	330d      	adds	r3, #13
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	021b      	lsls	r3, r3, #8
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	7b9a      	ldrb	r2, [r3, #14]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	7bda      	ldrb	r2, [r3, #15]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	7c1a      	ldrb	r2, [r3, #16]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	7c5a      	ldrb	r2, [r3, #17]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	745a      	strb	r2, [r3, #17]
  }
}
 8007acc:	bf00      	nop
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08c      	sub	sp, #48	; 0x30
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007aec:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	781a      	ldrb	r2, [r3, #0]
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	785a      	ldrb	r2, [r3, #1]
 8007b14:	6a3b      	ldr	r3, [r7, #32]
 8007b16:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	3302      	adds	r3, #2
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	3303      	adds	r3, #3
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	021b      	lsls	r3, r3, #8
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b34:	bf28      	it	cs
 8007b36:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	791a      	ldrb	r2, [r3, #4]
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	795a      	ldrb	r2, [r3, #5]
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	799a      	ldrb	r2, [r3, #6]
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	79da      	ldrb	r2, [r3, #7]
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	7a1a      	ldrb	r2, [r3, #8]
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	2b09      	cmp	r3, #9
 8007b6e:	d002      	beq.n	8007b76 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	2209      	movs	r2, #9
 8007b74:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007b76:	88fb      	ldrh	r3, [r7, #6]
 8007b78:	2b09      	cmp	r3, #9
 8007b7a:	f240 809d 	bls.w	8007cb8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007b7e:	2309      	movs	r3, #9
 8007b80:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007b82:	2300      	movs	r3, #0
 8007b84:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007b86:	e081      	b.n	8007c8c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007b88:	f107 0316 	add.w	r3, r7, #22
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b90:	f000 f99f 	bl	8007ed2 <USBH_GetNextDesc>
 8007b94:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b98:	785b      	ldrb	r3, [r3, #1]
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	d176      	bne.n	8007c8c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	2b09      	cmp	r3, #9
 8007ba4:	d002      	beq.n	8007bac <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba8:	2209      	movs	r2, #9
 8007baa:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bb0:	221a      	movs	r2, #26
 8007bb2:	fb02 f303 	mul.w	r3, r2, r3
 8007bb6:	3308      	adds	r3, #8
 8007bb8:	6a3a      	ldr	r2, [r7, #32]
 8007bba:	4413      	add	r3, r2
 8007bbc:	3302      	adds	r3, #2
 8007bbe:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007bc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bc2:	69f8      	ldr	r0, [r7, #28]
 8007bc4:	f000 f87e 	bl	8007cc4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007bd2:	e043      	b.n	8007c5c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007bd4:	f107 0316 	add.w	r3, r7, #22
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bdc:	f000 f979 	bl	8007ed2 <USBH_GetNextDesc>
 8007be0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	785b      	ldrb	r3, [r3, #1]
 8007be6:	2b05      	cmp	r3, #5
 8007be8:	d138      	bne.n	8007c5c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	795b      	ldrb	r3, [r3, #5]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d10f      	bne.n	8007c12 <USBH_ParseCfgDesc+0x13a>
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	799b      	ldrb	r3, [r3, #6]
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d10b      	bne.n	8007c12 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	79db      	ldrb	r3, [r3, #7]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10f      	bne.n	8007c22 <USBH_ParseCfgDesc+0x14a>
 8007c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	2b09      	cmp	r3, #9
 8007c08:	d00b      	beq.n	8007c22 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0c:	2209      	movs	r2, #9
 8007c0e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007c10:	e007      	b.n	8007c22 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	2b07      	cmp	r3, #7
 8007c18:	d004      	beq.n	8007c24 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1c:	2207      	movs	r2, #7
 8007c1e:	701a      	strb	r2, [r3, #0]
 8007c20:	e000      	b.n	8007c24 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007c22:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c28:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007c2c:	3201      	adds	r2, #1
 8007c2e:	00d2      	lsls	r2, r2, #3
 8007c30:	211a      	movs	r1, #26
 8007c32:	fb01 f303 	mul.w	r3, r1, r3
 8007c36:	4413      	add	r3, r2
 8007c38:	3308      	adds	r3, #8
 8007c3a:	6a3a      	ldr	r2, [r7, #32]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	3304      	adds	r3, #4
 8007c40:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c44:	69b9      	ldr	r1, [r7, #24]
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f000 f86b 	bl	8007d22 <USBH_ParseEPDesc>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007c52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c56:	3301      	adds	r3, #1
 8007c58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	791b      	ldrb	r3, [r3, #4]
 8007c60:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d204      	bcs.n	8007c72 <USBH_ParseCfgDesc+0x19a>
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	885a      	ldrh	r2, [r3, #2]
 8007c6c:	8afb      	ldrh	r3, [r7, #22]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d8b0      	bhi.n	8007bd4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	791b      	ldrb	r3, [r3, #4]
 8007c76:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d201      	bcs.n	8007c82 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e01c      	b.n	8007cbc <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c86:	3301      	adds	r3, #1
 8007c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d805      	bhi.n	8007ca0 <USBH_ParseCfgDesc+0x1c8>
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	885a      	ldrh	r2, [r3, #2]
 8007c98:	8afb      	ldrh	r3, [r7, #22]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	f63f af74 	bhi.w	8007b88 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	791b      	ldrb	r3, [r3, #4]
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	bf28      	it	cs
 8007ca8:	2302      	movcs	r3, #2
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d201      	bcs.n	8007cb8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e001      	b.n	8007cbc <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007cb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3730      	adds	r7, #48	; 0x30
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	781a      	ldrb	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	785a      	ldrb	r2, [r3, #1]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	789a      	ldrb	r2, [r3, #2]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	78da      	ldrb	r2, [r3, #3]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	791a      	ldrb	r2, [r3, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	795a      	ldrb	r2, [r3, #5]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	799a      	ldrb	r2, [r3, #6]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	79da      	ldrb	r2, [r3, #7]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	7a1a      	ldrb	r2, [r3, #8]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	721a      	strb	r2, [r3, #8]
}
 8007d16:	bf00      	nop
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b087      	sub	sp, #28
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	781a      	ldrb	r2, [r3, #0]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	785a      	ldrb	r2, [r3, #1]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	789a      	ldrb	r2, [r3, #2]
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	78da      	ldrb	r2, [r3, #3]
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3304      	adds	r3, #4
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	3305      	adds	r3, #5
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	021b      	lsls	r3, r3, #8
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	4313      	orrs	r3, r2
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	799a      	ldrb	r2, [r3, #6]
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	889b      	ldrh	r3, [r3, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d102      	bne.n	8007d84 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	75fb      	strb	r3, [r7, #23]
 8007d82:	e033      	b.n	8007dec <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	889b      	ldrh	r3, [r3, #4]
 8007d88:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007d8c:	f023 0307 	bic.w	r3, r3, #7
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	889b      	ldrh	r3, [r3, #4]
 8007d9a:	b21a      	sxth	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	b299      	uxth	r1, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	3305      	adds	r3, #5
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	021b      	lsls	r3, r3, #8
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	430b      	orrs	r3, r1
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d110      	bne.n	8007dde <USBH_ParseEPDesc+0xbc>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	b299      	uxth	r1, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3305      	adds	r3, #5
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	021b      	lsls	r3, r3, #8
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	430b      	orrs	r3, r1
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	b21b      	sxth	r3, r3
 8007dd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007dda:	b21b      	sxth	r3, r3
 8007ddc:	e001      	b.n	8007de2 <USBH_ParseEPDesc+0xc0>
 8007dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007de2:	4313      	orrs	r3, r2
 8007de4:	b21b      	sxth	r3, r3
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d116      	bne.n	8007e24 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	78db      	ldrb	r3, [r3, #3]
 8007dfa:	f003 0303 	and.w	r3, r3, #3
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d005      	beq.n	8007e0e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	78db      	ldrb	r3, [r3, #3]
 8007e06:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007e0a:	2b03      	cmp	r3, #3
 8007e0c:	d127      	bne.n	8007e5e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	799b      	ldrb	r3, [r3, #6]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <USBH_ParseEPDesc+0xfc>
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	799b      	ldrb	r3, [r3, #6]
 8007e1a:	2b10      	cmp	r3, #16
 8007e1c:	d91f      	bls.n	8007e5e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	75fb      	strb	r3, [r7, #23]
 8007e22:	e01c      	b.n	8007e5e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	78db      	ldrb	r3, [r3, #3]
 8007e28:	f003 0303 	and.w	r3, r3, #3
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d10a      	bne.n	8007e46 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	799b      	ldrb	r3, [r3, #6]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d003      	beq.n	8007e40 <USBH_ParseEPDesc+0x11e>
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	799b      	ldrb	r3, [r3, #6]
 8007e3c:	2b10      	cmp	r3, #16
 8007e3e:	d90e      	bls.n	8007e5e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007e40:	2303      	movs	r3, #3
 8007e42:	75fb      	strb	r3, [r7, #23]
 8007e44:	e00b      	b.n	8007e5e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	78db      	ldrb	r3, [r3, #3]
 8007e4a:	f003 0303 	and.w	r3, r3, #3
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d105      	bne.n	8007e5e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	799b      	ldrb	r3, [r3, #6]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	371c      	adds	r7, #28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b087      	sub	sp, #28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	4613      	mov	r3, r2
 8007e78:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d120      	bne.n	8007ec6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	1e9a      	subs	r2, r3, #2
 8007e8a:	88fb      	ldrh	r3, [r7, #6]
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	bf28      	it	cs
 8007e90:	4613      	movcs	r3, r2
 8007e92:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	3302      	adds	r3, #2
 8007e98:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	82fb      	strh	r3, [r7, #22]
 8007e9e:	e00b      	b.n	8007eb8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007ea0:	8afb      	ldrh	r3, [r7, #22]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	781a      	ldrb	r2, [r3, #0]
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007eb2:	8afb      	ldrh	r3, [r7, #22]
 8007eb4:	3302      	adds	r3, #2
 8007eb6:	82fb      	strh	r3, [r7, #22]
 8007eb8:	8afa      	ldrh	r2, [r7, #22]
 8007eba:	8abb      	ldrh	r3, [r7, #20]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d3ef      	bcc.n	8007ea0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	701a      	strb	r2, [r3, #0]
  }
}
 8007ec6:	bf00      	nop
 8007ec8:	371c      	adds	r7, #28
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b085      	sub	sp, #20
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	881a      	ldrh	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	4413      	add	r3, r2
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007efa:	68fb      	ldr	r3, [r7, #12]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	4613      	mov	r3, r2
 8007f14:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007f16:	2301      	movs	r3, #1
 8007f18:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	789b      	ldrb	r3, [r3, #2]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d002      	beq.n	8007f28 <USBH_CtlReq+0x20>
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d00f      	beq.n	8007f46 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007f26:	e027      	b.n	8007f78 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	88fa      	ldrh	r2, [r7, #6]
 8007f32:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2201      	movs	r2, #1
 8007f38:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007f40:	2301      	movs	r3, #1
 8007f42:	75fb      	strb	r3, [r7, #23]
      break;
 8007f44:	e018      	b.n	8007f78 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 f81c 	bl	8007f84 <USBH_HandleControl>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007f50:	7dfb      	ldrb	r3, [r7, #23]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d002      	beq.n	8007f5c <USBH_CtlReq+0x54>
 8007f56:	7dfb      	ldrb	r3, [r7, #23]
 8007f58:	2b03      	cmp	r3, #3
 8007f5a:	d106      	bne.n	8007f6a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	761a      	strb	r2, [r3, #24]
      break;
 8007f68:	e005      	b.n	8007f76 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007f6a:	7dfb      	ldrb	r3, [r7, #23]
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d102      	bne.n	8007f76 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2201      	movs	r2, #1
 8007f74:	709a      	strb	r2, [r3, #2]
      break;
 8007f76:	bf00      	nop
  }
  return status;
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
	...

08007f84 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af02      	add	r7, sp, #8
 8007f8a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	7e1b      	ldrb	r3, [r3, #24]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	2b0a      	cmp	r3, #10
 8007f9c:	f200 8156 	bhi.w	800824c <USBH_HandleControl+0x2c8>
 8007fa0:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <USBH_HandleControl+0x24>)
 8007fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa6:	bf00      	nop
 8007fa8:	08007fd5 	.word	0x08007fd5
 8007fac:	08007fef 	.word	0x08007fef
 8007fb0:	08008059 	.word	0x08008059
 8007fb4:	0800807f 	.word	0x0800807f
 8007fb8:	080080b7 	.word	0x080080b7
 8007fbc:	080080e1 	.word	0x080080e1
 8007fc0:	08008133 	.word	0x08008133
 8007fc4:	08008155 	.word	0x08008155
 8007fc8:	08008191 	.word	0x08008191
 8007fcc:	080081b7 	.word	0x080081b7
 8007fd0:	080081f5 	.word	0x080081f5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f103 0110 	add.w	r1, r3, #16
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	795b      	ldrb	r3, [r3, #5]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f943 	bl	800826c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2202      	movs	r2, #2
 8007fea:	761a      	strb	r2, [r3, #24]
      break;
 8007fec:	e139      	b.n	8008262 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	795b      	ldrb	r3, [r3, #5]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fcc5 	bl	8008984 <USBH_LL_GetURBState>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d11e      	bne.n	8008042 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	7c1b      	ldrb	r3, [r3, #16]
 8008008:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800800c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	8adb      	ldrh	r3, [r3, #22]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00a      	beq.n	800802c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008016:	7b7b      	ldrb	r3, [r7, #13]
 8008018:	2b80      	cmp	r3, #128	; 0x80
 800801a:	d103      	bne.n	8008024 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2203      	movs	r2, #3
 8008020:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008022:	e115      	b.n	8008250 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2205      	movs	r2, #5
 8008028:	761a      	strb	r2, [r3, #24]
      break;
 800802a:	e111      	b.n	8008250 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800802c:	7b7b      	ldrb	r3, [r7, #13]
 800802e:	2b80      	cmp	r3, #128	; 0x80
 8008030:	d103      	bne.n	800803a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2209      	movs	r2, #9
 8008036:	761a      	strb	r2, [r3, #24]
      break;
 8008038:	e10a      	b.n	8008250 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2207      	movs	r2, #7
 800803e:	761a      	strb	r2, [r3, #24]
      break;
 8008040:	e106      	b.n	8008250 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008042:	7bbb      	ldrb	r3, [r7, #14]
 8008044:	2b04      	cmp	r3, #4
 8008046:	d003      	beq.n	8008050 <USBH_HandleControl+0xcc>
 8008048:	7bbb      	ldrb	r3, [r7, #14]
 800804a:	2b02      	cmp	r3, #2
 800804c:	f040 8100 	bne.w	8008250 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	220b      	movs	r2, #11
 8008054:	761a      	strb	r2, [r3, #24]
      break;
 8008056:	e0fb      	b.n	8008250 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800805e:	b29a      	uxth	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6899      	ldr	r1, [r3, #8]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	899a      	ldrh	r2, [r3, #12]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	791b      	ldrb	r3, [r3, #4]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f93a 	bl	80082ea <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2204      	movs	r2, #4
 800807a:	761a      	strb	r2, [r3, #24]
      break;
 800807c:	e0f1      	b.n	8008262 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	791b      	ldrb	r3, [r3, #4]
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fc7d 	bl	8008984 <USBH_LL_GetURBState>
 800808a:	4603      	mov	r3, r0
 800808c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d102      	bne.n	800809a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2209      	movs	r2, #9
 8008098:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800809a:	7bbb      	ldrb	r3, [r7, #14]
 800809c:	2b05      	cmp	r3, #5
 800809e:	d102      	bne.n	80080a6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80080a0:	2303      	movs	r3, #3
 80080a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080a4:	e0d6      	b.n	8008254 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80080a6:	7bbb      	ldrb	r3, [r7, #14]
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	f040 80d3 	bne.w	8008254 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	220b      	movs	r2, #11
 80080b2:	761a      	strb	r2, [r3, #24]
      break;
 80080b4:	e0ce      	b.n	8008254 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6899      	ldr	r1, [r3, #8]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	899a      	ldrh	r2, [r3, #12]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	795b      	ldrb	r3, [r3, #5]
 80080c2:	2001      	movs	r0, #1
 80080c4:	9000      	str	r0, [sp, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f8ea 	bl	80082a0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2206      	movs	r2, #6
 80080dc:	761a      	strb	r2, [r3, #24]
      break;
 80080de:	e0c0      	b.n	8008262 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	795b      	ldrb	r3, [r3, #5]
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fc4c 	bl	8008984 <USBH_LL_GetURBState>
 80080ec:	4603      	mov	r3, r0
 80080ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80080f0:	7bbb      	ldrb	r3, [r7, #14]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d103      	bne.n	80080fe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2207      	movs	r2, #7
 80080fa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080fc:	e0ac      	b.n	8008258 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80080fe:	7bbb      	ldrb	r3, [r7, #14]
 8008100:	2b05      	cmp	r3, #5
 8008102:	d105      	bne.n	8008110 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	220c      	movs	r2, #12
 8008108:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800810a:	2303      	movs	r3, #3
 800810c:	73fb      	strb	r3, [r7, #15]
      break;
 800810e:	e0a3      	b.n	8008258 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	2b02      	cmp	r3, #2
 8008114:	d103      	bne.n	800811e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2205      	movs	r2, #5
 800811a:	761a      	strb	r2, [r3, #24]
      break;
 800811c:	e09c      	b.n	8008258 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800811e:	7bbb      	ldrb	r3, [r7, #14]
 8008120:	2b04      	cmp	r3, #4
 8008122:	f040 8099 	bne.w	8008258 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	220b      	movs	r2, #11
 800812a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800812c:	2302      	movs	r3, #2
 800812e:	73fb      	strb	r3, [r7, #15]
      break;
 8008130:	e092      	b.n	8008258 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	791b      	ldrb	r3, [r3, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	2100      	movs	r1, #0
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f8d5 	bl	80082ea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008146:	b29a      	uxth	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2208      	movs	r2, #8
 8008150:	761a      	strb	r2, [r3, #24]

      break;
 8008152:	e086      	b.n	8008262 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	791b      	ldrb	r3, [r3, #4]
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fc12 	bl	8008984 <USBH_LL_GetURBState>
 8008160:	4603      	mov	r3, r0
 8008162:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008164:	7bbb      	ldrb	r3, [r7, #14]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d105      	bne.n	8008176 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	220d      	movs	r2, #13
 800816e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008174:	e072      	b.n	800825c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008176:	7bbb      	ldrb	r3, [r7, #14]
 8008178:	2b04      	cmp	r3, #4
 800817a:	d103      	bne.n	8008184 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	220b      	movs	r2, #11
 8008180:	761a      	strb	r2, [r3, #24]
      break;
 8008182:	e06b      	b.n	800825c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008184:	7bbb      	ldrb	r3, [r7, #14]
 8008186:	2b05      	cmp	r3, #5
 8008188:	d168      	bne.n	800825c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800818a:	2303      	movs	r3, #3
 800818c:	73fb      	strb	r3, [r7, #15]
      break;
 800818e:	e065      	b.n	800825c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	795b      	ldrb	r3, [r3, #5]
 8008194:	2201      	movs	r2, #1
 8008196:	9200      	str	r2, [sp, #0]
 8008198:	2200      	movs	r2, #0
 800819a:	2100      	movs	r1, #0
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f87f 	bl	80082a0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	220a      	movs	r2, #10
 80081b2:	761a      	strb	r2, [r3, #24]
      break;
 80081b4:	e055      	b.n	8008262 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	795b      	ldrb	r3, [r3, #5]
 80081ba:	4619      	mov	r1, r3
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fbe1 	bl	8008984 <USBH_LL_GetURBState>
 80081c2:	4603      	mov	r3, r0
 80081c4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d105      	bne.n	80081d8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	220d      	movs	r2, #13
 80081d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80081d6:	e043      	b.n	8008260 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d103      	bne.n	80081e6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2209      	movs	r2, #9
 80081e2:	761a      	strb	r2, [r3, #24]
      break;
 80081e4:	e03c      	b.n	8008260 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80081e6:	7bbb      	ldrb	r3, [r7, #14]
 80081e8:	2b04      	cmp	r3, #4
 80081ea:	d139      	bne.n	8008260 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	220b      	movs	r2, #11
 80081f0:	761a      	strb	r2, [r3, #24]
      break;
 80081f2:	e035      	b.n	8008260 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	7e5b      	ldrb	r3, [r3, #25]
 80081f8:	3301      	adds	r3, #1
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	765a      	strb	r2, [r3, #25]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	7e5b      	ldrb	r3, [r3, #25]
 8008204:	2b02      	cmp	r3, #2
 8008206:	d806      	bhi.n	8008216 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008214:	e025      	b.n	8008262 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800821c:	2106      	movs	r1, #6
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	795b      	ldrb	r3, [r3, #5]
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f90c 	bl	800844c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	791b      	ldrb	r3, [r3, #4]
 8008238:	4619      	mov	r1, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f906 	bl	800844c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008246:	2302      	movs	r3, #2
 8008248:	73fb      	strb	r3, [r7, #15]
      break;
 800824a:	e00a      	b.n	8008262 <USBH_HandleControl+0x2de>

    default:
      break;
 800824c:	bf00      	nop
 800824e:	e008      	b.n	8008262 <USBH_HandleControl+0x2de>
      break;
 8008250:	bf00      	nop
 8008252:	e006      	b.n	8008262 <USBH_HandleControl+0x2de>
      break;
 8008254:	bf00      	nop
 8008256:	e004      	b.n	8008262 <USBH_HandleControl+0x2de>
      break;
 8008258:	bf00      	nop
 800825a:	e002      	b.n	8008262 <USBH_HandleControl+0x2de>
      break;
 800825c:	bf00      	nop
 800825e:	e000      	b.n	8008262 <USBH_HandleControl+0x2de>
      break;
 8008260:	bf00      	nop
  }

  return status;
 8008262:	7bfb      	ldrb	r3, [r7, #15]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b088      	sub	sp, #32
 8008270:	af04      	add	r7, sp, #16
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	4613      	mov	r3, r2
 8008278:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800827a:	79f9      	ldrb	r1, [r7, #7]
 800827c:	2300      	movs	r3, #0
 800827e:	9303      	str	r3, [sp, #12]
 8008280:	2308      	movs	r3, #8
 8008282:	9302      	str	r3, [sp, #8]
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	2300      	movs	r3, #0
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	2300      	movs	r3, #0
 800828e:	2200      	movs	r2, #0
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 fb46 	bl	8008922 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b088      	sub	sp, #32
 80082a4:	af04      	add	r7, sp, #16
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	4611      	mov	r1, r2
 80082ac:	461a      	mov	r2, r3
 80082ae:	460b      	mov	r3, r1
 80082b0:	80fb      	strh	r3, [r7, #6]
 80082b2:	4613      	mov	r3, r2
 80082b4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80082c0:	2300      	movs	r3, #0
 80082c2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082c4:	7979      	ldrb	r1, [r7, #5]
 80082c6:	7e3b      	ldrb	r3, [r7, #24]
 80082c8:	9303      	str	r3, [sp, #12]
 80082ca:	88fb      	ldrh	r3, [r7, #6]
 80082cc:	9302      	str	r3, [sp, #8]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	2301      	movs	r3, #1
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	2300      	movs	r3, #0
 80082d8:	2200      	movs	r2, #0
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f000 fb21 	bl	8008922 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b088      	sub	sp, #32
 80082ee:	af04      	add	r7, sp, #16
 80082f0:	60f8      	str	r0, [r7, #12]
 80082f2:	60b9      	str	r1, [r7, #8]
 80082f4:	4611      	mov	r1, r2
 80082f6:	461a      	mov	r2, r3
 80082f8:	460b      	mov	r3, r1
 80082fa:	80fb      	strh	r3, [r7, #6]
 80082fc:	4613      	mov	r3, r2
 80082fe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008300:	7979      	ldrb	r1, [r7, #5]
 8008302:	2300      	movs	r3, #0
 8008304:	9303      	str	r3, [sp, #12]
 8008306:	88fb      	ldrh	r3, [r7, #6]
 8008308:	9302      	str	r3, [sp, #8]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	9301      	str	r3, [sp, #4]
 800830e:	2301      	movs	r3, #1
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	2300      	movs	r3, #0
 8008314:	2201      	movs	r2, #1
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 fb03 	bl	8008922 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800831c:	2300      	movs	r3, #0

}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b088      	sub	sp, #32
 800832a:	af04      	add	r7, sp, #16
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	60b9      	str	r1, [r7, #8]
 8008330:	4611      	mov	r1, r2
 8008332:	461a      	mov	r2, r3
 8008334:	460b      	mov	r3, r1
 8008336:	80fb      	strh	r3, [r7, #6]
 8008338:	4613      	mov	r3, r2
 800833a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800834a:	7979      	ldrb	r1, [r7, #5]
 800834c:	7e3b      	ldrb	r3, [r7, #24]
 800834e:	9303      	str	r3, [sp, #12]
 8008350:	88fb      	ldrh	r3, [r7, #6]
 8008352:	9302      	str	r3, [sp, #8]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	9301      	str	r3, [sp, #4]
 8008358:	2301      	movs	r3, #1
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	2302      	movs	r3, #2
 800835e:	2200      	movs	r2, #0
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f000 fade 	bl	8008922 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b088      	sub	sp, #32
 8008374:	af04      	add	r7, sp, #16
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	4611      	mov	r1, r2
 800837c:	461a      	mov	r2, r3
 800837e:	460b      	mov	r3, r1
 8008380:	80fb      	strh	r3, [r7, #6]
 8008382:	4613      	mov	r3, r2
 8008384:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008386:	7979      	ldrb	r1, [r7, #5]
 8008388:	2300      	movs	r3, #0
 800838a:	9303      	str	r3, [sp, #12]
 800838c:	88fb      	ldrh	r3, [r7, #6]
 800838e:	9302      	str	r3, [sp, #8]
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	9301      	str	r3, [sp, #4]
 8008394:	2301      	movs	r3, #1
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	2302      	movs	r3, #2
 800839a:	2201      	movs	r2, #1
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 fac0 	bl	8008922 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af04      	add	r7, sp, #16
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	4608      	mov	r0, r1
 80083b6:	4611      	mov	r1, r2
 80083b8:	461a      	mov	r2, r3
 80083ba:	4603      	mov	r3, r0
 80083bc:	70fb      	strb	r3, [r7, #3]
 80083be:	460b      	mov	r3, r1
 80083c0:	70bb      	strb	r3, [r7, #2]
 80083c2:	4613      	mov	r3, r2
 80083c4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80083c6:	7878      	ldrb	r0, [r7, #1]
 80083c8:	78ba      	ldrb	r2, [r7, #2]
 80083ca:	78f9      	ldrb	r1, [r7, #3]
 80083cc:	8b3b      	ldrh	r3, [r7, #24]
 80083ce:	9302      	str	r3, [sp, #8]
 80083d0:	7d3b      	ldrb	r3, [r7, #20]
 80083d2:	9301      	str	r3, [sp, #4]
 80083d4:	7c3b      	ldrb	r3, [r7, #16]
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	4603      	mov	r3, r0
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fa53 	bl	8008886 <USBH_LL_OpenPipe>

  return USBH_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b082      	sub	sp, #8
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	460b      	mov	r3, r1
 80083f4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80083f6:	78fb      	ldrb	r3, [r7, #3]
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fa72 	bl	80088e4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	460b      	mov	r3, r1
 8008414:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f836 	bl	8008488 <USBH_GetFreePipe>
 800841c:	4603      	mov	r3, r0
 800841e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008420:	89fb      	ldrh	r3, [r7, #14]
 8008422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008426:	4293      	cmp	r3, r2
 8008428:	d00a      	beq.n	8008440 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800842a:	78fa      	ldrb	r2, [r7, #3]
 800842c:	89fb      	ldrh	r3, [r7, #14]
 800842e:	f003 030f 	and.w	r3, r3, #15
 8008432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	33e0      	adds	r3, #224	; 0xe0
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	440b      	add	r3, r1
 800843e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008440:	89fb      	ldrh	r3, [r7, #14]
 8008442:	b2db      	uxtb	r3, r3
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008458:	78fb      	ldrb	r3, [r7, #3]
 800845a:	2b0f      	cmp	r3, #15
 800845c:	d80d      	bhi.n	800847a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800845e:	78fb      	ldrb	r3, [r7, #3]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	33e0      	adds	r3, #224	; 0xe0
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	685a      	ldr	r2, [r3, #4]
 800846a:	78fb      	ldrb	r3, [r7, #3]
 800846c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008470:	6879      	ldr	r1, [r7, #4]
 8008472:	33e0      	adds	r3, #224	; 0xe0
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	440b      	add	r3, r1
 8008478:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008490:	2300      	movs	r3, #0
 8008492:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008494:	2300      	movs	r3, #0
 8008496:	73fb      	strb	r3, [r7, #15]
 8008498:	e00f      	b.n	80084ba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800849a:	7bfb      	ldrb	r3, [r7, #15]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	33e0      	adds	r3, #224	; 0xe0
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	4413      	add	r3, r2
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d102      	bne.n	80084b4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	e007      	b.n	80084c4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80084b4:	7bfb      	ldrb	r3, [r7, #15]
 80084b6:	3301      	adds	r3, #1
 80084b8:	73fb      	strb	r3, [r7, #15]
 80084ba:	7bfb      	ldrb	r3, [r7, #15]
 80084bc:	2b0f      	cmp	r3, #15
 80084be:	d9ec      	bls.n	800849a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80084c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80084d4:	2201      	movs	r2, #1
 80084d6:	490e      	ldr	r1, [pc, #56]	; (8008510 <MX_USB_HOST_Init+0x40>)
 80084d8:	480e      	ldr	r0, [pc, #56]	; (8008514 <MX_USB_HOST_Init+0x44>)
 80084da:	f7fe fba7 	bl	8006c2c <USBH_Init>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80084e4:	f7f8 fb50 	bl	8000b88 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80084e8:	490b      	ldr	r1, [pc, #44]	; (8008518 <MX_USB_HOST_Init+0x48>)
 80084ea:	480a      	ldr	r0, [pc, #40]	; (8008514 <MX_USB_HOST_Init+0x44>)
 80084ec:	f7fe fc2c 	bl	8006d48 <USBH_RegisterClass>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d001      	beq.n	80084fa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80084f6:	f7f8 fb47 	bl	8000b88 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80084fa:	4806      	ldr	r0, [pc, #24]	; (8008514 <MX_USB_HOST_Init+0x44>)
 80084fc:	f7fe fcb0 	bl	8006e60 <USBH_Start>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008506:	f7f8 fb3f 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800850a:	bf00      	nop
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	08008531 	.word	0x08008531
 8008514:	20000600 	.word	0x20000600
 8008518:	20000014 	.word	0x20000014

0800851c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008520:	4802      	ldr	r0, [pc, #8]	; (800852c <MX_USB_HOST_Process+0x10>)
 8008522:	f7fe fcad 	bl	8006e80 <USBH_Process>
}
 8008526:	bf00      	nop
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20000600 	.word	0x20000600

08008530 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800853c:	78fb      	ldrb	r3, [r7, #3]
 800853e:	3b01      	subs	r3, #1
 8008540:	2b04      	cmp	r3, #4
 8008542:	d819      	bhi.n	8008578 <USBH_UserProcess+0x48>
 8008544:	a201      	add	r2, pc, #4	; (adr r2, 800854c <USBH_UserProcess+0x1c>)
 8008546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854a:	bf00      	nop
 800854c:	08008579 	.word	0x08008579
 8008550:	08008569 	.word	0x08008569
 8008554:	08008579 	.word	0x08008579
 8008558:	08008571 	.word	0x08008571
 800855c:	08008561 	.word	0x08008561
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008560:	4b09      	ldr	r3, [pc, #36]	; (8008588 <USBH_UserProcess+0x58>)
 8008562:	2203      	movs	r2, #3
 8008564:	701a      	strb	r2, [r3, #0]
  break;
 8008566:	e008      	b.n	800857a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008568:	4b07      	ldr	r3, [pc, #28]	; (8008588 <USBH_UserProcess+0x58>)
 800856a:	2202      	movs	r2, #2
 800856c:	701a      	strb	r2, [r3, #0]
  break;
 800856e:	e004      	b.n	800857a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008570:	4b05      	ldr	r3, [pc, #20]	; (8008588 <USBH_UserProcess+0x58>)
 8008572:	2201      	movs	r2, #1
 8008574:	701a      	strb	r2, [r3, #0]
  break;
 8008576:	e000      	b.n	800857a <USBH_UserProcess+0x4a>

  default:
  break;
 8008578:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800857a:	bf00      	nop
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	200009d8 	.word	0x200009d8

0800858c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08a      	sub	sp, #40	; 0x28
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008594:	f107 0314 	add.w	r3, r7, #20
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	605a      	str	r2, [r3, #4]
 800859e:	609a      	str	r2, [r3, #8]
 80085a0:	60da      	str	r2, [r3, #12]
 80085a2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085ac:	d147      	bne.n	800863e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085ae:	2300      	movs	r3, #0
 80085b0:	613b      	str	r3, [r7, #16]
 80085b2:	4b25      	ldr	r3, [pc, #148]	; (8008648 <HAL_HCD_MspInit+0xbc>)
 80085b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b6:	4a24      	ldr	r2, [pc, #144]	; (8008648 <HAL_HCD_MspInit+0xbc>)
 80085b8:	f043 0301 	orr.w	r3, r3, #1
 80085bc:	6313      	str	r3, [r2, #48]	; 0x30
 80085be:	4b22      	ldr	r3, [pc, #136]	; (8008648 <HAL_HCD_MspInit+0xbc>)
 80085c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	613b      	str	r3, [r7, #16]
 80085c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80085ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085d0:	2300      	movs	r3, #0
 80085d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085d4:	2300      	movs	r3, #0
 80085d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80085d8:	f107 0314 	add.w	r3, r7, #20
 80085dc:	4619      	mov	r1, r3
 80085de:	481b      	ldr	r0, [pc, #108]	; (800864c <HAL_HCD_MspInit+0xc0>)
 80085e0:	f7f9 f96c 	bl	80018bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80085e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80085e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085ea:	2302      	movs	r3, #2
 80085ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ee:	2300      	movs	r3, #0
 80085f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085f2:	2303      	movs	r3, #3
 80085f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80085f6:	230a      	movs	r3, #10
 80085f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085fa:	f107 0314 	add.w	r3, r7, #20
 80085fe:	4619      	mov	r1, r3
 8008600:	4812      	ldr	r0, [pc, #72]	; (800864c <HAL_HCD_MspInit+0xc0>)
 8008602:	f7f9 f95b 	bl	80018bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008606:	4b10      	ldr	r3, [pc, #64]	; (8008648 <HAL_HCD_MspInit+0xbc>)
 8008608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800860a:	4a0f      	ldr	r2, [pc, #60]	; (8008648 <HAL_HCD_MspInit+0xbc>)
 800860c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008610:	6353      	str	r3, [r2, #52]	; 0x34
 8008612:	2300      	movs	r3, #0
 8008614:	60fb      	str	r3, [r7, #12]
 8008616:	4b0c      	ldr	r3, [pc, #48]	; (8008648 <HAL_HCD_MspInit+0xbc>)
 8008618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800861a:	4a0b      	ldr	r2, [pc, #44]	; (8008648 <HAL_HCD_MspInit+0xbc>)
 800861c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008620:	6453      	str	r3, [r2, #68]	; 0x44
 8008622:	4b09      	ldr	r3, [pc, #36]	; (8008648 <HAL_HCD_MspInit+0xbc>)
 8008624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800862e:	2200      	movs	r2, #0
 8008630:	2100      	movs	r1, #0
 8008632:	2043      	movs	r0, #67	; 0x43
 8008634:	f7f9 f90b 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008638:	2043      	movs	r0, #67	; 0x43
 800863a:	f7f9 f924 	bl	8001886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800863e:	bf00      	nop
 8008640:	3728      	adds	r7, #40	; 0x28
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	40023800 	.word	0x40023800
 800864c:	40020000 	.word	0x40020000

08008650 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800865e:	4618      	mov	r0, r3
 8008660:	f7fe ffed 	bl	800763e <USBH_LL_IncTimer>
}
 8008664:	bf00      	nop
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800867a:	4618      	mov	r0, r3
 800867c:	f7ff f825 	bl	80076ca <USBH_LL_Connect>
}
 8008680:	bf00      	nop
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008696:	4618      	mov	r0, r3
 8008698:	f7ff f82e 	bl	80076f8 <USBH_LL_Disconnect>
}
 800869c:	bf00      	nop
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70fb      	strb	r3, [r7, #3]
 80086b0:	4613      	mov	r3, r2
 80086b2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80086b4:	bf00      	nop
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fe ffdf 	bl	8007692 <USBH_LL_PortEnabled>
}
 80086d4:	bf00      	nop
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fe ffdf 	bl	80076ae <USBH_LL_PortDisabled>
}
 80086f0:	bf00      	nop
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008706:	2b01      	cmp	r3, #1
 8008708:	d12a      	bne.n	8008760 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800870a:	4a18      	ldr	r2, [pc, #96]	; (800876c <USBH_LL_Init+0x74>)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a15      	ldr	r2, [pc, #84]	; (800876c <USBH_LL_Init+0x74>)
 8008716:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800871a:	4b14      	ldr	r3, [pc, #80]	; (800876c <USBH_LL_Init+0x74>)
 800871c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008720:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008722:	4b12      	ldr	r3, [pc, #72]	; (800876c <USBH_LL_Init+0x74>)
 8008724:	2208      	movs	r2, #8
 8008726:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008728:	4b10      	ldr	r3, [pc, #64]	; (800876c <USBH_LL_Init+0x74>)
 800872a:	2201      	movs	r2, #1
 800872c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800872e:	4b0f      	ldr	r3, [pc, #60]	; (800876c <USBH_LL_Init+0x74>)
 8008730:	2200      	movs	r2, #0
 8008732:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008734:	4b0d      	ldr	r3, [pc, #52]	; (800876c <USBH_LL_Init+0x74>)
 8008736:	2202      	movs	r2, #2
 8008738:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800873a:	4b0c      	ldr	r3, [pc, #48]	; (800876c <USBH_LL_Init+0x74>)
 800873c:	2200      	movs	r2, #0
 800873e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008740:	480a      	ldr	r0, [pc, #40]	; (800876c <USBH_LL_Init+0x74>)
 8008742:	f7f9 fa70 	bl	8001c26 <HAL_HCD_Init>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800874c:	f7f8 fa1c 	bl	8000b88 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008750:	4806      	ldr	r0, [pc, #24]	; (800876c <USBH_LL_Init+0x74>)
 8008752:	f7f9 fe54 	bl	80023fe <HAL_HCD_GetCurrentFrame>
 8008756:	4603      	mov	r3, r0
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7fe ff60 	bl	8007620 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	200009dc 	.word	0x200009dc

08008770 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800877c:	2300      	movs	r3, #0
 800877e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008786:	4618      	mov	r0, r3
 8008788:	f7f9 fdc3 	bl	8002312 <HAL_HCD_Start>
 800878c:	4603      	mov	r3, r0
 800878e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008790:	7bfb      	ldrb	r3, [r7, #15]
 8008792:	4618      	mov	r0, r3
 8008794:	f000 f95c 	bl	8008a50 <USBH_Get_USB_Status>
 8008798:	4603      	mov	r3, r0
 800879a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800879c:	7bbb      	ldrb	r3, [r7, #14]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087bc:	4618      	mov	r0, r3
 80087be:	f7f9 fdcb 	bl	8002358 <HAL_HCD_Stop>
 80087c2:	4603      	mov	r3, r0
 80087c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 f941 	bl	8008a50 <USBH_Get_USB_Status>
 80087ce:	4603      	mov	r3, r0
 80087d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80087e4:	2301      	movs	r3, #1
 80087e6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7f9 fe13 	bl	800241a <HAL_HCD_GetCurrentSpeed>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d00c      	beq.n	8008814 <USBH_LL_GetSpeed+0x38>
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d80d      	bhi.n	800881a <USBH_LL_GetSpeed+0x3e>
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d002      	beq.n	8008808 <USBH_LL_GetSpeed+0x2c>
 8008802:	2b01      	cmp	r3, #1
 8008804:	d003      	beq.n	800880e <USBH_LL_GetSpeed+0x32>
 8008806:	e008      	b.n	800881a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]
    break;
 800880c:	e008      	b.n	8008820 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800880e:	2301      	movs	r3, #1
 8008810:	73fb      	strb	r3, [r7, #15]
    break;
 8008812:	e005      	b.n	8008820 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008814:	2302      	movs	r3, #2
 8008816:	73fb      	strb	r3, [r7, #15]
    break;
 8008818:	e002      	b.n	8008820 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800881a:	2301      	movs	r3, #1
 800881c:	73fb      	strb	r3, [r7, #15]
    break;
 800881e:	bf00      	nop
  }
  return  speed;
 8008820:	7bfb      	ldrb	r3, [r7, #15]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008840:	4618      	mov	r0, r3
 8008842:	f7f9 fda6 	bl	8002392 <HAL_HCD_ResetPort>
 8008846:	4603      	mov	r3, r0
 8008848:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800884a:	7bfb      	ldrb	r3, [r7, #15]
 800884c:	4618      	mov	r0, r3
 800884e:	f000 f8ff 	bl	8008a50 <USBH_Get_USB_Status>
 8008852:	4603      	mov	r3, r0
 8008854:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008856:	7bbb      	ldrb	r3, [r7, #14]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008872:	78fa      	ldrb	r2, [r7, #3]
 8008874:	4611      	mov	r1, r2
 8008876:	4618      	mov	r0, r3
 8008878:	f7f9 fdad 	bl	80023d6 <HAL_HCD_HC_GetXferCount>
 800887c:	4603      	mov	r3, r0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008886:	b590      	push	{r4, r7, lr}
 8008888:	b089      	sub	sp, #36	; 0x24
 800888a:	af04      	add	r7, sp, #16
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	4608      	mov	r0, r1
 8008890:	4611      	mov	r1, r2
 8008892:	461a      	mov	r2, r3
 8008894:	4603      	mov	r3, r0
 8008896:	70fb      	strb	r3, [r7, #3]
 8008898:	460b      	mov	r3, r1
 800889a:	70bb      	strb	r3, [r7, #2]
 800889c:	4613      	mov	r3, r2
 800889e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80088ae:	787c      	ldrb	r4, [r7, #1]
 80088b0:	78ba      	ldrb	r2, [r7, #2]
 80088b2:	78f9      	ldrb	r1, [r7, #3]
 80088b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088b6:	9302      	str	r3, [sp, #8]
 80088b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	4623      	mov	r3, r4
 80088c6:	f7f9 fa10 	bl	8001cea <HAL_HCD_HC_Init>
 80088ca:	4603      	mov	r3, r0
 80088cc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 f8bd 	bl	8008a50 <USBH_Get_USB_Status>
 80088d6:	4603      	mov	r3, r0
 80088d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088da:	7bbb      	ldrb	r3, [r7, #14]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd90      	pop	{r4, r7, pc}

080088e4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088fe:	78fa      	ldrb	r2, [r7, #3]
 8008900:	4611      	mov	r1, r2
 8008902:	4618      	mov	r0, r3
 8008904:	f7f9 fa80 	bl	8001e08 <HAL_HCD_HC_Halt>
 8008908:	4603      	mov	r3, r0
 800890a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800890c:	7bfb      	ldrb	r3, [r7, #15]
 800890e:	4618      	mov	r0, r3
 8008910:	f000 f89e 	bl	8008a50 <USBH_Get_USB_Status>
 8008914:	4603      	mov	r3, r0
 8008916:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008918:	7bbb      	ldrb	r3, [r7, #14]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008922:	b590      	push	{r4, r7, lr}
 8008924:	b089      	sub	sp, #36	; 0x24
 8008926:	af04      	add	r7, sp, #16
 8008928:	6078      	str	r0, [r7, #4]
 800892a:	4608      	mov	r0, r1
 800892c:	4611      	mov	r1, r2
 800892e:	461a      	mov	r2, r3
 8008930:	4603      	mov	r3, r0
 8008932:	70fb      	strb	r3, [r7, #3]
 8008934:	460b      	mov	r3, r1
 8008936:	70bb      	strb	r3, [r7, #2]
 8008938:	4613      	mov	r3, r2
 800893a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800894a:	787c      	ldrb	r4, [r7, #1]
 800894c:	78ba      	ldrb	r2, [r7, #2]
 800894e:	78f9      	ldrb	r1, [r7, #3]
 8008950:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008954:	9303      	str	r3, [sp, #12]
 8008956:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008958:	9302      	str	r3, [sp, #8]
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	9301      	str	r3, [sp, #4]
 800895e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	4623      	mov	r3, r4
 8008966:	f7f9 fa73 	bl	8001e50 <HAL_HCD_HC_SubmitRequest>
 800896a:	4603      	mov	r3, r0
 800896c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	4618      	mov	r0, r3
 8008972:	f000 f86d 	bl	8008a50 <USBH_Get_USB_Status>
 8008976:	4603      	mov	r3, r0
 8008978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800897a:	7bbb      	ldrb	r3, [r7, #14]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	bd90      	pop	{r4, r7, pc}

08008984 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008996:	78fa      	ldrb	r2, [r7, #3]
 8008998:	4611      	mov	r1, r2
 800899a:	4618      	mov	r0, r3
 800899c:	f7f9 fd07 	bl	80023ae <HAL_HCD_HC_GetURBState>
 80089a0:	4603      	mov	r3, r0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b082      	sub	sp, #8
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	460b      	mov	r3, r1
 80089b4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d103      	bne.n	80089c8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80089c0:	78fb      	ldrb	r3, [r7, #3]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f000 f870 	bl	8008aa8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80089c8:	20c8      	movs	r0, #200	; 0xc8
 80089ca:	f7f8 fe41 	bl	8001650 <HAL_Delay>
  return USBH_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
 80089e4:	4613      	mov	r3, r2
 80089e6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089ee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	212c      	movs	r1, #44	; 0x2c
 80089f6:	fb01 f303 	mul.w	r3, r1, r3
 80089fa:	4413      	add	r3, r2
 80089fc:	333b      	adds	r3, #59	; 0x3b
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d009      	beq.n	8008a18 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008a04:	78fb      	ldrb	r3, [r7, #3]
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	212c      	movs	r1, #44	; 0x2c
 8008a0a:	fb01 f303 	mul.w	r3, r1, r3
 8008a0e:	4413      	add	r3, r2
 8008a10:	3354      	adds	r3, #84	; 0x54
 8008a12:	78ba      	ldrb	r2, [r7, #2]
 8008a14:	701a      	strb	r2, [r3, #0]
 8008a16:	e008      	b.n	8008a2a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008a18:	78fb      	ldrb	r3, [r7, #3]
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	212c      	movs	r1, #44	; 0x2c
 8008a1e:	fb01 f303 	mul.w	r3, r1, r3
 8008a22:	4413      	add	r3, r2
 8008a24:	3355      	adds	r3, #85	; 0x55
 8008a26:	78ba      	ldrb	r2, [r7, #2]
 8008a28:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7f8 fe05 	bl	8001650 <HAL_Delay>
}
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
	...

08008a50 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	4603      	mov	r3, r0
 8008a58:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a5e:	79fb      	ldrb	r3, [r7, #7]
 8008a60:	2b03      	cmp	r3, #3
 8008a62:	d817      	bhi.n	8008a94 <USBH_Get_USB_Status+0x44>
 8008a64:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <USBH_Get_USB_Status+0x1c>)
 8008a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6a:	bf00      	nop
 8008a6c:	08008a7d 	.word	0x08008a7d
 8008a70:	08008a83 	.word	0x08008a83
 8008a74:	08008a89 	.word	0x08008a89
 8008a78:	08008a8f 	.word	0x08008a8f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a80:	e00b      	b.n	8008a9a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008a82:	2302      	movs	r3, #2
 8008a84:	73fb      	strb	r3, [r7, #15]
    break;
 8008a86:	e008      	b.n	8008a9a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a8c:	e005      	b.n	8008a9a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008a8e:	2302      	movs	r3, #2
 8008a90:	73fb      	strb	r3, [r7, #15]
    break;
 8008a92:	e002      	b.n	8008a9a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008a94:	2302      	movs	r3, #2
 8008a96:	73fb      	strb	r3, [r7, #15]
    break;
 8008a98:	bf00      	nop
  }
  return usb_status;
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	4603      	mov	r3, r0
 8008ab0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008ab2:	79fb      	ldrb	r3, [r7, #7]
 8008ab4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008ab6:	79fb      	ldrb	r3, [r7, #7]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d102      	bne.n	8008ac2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73fb      	strb	r3, [r7, #15]
 8008ac0:	e001      	b.n	8008ac6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	2101      	movs	r1, #1
 8008acc:	4803      	ldr	r0, [pc, #12]	; (8008adc <MX_DriverVbusFS+0x34>)
 8008ace:	f7f9 f891 	bl	8001bf4 <HAL_GPIO_WritePin>
}
 8008ad2:	bf00      	nop
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	40020800 	.word	0x40020800

08008ae0 <__errno>:
 8008ae0:	4b01      	ldr	r3, [pc, #4]	; (8008ae8 <__errno+0x8>)
 8008ae2:	6818      	ldr	r0, [r3, #0]
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	20000034 	.word	0x20000034

08008aec <__libc_init_array>:
 8008aec:	b570      	push	{r4, r5, r6, lr}
 8008aee:	4d0d      	ldr	r5, [pc, #52]	; (8008b24 <__libc_init_array+0x38>)
 8008af0:	4c0d      	ldr	r4, [pc, #52]	; (8008b28 <__libc_init_array+0x3c>)
 8008af2:	1b64      	subs	r4, r4, r5
 8008af4:	10a4      	asrs	r4, r4, #2
 8008af6:	2600      	movs	r6, #0
 8008af8:	42a6      	cmp	r6, r4
 8008afa:	d109      	bne.n	8008b10 <__libc_init_array+0x24>
 8008afc:	4d0b      	ldr	r5, [pc, #44]	; (8008b2c <__libc_init_array+0x40>)
 8008afe:	4c0c      	ldr	r4, [pc, #48]	; (8008b30 <__libc_init_array+0x44>)
 8008b00:	f000 fcb8 	bl	8009474 <_init>
 8008b04:	1b64      	subs	r4, r4, r5
 8008b06:	10a4      	asrs	r4, r4, #2
 8008b08:	2600      	movs	r6, #0
 8008b0a:	42a6      	cmp	r6, r4
 8008b0c:	d105      	bne.n	8008b1a <__libc_init_array+0x2e>
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}
 8008b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b14:	4798      	blx	r3
 8008b16:	3601      	adds	r6, #1
 8008b18:	e7ee      	b.n	8008af8 <__libc_init_array+0xc>
 8008b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b1e:	4798      	blx	r3
 8008b20:	3601      	adds	r6, #1
 8008b22:	e7f2      	b.n	8008b0a <__libc_init_array+0x1e>
 8008b24:	0800a258 	.word	0x0800a258
 8008b28:	0800a258 	.word	0x0800a258
 8008b2c:	0800a258 	.word	0x0800a258
 8008b30:	0800a25c 	.word	0x0800a25c

08008b34 <malloc>:
 8008b34:	4b02      	ldr	r3, [pc, #8]	; (8008b40 <malloc+0xc>)
 8008b36:	4601      	mov	r1, r0
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	f000 b87f 	b.w	8008c3c <_malloc_r>
 8008b3e:	bf00      	nop
 8008b40:	20000034 	.word	0x20000034

08008b44 <free>:
 8008b44:	4b02      	ldr	r3, [pc, #8]	; (8008b50 <free+0xc>)
 8008b46:	4601      	mov	r1, r0
 8008b48:	6818      	ldr	r0, [r3, #0]
 8008b4a:	f000 b80b 	b.w	8008b64 <_free_r>
 8008b4e:	bf00      	nop
 8008b50:	20000034 	.word	0x20000034

08008b54 <memset>:
 8008b54:	4402      	add	r2, r0
 8008b56:	4603      	mov	r3, r0
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d100      	bne.n	8008b5e <memset+0xa>
 8008b5c:	4770      	bx	lr
 8008b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b62:	e7f9      	b.n	8008b58 <memset+0x4>

08008b64 <_free_r>:
 8008b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b66:	2900      	cmp	r1, #0
 8008b68:	d044      	beq.n	8008bf4 <_free_r+0x90>
 8008b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b6e:	9001      	str	r0, [sp, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f1a1 0404 	sub.w	r4, r1, #4
 8008b76:	bfb8      	it	lt
 8008b78:	18e4      	addlt	r4, r4, r3
 8008b7a:	f000 f91d 	bl	8008db8 <__malloc_lock>
 8008b7e:	4a1e      	ldr	r2, [pc, #120]	; (8008bf8 <_free_r+0x94>)
 8008b80:	9801      	ldr	r0, [sp, #4]
 8008b82:	6813      	ldr	r3, [r2, #0]
 8008b84:	b933      	cbnz	r3, 8008b94 <_free_r+0x30>
 8008b86:	6063      	str	r3, [r4, #4]
 8008b88:	6014      	str	r4, [r2, #0]
 8008b8a:	b003      	add	sp, #12
 8008b8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b90:	f000 b918 	b.w	8008dc4 <__malloc_unlock>
 8008b94:	42a3      	cmp	r3, r4
 8008b96:	d908      	bls.n	8008baa <_free_r+0x46>
 8008b98:	6825      	ldr	r5, [r4, #0]
 8008b9a:	1961      	adds	r1, r4, r5
 8008b9c:	428b      	cmp	r3, r1
 8008b9e:	bf01      	itttt	eq
 8008ba0:	6819      	ldreq	r1, [r3, #0]
 8008ba2:	685b      	ldreq	r3, [r3, #4]
 8008ba4:	1949      	addeq	r1, r1, r5
 8008ba6:	6021      	streq	r1, [r4, #0]
 8008ba8:	e7ed      	b.n	8008b86 <_free_r+0x22>
 8008baa:	461a      	mov	r2, r3
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	b10b      	cbz	r3, 8008bb4 <_free_r+0x50>
 8008bb0:	42a3      	cmp	r3, r4
 8008bb2:	d9fa      	bls.n	8008baa <_free_r+0x46>
 8008bb4:	6811      	ldr	r1, [r2, #0]
 8008bb6:	1855      	adds	r5, r2, r1
 8008bb8:	42a5      	cmp	r5, r4
 8008bba:	d10b      	bne.n	8008bd4 <_free_r+0x70>
 8008bbc:	6824      	ldr	r4, [r4, #0]
 8008bbe:	4421      	add	r1, r4
 8008bc0:	1854      	adds	r4, r2, r1
 8008bc2:	42a3      	cmp	r3, r4
 8008bc4:	6011      	str	r1, [r2, #0]
 8008bc6:	d1e0      	bne.n	8008b8a <_free_r+0x26>
 8008bc8:	681c      	ldr	r4, [r3, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	6053      	str	r3, [r2, #4]
 8008bce:	4421      	add	r1, r4
 8008bd0:	6011      	str	r1, [r2, #0]
 8008bd2:	e7da      	b.n	8008b8a <_free_r+0x26>
 8008bd4:	d902      	bls.n	8008bdc <_free_r+0x78>
 8008bd6:	230c      	movs	r3, #12
 8008bd8:	6003      	str	r3, [r0, #0]
 8008bda:	e7d6      	b.n	8008b8a <_free_r+0x26>
 8008bdc:	6825      	ldr	r5, [r4, #0]
 8008bde:	1961      	adds	r1, r4, r5
 8008be0:	428b      	cmp	r3, r1
 8008be2:	bf04      	itt	eq
 8008be4:	6819      	ldreq	r1, [r3, #0]
 8008be6:	685b      	ldreq	r3, [r3, #4]
 8008be8:	6063      	str	r3, [r4, #4]
 8008bea:	bf04      	itt	eq
 8008bec:	1949      	addeq	r1, r1, r5
 8008bee:	6021      	streq	r1, [r4, #0]
 8008bf0:	6054      	str	r4, [r2, #4]
 8008bf2:	e7ca      	b.n	8008b8a <_free_r+0x26>
 8008bf4:	b003      	add	sp, #12
 8008bf6:	bd30      	pop	{r4, r5, pc}
 8008bf8:	20000ce0 	.word	0x20000ce0

08008bfc <sbrk_aligned>:
 8008bfc:	b570      	push	{r4, r5, r6, lr}
 8008bfe:	4e0e      	ldr	r6, [pc, #56]	; (8008c38 <sbrk_aligned+0x3c>)
 8008c00:	460c      	mov	r4, r1
 8008c02:	6831      	ldr	r1, [r6, #0]
 8008c04:	4605      	mov	r5, r0
 8008c06:	b911      	cbnz	r1, 8008c0e <sbrk_aligned+0x12>
 8008c08:	f000 f88c 	bl	8008d24 <_sbrk_r>
 8008c0c:	6030      	str	r0, [r6, #0]
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4628      	mov	r0, r5
 8008c12:	f000 f887 	bl	8008d24 <_sbrk_r>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	d00a      	beq.n	8008c30 <sbrk_aligned+0x34>
 8008c1a:	1cc4      	adds	r4, r0, #3
 8008c1c:	f024 0403 	bic.w	r4, r4, #3
 8008c20:	42a0      	cmp	r0, r4
 8008c22:	d007      	beq.n	8008c34 <sbrk_aligned+0x38>
 8008c24:	1a21      	subs	r1, r4, r0
 8008c26:	4628      	mov	r0, r5
 8008c28:	f000 f87c 	bl	8008d24 <_sbrk_r>
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d101      	bne.n	8008c34 <sbrk_aligned+0x38>
 8008c30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008c34:	4620      	mov	r0, r4
 8008c36:	bd70      	pop	{r4, r5, r6, pc}
 8008c38:	20000ce4 	.word	0x20000ce4

08008c3c <_malloc_r>:
 8008c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c40:	1ccd      	adds	r5, r1, #3
 8008c42:	f025 0503 	bic.w	r5, r5, #3
 8008c46:	3508      	adds	r5, #8
 8008c48:	2d0c      	cmp	r5, #12
 8008c4a:	bf38      	it	cc
 8008c4c:	250c      	movcc	r5, #12
 8008c4e:	2d00      	cmp	r5, #0
 8008c50:	4607      	mov	r7, r0
 8008c52:	db01      	blt.n	8008c58 <_malloc_r+0x1c>
 8008c54:	42a9      	cmp	r1, r5
 8008c56:	d905      	bls.n	8008c64 <_malloc_r+0x28>
 8008c58:	230c      	movs	r3, #12
 8008c5a:	603b      	str	r3, [r7, #0]
 8008c5c:	2600      	movs	r6, #0
 8008c5e:	4630      	mov	r0, r6
 8008c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c64:	4e2e      	ldr	r6, [pc, #184]	; (8008d20 <_malloc_r+0xe4>)
 8008c66:	f000 f8a7 	bl	8008db8 <__malloc_lock>
 8008c6a:	6833      	ldr	r3, [r6, #0]
 8008c6c:	461c      	mov	r4, r3
 8008c6e:	bb34      	cbnz	r4, 8008cbe <_malloc_r+0x82>
 8008c70:	4629      	mov	r1, r5
 8008c72:	4638      	mov	r0, r7
 8008c74:	f7ff ffc2 	bl	8008bfc <sbrk_aligned>
 8008c78:	1c43      	adds	r3, r0, #1
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	d14d      	bne.n	8008d1a <_malloc_r+0xde>
 8008c7e:	6834      	ldr	r4, [r6, #0]
 8008c80:	4626      	mov	r6, r4
 8008c82:	2e00      	cmp	r6, #0
 8008c84:	d140      	bne.n	8008d08 <_malloc_r+0xcc>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	4631      	mov	r1, r6
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	eb04 0803 	add.w	r8, r4, r3
 8008c90:	f000 f848 	bl	8008d24 <_sbrk_r>
 8008c94:	4580      	cmp	r8, r0
 8008c96:	d13a      	bne.n	8008d0e <_malloc_r+0xd2>
 8008c98:	6821      	ldr	r1, [r4, #0]
 8008c9a:	3503      	adds	r5, #3
 8008c9c:	1a6d      	subs	r5, r5, r1
 8008c9e:	f025 0503 	bic.w	r5, r5, #3
 8008ca2:	3508      	adds	r5, #8
 8008ca4:	2d0c      	cmp	r5, #12
 8008ca6:	bf38      	it	cc
 8008ca8:	250c      	movcc	r5, #12
 8008caa:	4629      	mov	r1, r5
 8008cac:	4638      	mov	r0, r7
 8008cae:	f7ff ffa5 	bl	8008bfc <sbrk_aligned>
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	d02b      	beq.n	8008d0e <_malloc_r+0xd2>
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	442b      	add	r3, r5
 8008cba:	6023      	str	r3, [r4, #0]
 8008cbc:	e00e      	b.n	8008cdc <_malloc_r+0xa0>
 8008cbe:	6822      	ldr	r2, [r4, #0]
 8008cc0:	1b52      	subs	r2, r2, r5
 8008cc2:	d41e      	bmi.n	8008d02 <_malloc_r+0xc6>
 8008cc4:	2a0b      	cmp	r2, #11
 8008cc6:	d916      	bls.n	8008cf6 <_malloc_r+0xba>
 8008cc8:	1961      	adds	r1, r4, r5
 8008cca:	42a3      	cmp	r3, r4
 8008ccc:	6025      	str	r5, [r4, #0]
 8008cce:	bf18      	it	ne
 8008cd0:	6059      	strne	r1, [r3, #4]
 8008cd2:	6863      	ldr	r3, [r4, #4]
 8008cd4:	bf08      	it	eq
 8008cd6:	6031      	streq	r1, [r6, #0]
 8008cd8:	5162      	str	r2, [r4, r5]
 8008cda:	604b      	str	r3, [r1, #4]
 8008cdc:	4638      	mov	r0, r7
 8008cde:	f104 060b 	add.w	r6, r4, #11
 8008ce2:	f000 f86f 	bl	8008dc4 <__malloc_unlock>
 8008ce6:	f026 0607 	bic.w	r6, r6, #7
 8008cea:	1d23      	adds	r3, r4, #4
 8008cec:	1af2      	subs	r2, r6, r3
 8008cee:	d0b6      	beq.n	8008c5e <_malloc_r+0x22>
 8008cf0:	1b9b      	subs	r3, r3, r6
 8008cf2:	50a3      	str	r3, [r4, r2]
 8008cf4:	e7b3      	b.n	8008c5e <_malloc_r+0x22>
 8008cf6:	6862      	ldr	r2, [r4, #4]
 8008cf8:	42a3      	cmp	r3, r4
 8008cfa:	bf0c      	ite	eq
 8008cfc:	6032      	streq	r2, [r6, #0]
 8008cfe:	605a      	strne	r2, [r3, #4]
 8008d00:	e7ec      	b.n	8008cdc <_malloc_r+0xa0>
 8008d02:	4623      	mov	r3, r4
 8008d04:	6864      	ldr	r4, [r4, #4]
 8008d06:	e7b2      	b.n	8008c6e <_malloc_r+0x32>
 8008d08:	4634      	mov	r4, r6
 8008d0a:	6876      	ldr	r6, [r6, #4]
 8008d0c:	e7b9      	b.n	8008c82 <_malloc_r+0x46>
 8008d0e:	230c      	movs	r3, #12
 8008d10:	603b      	str	r3, [r7, #0]
 8008d12:	4638      	mov	r0, r7
 8008d14:	f000 f856 	bl	8008dc4 <__malloc_unlock>
 8008d18:	e7a1      	b.n	8008c5e <_malloc_r+0x22>
 8008d1a:	6025      	str	r5, [r4, #0]
 8008d1c:	e7de      	b.n	8008cdc <_malloc_r+0xa0>
 8008d1e:	bf00      	nop
 8008d20:	20000ce0 	.word	0x20000ce0

08008d24 <_sbrk_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4d06      	ldr	r5, [pc, #24]	; (8008d40 <_sbrk_r+0x1c>)
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	602b      	str	r3, [r5, #0]
 8008d30:	f7f8 fbaa 	bl	8001488 <_sbrk>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d102      	bne.n	8008d3e <_sbrk_r+0x1a>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	b103      	cbz	r3, 8008d3e <_sbrk_r+0x1a>
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	20000ce8 	.word	0x20000ce8

08008d44 <_vsniprintf_r>:
 8008d44:	b530      	push	{r4, r5, lr}
 8008d46:	4614      	mov	r4, r2
 8008d48:	2c00      	cmp	r4, #0
 8008d4a:	b09b      	sub	sp, #108	; 0x6c
 8008d4c:	4605      	mov	r5, r0
 8008d4e:	461a      	mov	r2, r3
 8008d50:	da05      	bge.n	8008d5e <_vsniprintf_r+0x1a>
 8008d52:	238b      	movs	r3, #139	; 0x8b
 8008d54:	6003      	str	r3, [r0, #0]
 8008d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d5a:	b01b      	add	sp, #108	; 0x6c
 8008d5c:	bd30      	pop	{r4, r5, pc}
 8008d5e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008d62:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008d66:	bf14      	ite	ne
 8008d68:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008d6c:	4623      	moveq	r3, r4
 8008d6e:	9302      	str	r3, [sp, #8]
 8008d70:	9305      	str	r3, [sp, #20]
 8008d72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d76:	9100      	str	r1, [sp, #0]
 8008d78:	9104      	str	r1, [sp, #16]
 8008d7a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008d7e:	4669      	mov	r1, sp
 8008d80:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008d82:	f000 f881 	bl	8008e88 <_svfiprintf_r>
 8008d86:	1c43      	adds	r3, r0, #1
 8008d88:	bfbc      	itt	lt
 8008d8a:	238b      	movlt	r3, #139	; 0x8b
 8008d8c:	602b      	strlt	r3, [r5, #0]
 8008d8e:	2c00      	cmp	r4, #0
 8008d90:	d0e3      	beq.n	8008d5a <_vsniprintf_r+0x16>
 8008d92:	9b00      	ldr	r3, [sp, #0]
 8008d94:	2200      	movs	r2, #0
 8008d96:	701a      	strb	r2, [r3, #0]
 8008d98:	e7df      	b.n	8008d5a <_vsniprintf_r+0x16>
	...

08008d9c <vsniprintf>:
 8008d9c:	b507      	push	{r0, r1, r2, lr}
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	4613      	mov	r3, r2
 8008da2:	460a      	mov	r2, r1
 8008da4:	4601      	mov	r1, r0
 8008da6:	4803      	ldr	r0, [pc, #12]	; (8008db4 <vsniprintf+0x18>)
 8008da8:	6800      	ldr	r0, [r0, #0]
 8008daa:	f7ff ffcb 	bl	8008d44 <_vsniprintf_r>
 8008dae:	b003      	add	sp, #12
 8008db0:	f85d fb04 	ldr.w	pc, [sp], #4
 8008db4:	20000034 	.word	0x20000034

08008db8 <__malloc_lock>:
 8008db8:	4801      	ldr	r0, [pc, #4]	; (8008dc0 <__malloc_lock+0x8>)
 8008dba:	f000 baf9 	b.w	80093b0 <__retarget_lock_acquire_recursive>
 8008dbe:	bf00      	nop
 8008dc0:	20000cec 	.word	0x20000cec

08008dc4 <__malloc_unlock>:
 8008dc4:	4801      	ldr	r0, [pc, #4]	; (8008dcc <__malloc_unlock+0x8>)
 8008dc6:	f000 baf4 	b.w	80093b2 <__retarget_lock_release_recursive>
 8008dca:	bf00      	nop
 8008dcc:	20000cec 	.word	0x20000cec

08008dd0 <__ssputs_r>:
 8008dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd4:	688e      	ldr	r6, [r1, #8]
 8008dd6:	429e      	cmp	r6, r3
 8008dd8:	4682      	mov	sl, r0
 8008dda:	460c      	mov	r4, r1
 8008ddc:	4690      	mov	r8, r2
 8008dde:	461f      	mov	r7, r3
 8008de0:	d838      	bhi.n	8008e54 <__ssputs_r+0x84>
 8008de2:	898a      	ldrh	r2, [r1, #12]
 8008de4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008de8:	d032      	beq.n	8008e50 <__ssputs_r+0x80>
 8008dea:	6825      	ldr	r5, [r4, #0]
 8008dec:	6909      	ldr	r1, [r1, #16]
 8008dee:	eba5 0901 	sub.w	r9, r5, r1
 8008df2:	6965      	ldr	r5, [r4, #20]
 8008df4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008df8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	444b      	add	r3, r9
 8008e00:	106d      	asrs	r5, r5, #1
 8008e02:	429d      	cmp	r5, r3
 8008e04:	bf38      	it	cc
 8008e06:	461d      	movcc	r5, r3
 8008e08:	0553      	lsls	r3, r2, #21
 8008e0a:	d531      	bpl.n	8008e70 <__ssputs_r+0xa0>
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	f7ff ff15 	bl	8008c3c <_malloc_r>
 8008e12:	4606      	mov	r6, r0
 8008e14:	b950      	cbnz	r0, 8008e2c <__ssputs_r+0x5c>
 8008e16:	230c      	movs	r3, #12
 8008e18:	f8ca 3000 	str.w	r3, [sl]
 8008e1c:	89a3      	ldrh	r3, [r4, #12]
 8008e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e22:	81a3      	strh	r3, [r4, #12]
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e2c:	6921      	ldr	r1, [r4, #16]
 8008e2e:	464a      	mov	r2, r9
 8008e30:	f000 fac0 	bl	80093b4 <memcpy>
 8008e34:	89a3      	ldrh	r3, [r4, #12]
 8008e36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e3e:	81a3      	strh	r3, [r4, #12]
 8008e40:	6126      	str	r6, [r4, #16]
 8008e42:	6165      	str	r5, [r4, #20]
 8008e44:	444e      	add	r6, r9
 8008e46:	eba5 0509 	sub.w	r5, r5, r9
 8008e4a:	6026      	str	r6, [r4, #0]
 8008e4c:	60a5      	str	r5, [r4, #8]
 8008e4e:	463e      	mov	r6, r7
 8008e50:	42be      	cmp	r6, r7
 8008e52:	d900      	bls.n	8008e56 <__ssputs_r+0x86>
 8008e54:	463e      	mov	r6, r7
 8008e56:	6820      	ldr	r0, [r4, #0]
 8008e58:	4632      	mov	r2, r6
 8008e5a:	4641      	mov	r1, r8
 8008e5c:	f000 fab8 	bl	80093d0 <memmove>
 8008e60:	68a3      	ldr	r3, [r4, #8]
 8008e62:	1b9b      	subs	r3, r3, r6
 8008e64:	60a3      	str	r3, [r4, #8]
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	4433      	add	r3, r6
 8008e6a:	6023      	str	r3, [r4, #0]
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	e7db      	b.n	8008e28 <__ssputs_r+0x58>
 8008e70:	462a      	mov	r2, r5
 8008e72:	f000 fac7 	bl	8009404 <_realloc_r>
 8008e76:	4606      	mov	r6, r0
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d1e1      	bne.n	8008e40 <__ssputs_r+0x70>
 8008e7c:	6921      	ldr	r1, [r4, #16]
 8008e7e:	4650      	mov	r0, sl
 8008e80:	f7ff fe70 	bl	8008b64 <_free_r>
 8008e84:	e7c7      	b.n	8008e16 <__ssputs_r+0x46>
	...

08008e88 <_svfiprintf_r>:
 8008e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8c:	4698      	mov	r8, r3
 8008e8e:	898b      	ldrh	r3, [r1, #12]
 8008e90:	061b      	lsls	r3, r3, #24
 8008e92:	b09d      	sub	sp, #116	; 0x74
 8008e94:	4607      	mov	r7, r0
 8008e96:	460d      	mov	r5, r1
 8008e98:	4614      	mov	r4, r2
 8008e9a:	d50e      	bpl.n	8008eba <_svfiprintf_r+0x32>
 8008e9c:	690b      	ldr	r3, [r1, #16]
 8008e9e:	b963      	cbnz	r3, 8008eba <_svfiprintf_r+0x32>
 8008ea0:	2140      	movs	r1, #64	; 0x40
 8008ea2:	f7ff fecb 	bl	8008c3c <_malloc_r>
 8008ea6:	6028      	str	r0, [r5, #0]
 8008ea8:	6128      	str	r0, [r5, #16]
 8008eaa:	b920      	cbnz	r0, 8008eb6 <_svfiprintf_r+0x2e>
 8008eac:	230c      	movs	r3, #12
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eb4:	e0d1      	b.n	800905a <_svfiprintf_r+0x1d2>
 8008eb6:	2340      	movs	r3, #64	; 0x40
 8008eb8:	616b      	str	r3, [r5, #20]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8008ebe:	2320      	movs	r3, #32
 8008ec0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ec4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ec8:	2330      	movs	r3, #48	; 0x30
 8008eca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009074 <_svfiprintf_r+0x1ec>
 8008ece:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ed2:	f04f 0901 	mov.w	r9, #1
 8008ed6:	4623      	mov	r3, r4
 8008ed8:	469a      	mov	sl, r3
 8008eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ede:	b10a      	cbz	r2, 8008ee4 <_svfiprintf_r+0x5c>
 8008ee0:	2a25      	cmp	r2, #37	; 0x25
 8008ee2:	d1f9      	bne.n	8008ed8 <_svfiprintf_r+0x50>
 8008ee4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ee8:	d00b      	beq.n	8008f02 <_svfiprintf_r+0x7a>
 8008eea:	465b      	mov	r3, fp
 8008eec:	4622      	mov	r2, r4
 8008eee:	4629      	mov	r1, r5
 8008ef0:	4638      	mov	r0, r7
 8008ef2:	f7ff ff6d 	bl	8008dd0 <__ssputs_r>
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	f000 80aa 	beq.w	8009050 <_svfiprintf_r+0x1c8>
 8008efc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008efe:	445a      	add	r2, fp
 8008f00:	9209      	str	r2, [sp, #36]	; 0x24
 8008f02:	f89a 3000 	ldrb.w	r3, [sl]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f000 80a2 	beq.w	8009050 <_svfiprintf_r+0x1c8>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f16:	f10a 0a01 	add.w	sl, sl, #1
 8008f1a:	9304      	str	r3, [sp, #16]
 8008f1c:	9307      	str	r3, [sp, #28]
 8008f1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f22:	931a      	str	r3, [sp, #104]	; 0x68
 8008f24:	4654      	mov	r4, sl
 8008f26:	2205      	movs	r2, #5
 8008f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f2c:	4851      	ldr	r0, [pc, #324]	; (8009074 <_svfiprintf_r+0x1ec>)
 8008f2e:	f7f7 f957 	bl	80001e0 <memchr>
 8008f32:	9a04      	ldr	r2, [sp, #16]
 8008f34:	b9d8      	cbnz	r0, 8008f6e <_svfiprintf_r+0xe6>
 8008f36:	06d0      	lsls	r0, r2, #27
 8008f38:	bf44      	itt	mi
 8008f3a:	2320      	movmi	r3, #32
 8008f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f40:	0711      	lsls	r1, r2, #28
 8008f42:	bf44      	itt	mi
 8008f44:	232b      	movmi	r3, #43	; 0x2b
 8008f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f50:	d015      	beq.n	8008f7e <_svfiprintf_r+0xf6>
 8008f52:	9a07      	ldr	r2, [sp, #28]
 8008f54:	4654      	mov	r4, sl
 8008f56:	2000      	movs	r0, #0
 8008f58:	f04f 0c0a 	mov.w	ip, #10
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f62:	3b30      	subs	r3, #48	; 0x30
 8008f64:	2b09      	cmp	r3, #9
 8008f66:	d94e      	bls.n	8009006 <_svfiprintf_r+0x17e>
 8008f68:	b1b0      	cbz	r0, 8008f98 <_svfiprintf_r+0x110>
 8008f6a:	9207      	str	r2, [sp, #28]
 8008f6c:	e014      	b.n	8008f98 <_svfiprintf_r+0x110>
 8008f6e:	eba0 0308 	sub.w	r3, r0, r8
 8008f72:	fa09 f303 	lsl.w	r3, r9, r3
 8008f76:	4313      	orrs	r3, r2
 8008f78:	9304      	str	r3, [sp, #16]
 8008f7a:	46a2      	mov	sl, r4
 8008f7c:	e7d2      	b.n	8008f24 <_svfiprintf_r+0x9c>
 8008f7e:	9b03      	ldr	r3, [sp, #12]
 8008f80:	1d19      	adds	r1, r3, #4
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	9103      	str	r1, [sp, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	bfbb      	ittet	lt
 8008f8a:	425b      	neglt	r3, r3
 8008f8c:	f042 0202 	orrlt.w	r2, r2, #2
 8008f90:	9307      	strge	r3, [sp, #28]
 8008f92:	9307      	strlt	r3, [sp, #28]
 8008f94:	bfb8      	it	lt
 8008f96:	9204      	strlt	r2, [sp, #16]
 8008f98:	7823      	ldrb	r3, [r4, #0]
 8008f9a:	2b2e      	cmp	r3, #46	; 0x2e
 8008f9c:	d10c      	bne.n	8008fb8 <_svfiprintf_r+0x130>
 8008f9e:	7863      	ldrb	r3, [r4, #1]
 8008fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8008fa2:	d135      	bne.n	8009010 <_svfiprintf_r+0x188>
 8008fa4:	9b03      	ldr	r3, [sp, #12]
 8008fa6:	1d1a      	adds	r2, r3, #4
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	9203      	str	r2, [sp, #12]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	bfb8      	it	lt
 8008fb0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008fb4:	3402      	adds	r4, #2
 8008fb6:	9305      	str	r3, [sp, #20]
 8008fb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009084 <_svfiprintf_r+0x1fc>
 8008fbc:	7821      	ldrb	r1, [r4, #0]
 8008fbe:	2203      	movs	r2, #3
 8008fc0:	4650      	mov	r0, sl
 8008fc2:	f7f7 f90d 	bl	80001e0 <memchr>
 8008fc6:	b140      	cbz	r0, 8008fda <_svfiprintf_r+0x152>
 8008fc8:	2340      	movs	r3, #64	; 0x40
 8008fca:	eba0 000a 	sub.w	r0, r0, sl
 8008fce:	fa03 f000 	lsl.w	r0, r3, r0
 8008fd2:	9b04      	ldr	r3, [sp, #16]
 8008fd4:	4303      	orrs	r3, r0
 8008fd6:	3401      	adds	r4, #1
 8008fd8:	9304      	str	r3, [sp, #16]
 8008fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fde:	4826      	ldr	r0, [pc, #152]	; (8009078 <_svfiprintf_r+0x1f0>)
 8008fe0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fe4:	2206      	movs	r2, #6
 8008fe6:	f7f7 f8fb 	bl	80001e0 <memchr>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d038      	beq.n	8009060 <_svfiprintf_r+0x1d8>
 8008fee:	4b23      	ldr	r3, [pc, #140]	; (800907c <_svfiprintf_r+0x1f4>)
 8008ff0:	bb1b      	cbnz	r3, 800903a <_svfiprintf_r+0x1b2>
 8008ff2:	9b03      	ldr	r3, [sp, #12]
 8008ff4:	3307      	adds	r3, #7
 8008ff6:	f023 0307 	bic.w	r3, r3, #7
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	9303      	str	r3, [sp, #12]
 8008ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009000:	4433      	add	r3, r6
 8009002:	9309      	str	r3, [sp, #36]	; 0x24
 8009004:	e767      	b.n	8008ed6 <_svfiprintf_r+0x4e>
 8009006:	fb0c 3202 	mla	r2, ip, r2, r3
 800900a:	460c      	mov	r4, r1
 800900c:	2001      	movs	r0, #1
 800900e:	e7a5      	b.n	8008f5c <_svfiprintf_r+0xd4>
 8009010:	2300      	movs	r3, #0
 8009012:	3401      	adds	r4, #1
 8009014:	9305      	str	r3, [sp, #20]
 8009016:	4619      	mov	r1, r3
 8009018:	f04f 0c0a 	mov.w	ip, #10
 800901c:	4620      	mov	r0, r4
 800901e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009022:	3a30      	subs	r2, #48	; 0x30
 8009024:	2a09      	cmp	r2, #9
 8009026:	d903      	bls.n	8009030 <_svfiprintf_r+0x1a8>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d0c5      	beq.n	8008fb8 <_svfiprintf_r+0x130>
 800902c:	9105      	str	r1, [sp, #20]
 800902e:	e7c3      	b.n	8008fb8 <_svfiprintf_r+0x130>
 8009030:	fb0c 2101 	mla	r1, ip, r1, r2
 8009034:	4604      	mov	r4, r0
 8009036:	2301      	movs	r3, #1
 8009038:	e7f0      	b.n	800901c <_svfiprintf_r+0x194>
 800903a:	ab03      	add	r3, sp, #12
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	462a      	mov	r2, r5
 8009040:	4b0f      	ldr	r3, [pc, #60]	; (8009080 <_svfiprintf_r+0x1f8>)
 8009042:	a904      	add	r1, sp, #16
 8009044:	4638      	mov	r0, r7
 8009046:	f3af 8000 	nop.w
 800904a:	1c42      	adds	r2, r0, #1
 800904c:	4606      	mov	r6, r0
 800904e:	d1d6      	bne.n	8008ffe <_svfiprintf_r+0x176>
 8009050:	89ab      	ldrh	r3, [r5, #12]
 8009052:	065b      	lsls	r3, r3, #25
 8009054:	f53f af2c 	bmi.w	8008eb0 <_svfiprintf_r+0x28>
 8009058:	9809      	ldr	r0, [sp, #36]	; 0x24
 800905a:	b01d      	add	sp, #116	; 0x74
 800905c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009060:	ab03      	add	r3, sp, #12
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	462a      	mov	r2, r5
 8009066:	4b06      	ldr	r3, [pc, #24]	; (8009080 <_svfiprintf_r+0x1f8>)
 8009068:	a904      	add	r1, sp, #16
 800906a:	4638      	mov	r0, r7
 800906c:	f000 f87a 	bl	8009164 <_printf_i>
 8009070:	e7eb      	b.n	800904a <_svfiprintf_r+0x1c2>
 8009072:	bf00      	nop
 8009074:	0800a21c 	.word	0x0800a21c
 8009078:	0800a226 	.word	0x0800a226
 800907c:	00000000 	.word	0x00000000
 8009080:	08008dd1 	.word	0x08008dd1
 8009084:	0800a222 	.word	0x0800a222

08009088 <_printf_common>:
 8009088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800908c:	4616      	mov	r6, r2
 800908e:	4699      	mov	r9, r3
 8009090:	688a      	ldr	r2, [r1, #8]
 8009092:	690b      	ldr	r3, [r1, #16]
 8009094:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009098:	4293      	cmp	r3, r2
 800909a:	bfb8      	it	lt
 800909c:	4613      	movlt	r3, r2
 800909e:	6033      	str	r3, [r6, #0]
 80090a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090a4:	4607      	mov	r7, r0
 80090a6:	460c      	mov	r4, r1
 80090a8:	b10a      	cbz	r2, 80090ae <_printf_common+0x26>
 80090aa:	3301      	adds	r3, #1
 80090ac:	6033      	str	r3, [r6, #0]
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	0699      	lsls	r1, r3, #26
 80090b2:	bf42      	ittt	mi
 80090b4:	6833      	ldrmi	r3, [r6, #0]
 80090b6:	3302      	addmi	r3, #2
 80090b8:	6033      	strmi	r3, [r6, #0]
 80090ba:	6825      	ldr	r5, [r4, #0]
 80090bc:	f015 0506 	ands.w	r5, r5, #6
 80090c0:	d106      	bne.n	80090d0 <_printf_common+0x48>
 80090c2:	f104 0a19 	add.w	sl, r4, #25
 80090c6:	68e3      	ldr	r3, [r4, #12]
 80090c8:	6832      	ldr	r2, [r6, #0]
 80090ca:	1a9b      	subs	r3, r3, r2
 80090cc:	42ab      	cmp	r3, r5
 80090ce:	dc26      	bgt.n	800911e <_printf_common+0x96>
 80090d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090d4:	1e13      	subs	r3, r2, #0
 80090d6:	6822      	ldr	r2, [r4, #0]
 80090d8:	bf18      	it	ne
 80090da:	2301      	movne	r3, #1
 80090dc:	0692      	lsls	r2, r2, #26
 80090de:	d42b      	bmi.n	8009138 <_printf_common+0xb0>
 80090e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090e4:	4649      	mov	r1, r9
 80090e6:	4638      	mov	r0, r7
 80090e8:	47c0      	blx	r8
 80090ea:	3001      	adds	r0, #1
 80090ec:	d01e      	beq.n	800912c <_printf_common+0xa4>
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	68e5      	ldr	r5, [r4, #12]
 80090f2:	6832      	ldr	r2, [r6, #0]
 80090f4:	f003 0306 	and.w	r3, r3, #6
 80090f8:	2b04      	cmp	r3, #4
 80090fa:	bf08      	it	eq
 80090fc:	1aad      	subeq	r5, r5, r2
 80090fe:	68a3      	ldr	r3, [r4, #8]
 8009100:	6922      	ldr	r2, [r4, #16]
 8009102:	bf0c      	ite	eq
 8009104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009108:	2500      	movne	r5, #0
 800910a:	4293      	cmp	r3, r2
 800910c:	bfc4      	itt	gt
 800910e:	1a9b      	subgt	r3, r3, r2
 8009110:	18ed      	addgt	r5, r5, r3
 8009112:	2600      	movs	r6, #0
 8009114:	341a      	adds	r4, #26
 8009116:	42b5      	cmp	r5, r6
 8009118:	d11a      	bne.n	8009150 <_printf_common+0xc8>
 800911a:	2000      	movs	r0, #0
 800911c:	e008      	b.n	8009130 <_printf_common+0xa8>
 800911e:	2301      	movs	r3, #1
 8009120:	4652      	mov	r2, sl
 8009122:	4649      	mov	r1, r9
 8009124:	4638      	mov	r0, r7
 8009126:	47c0      	blx	r8
 8009128:	3001      	adds	r0, #1
 800912a:	d103      	bne.n	8009134 <_printf_common+0xac>
 800912c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009134:	3501      	adds	r5, #1
 8009136:	e7c6      	b.n	80090c6 <_printf_common+0x3e>
 8009138:	18e1      	adds	r1, r4, r3
 800913a:	1c5a      	adds	r2, r3, #1
 800913c:	2030      	movs	r0, #48	; 0x30
 800913e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009142:	4422      	add	r2, r4
 8009144:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009148:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800914c:	3302      	adds	r3, #2
 800914e:	e7c7      	b.n	80090e0 <_printf_common+0x58>
 8009150:	2301      	movs	r3, #1
 8009152:	4622      	mov	r2, r4
 8009154:	4649      	mov	r1, r9
 8009156:	4638      	mov	r0, r7
 8009158:	47c0      	blx	r8
 800915a:	3001      	adds	r0, #1
 800915c:	d0e6      	beq.n	800912c <_printf_common+0xa4>
 800915e:	3601      	adds	r6, #1
 8009160:	e7d9      	b.n	8009116 <_printf_common+0x8e>
	...

08009164 <_printf_i>:
 8009164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009168:	7e0f      	ldrb	r7, [r1, #24]
 800916a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800916c:	2f78      	cmp	r7, #120	; 0x78
 800916e:	4691      	mov	r9, r2
 8009170:	4680      	mov	r8, r0
 8009172:	460c      	mov	r4, r1
 8009174:	469a      	mov	sl, r3
 8009176:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800917a:	d807      	bhi.n	800918c <_printf_i+0x28>
 800917c:	2f62      	cmp	r7, #98	; 0x62
 800917e:	d80a      	bhi.n	8009196 <_printf_i+0x32>
 8009180:	2f00      	cmp	r7, #0
 8009182:	f000 80d8 	beq.w	8009336 <_printf_i+0x1d2>
 8009186:	2f58      	cmp	r7, #88	; 0x58
 8009188:	f000 80a3 	beq.w	80092d2 <_printf_i+0x16e>
 800918c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009190:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009194:	e03a      	b.n	800920c <_printf_i+0xa8>
 8009196:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800919a:	2b15      	cmp	r3, #21
 800919c:	d8f6      	bhi.n	800918c <_printf_i+0x28>
 800919e:	a101      	add	r1, pc, #4	; (adr r1, 80091a4 <_printf_i+0x40>)
 80091a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091a4:	080091fd 	.word	0x080091fd
 80091a8:	08009211 	.word	0x08009211
 80091ac:	0800918d 	.word	0x0800918d
 80091b0:	0800918d 	.word	0x0800918d
 80091b4:	0800918d 	.word	0x0800918d
 80091b8:	0800918d 	.word	0x0800918d
 80091bc:	08009211 	.word	0x08009211
 80091c0:	0800918d 	.word	0x0800918d
 80091c4:	0800918d 	.word	0x0800918d
 80091c8:	0800918d 	.word	0x0800918d
 80091cc:	0800918d 	.word	0x0800918d
 80091d0:	0800931d 	.word	0x0800931d
 80091d4:	08009241 	.word	0x08009241
 80091d8:	080092ff 	.word	0x080092ff
 80091dc:	0800918d 	.word	0x0800918d
 80091e0:	0800918d 	.word	0x0800918d
 80091e4:	0800933f 	.word	0x0800933f
 80091e8:	0800918d 	.word	0x0800918d
 80091ec:	08009241 	.word	0x08009241
 80091f0:	0800918d 	.word	0x0800918d
 80091f4:	0800918d 	.word	0x0800918d
 80091f8:	08009307 	.word	0x08009307
 80091fc:	682b      	ldr	r3, [r5, #0]
 80091fe:	1d1a      	adds	r2, r3, #4
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	602a      	str	r2, [r5, #0]
 8009204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800920c:	2301      	movs	r3, #1
 800920e:	e0a3      	b.n	8009358 <_printf_i+0x1f4>
 8009210:	6820      	ldr	r0, [r4, #0]
 8009212:	6829      	ldr	r1, [r5, #0]
 8009214:	0606      	lsls	r6, r0, #24
 8009216:	f101 0304 	add.w	r3, r1, #4
 800921a:	d50a      	bpl.n	8009232 <_printf_i+0xce>
 800921c:	680e      	ldr	r6, [r1, #0]
 800921e:	602b      	str	r3, [r5, #0]
 8009220:	2e00      	cmp	r6, #0
 8009222:	da03      	bge.n	800922c <_printf_i+0xc8>
 8009224:	232d      	movs	r3, #45	; 0x2d
 8009226:	4276      	negs	r6, r6
 8009228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800922c:	485e      	ldr	r0, [pc, #376]	; (80093a8 <_printf_i+0x244>)
 800922e:	230a      	movs	r3, #10
 8009230:	e019      	b.n	8009266 <_printf_i+0x102>
 8009232:	680e      	ldr	r6, [r1, #0]
 8009234:	602b      	str	r3, [r5, #0]
 8009236:	f010 0f40 	tst.w	r0, #64	; 0x40
 800923a:	bf18      	it	ne
 800923c:	b236      	sxthne	r6, r6
 800923e:	e7ef      	b.n	8009220 <_printf_i+0xbc>
 8009240:	682b      	ldr	r3, [r5, #0]
 8009242:	6820      	ldr	r0, [r4, #0]
 8009244:	1d19      	adds	r1, r3, #4
 8009246:	6029      	str	r1, [r5, #0]
 8009248:	0601      	lsls	r1, r0, #24
 800924a:	d501      	bpl.n	8009250 <_printf_i+0xec>
 800924c:	681e      	ldr	r6, [r3, #0]
 800924e:	e002      	b.n	8009256 <_printf_i+0xf2>
 8009250:	0646      	lsls	r6, r0, #25
 8009252:	d5fb      	bpl.n	800924c <_printf_i+0xe8>
 8009254:	881e      	ldrh	r6, [r3, #0]
 8009256:	4854      	ldr	r0, [pc, #336]	; (80093a8 <_printf_i+0x244>)
 8009258:	2f6f      	cmp	r7, #111	; 0x6f
 800925a:	bf0c      	ite	eq
 800925c:	2308      	moveq	r3, #8
 800925e:	230a      	movne	r3, #10
 8009260:	2100      	movs	r1, #0
 8009262:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009266:	6865      	ldr	r5, [r4, #4]
 8009268:	60a5      	str	r5, [r4, #8]
 800926a:	2d00      	cmp	r5, #0
 800926c:	bfa2      	ittt	ge
 800926e:	6821      	ldrge	r1, [r4, #0]
 8009270:	f021 0104 	bicge.w	r1, r1, #4
 8009274:	6021      	strge	r1, [r4, #0]
 8009276:	b90e      	cbnz	r6, 800927c <_printf_i+0x118>
 8009278:	2d00      	cmp	r5, #0
 800927a:	d04d      	beq.n	8009318 <_printf_i+0x1b4>
 800927c:	4615      	mov	r5, r2
 800927e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009282:	fb03 6711 	mls	r7, r3, r1, r6
 8009286:	5dc7      	ldrb	r7, [r0, r7]
 8009288:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800928c:	4637      	mov	r7, r6
 800928e:	42bb      	cmp	r3, r7
 8009290:	460e      	mov	r6, r1
 8009292:	d9f4      	bls.n	800927e <_printf_i+0x11a>
 8009294:	2b08      	cmp	r3, #8
 8009296:	d10b      	bne.n	80092b0 <_printf_i+0x14c>
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	07de      	lsls	r6, r3, #31
 800929c:	d508      	bpl.n	80092b0 <_printf_i+0x14c>
 800929e:	6923      	ldr	r3, [r4, #16]
 80092a0:	6861      	ldr	r1, [r4, #4]
 80092a2:	4299      	cmp	r1, r3
 80092a4:	bfde      	ittt	le
 80092a6:	2330      	movle	r3, #48	; 0x30
 80092a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80092ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80092b0:	1b52      	subs	r2, r2, r5
 80092b2:	6122      	str	r2, [r4, #16]
 80092b4:	f8cd a000 	str.w	sl, [sp]
 80092b8:	464b      	mov	r3, r9
 80092ba:	aa03      	add	r2, sp, #12
 80092bc:	4621      	mov	r1, r4
 80092be:	4640      	mov	r0, r8
 80092c0:	f7ff fee2 	bl	8009088 <_printf_common>
 80092c4:	3001      	adds	r0, #1
 80092c6:	d14c      	bne.n	8009362 <_printf_i+0x1fe>
 80092c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092cc:	b004      	add	sp, #16
 80092ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d2:	4835      	ldr	r0, [pc, #212]	; (80093a8 <_printf_i+0x244>)
 80092d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80092d8:	6829      	ldr	r1, [r5, #0]
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80092e0:	6029      	str	r1, [r5, #0]
 80092e2:	061d      	lsls	r5, r3, #24
 80092e4:	d514      	bpl.n	8009310 <_printf_i+0x1ac>
 80092e6:	07df      	lsls	r7, r3, #31
 80092e8:	bf44      	itt	mi
 80092ea:	f043 0320 	orrmi.w	r3, r3, #32
 80092ee:	6023      	strmi	r3, [r4, #0]
 80092f0:	b91e      	cbnz	r6, 80092fa <_printf_i+0x196>
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	f023 0320 	bic.w	r3, r3, #32
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	2310      	movs	r3, #16
 80092fc:	e7b0      	b.n	8009260 <_printf_i+0xfc>
 80092fe:	6823      	ldr	r3, [r4, #0]
 8009300:	f043 0320 	orr.w	r3, r3, #32
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	2378      	movs	r3, #120	; 0x78
 8009308:	4828      	ldr	r0, [pc, #160]	; (80093ac <_printf_i+0x248>)
 800930a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800930e:	e7e3      	b.n	80092d8 <_printf_i+0x174>
 8009310:	0659      	lsls	r1, r3, #25
 8009312:	bf48      	it	mi
 8009314:	b2b6      	uxthmi	r6, r6
 8009316:	e7e6      	b.n	80092e6 <_printf_i+0x182>
 8009318:	4615      	mov	r5, r2
 800931a:	e7bb      	b.n	8009294 <_printf_i+0x130>
 800931c:	682b      	ldr	r3, [r5, #0]
 800931e:	6826      	ldr	r6, [r4, #0]
 8009320:	6961      	ldr	r1, [r4, #20]
 8009322:	1d18      	adds	r0, r3, #4
 8009324:	6028      	str	r0, [r5, #0]
 8009326:	0635      	lsls	r5, r6, #24
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	d501      	bpl.n	8009330 <_printf_i+0x1cc>
 800932c:	6019      	str	r1, [r3, #0]
 800932e:	e002      	b.n	8009336 <_printf_i+0x1d2>
 8009330:	0670      	lsls	r0, r6, #25
 8009332:	d5fb      	bpl.n	800932c <_printf_i+0x1c8>
 8009334:	8019      	strh	r1, [r3, #0]
 8009336:	2300      	movs	r3, #0
 8009338:	6123      	str	r3, [r4, #16]
 800933a:	4615      	mov	r5, r2
 800933c:	e7ba      	b.n	80092b4 <_printf_i+0x150>
 800933e:	682b      	ldr	r3, [r5, #0]
 8009340:	1d1a      	adds	r2, r3, #4
 8009342:	602a      	str	r2, [r5, #0]
 8009344:	681d      	ldr	r5, [r3, #0]
 8009346:	6862      	ldr	r2, [r4, #4]
 8009348:	2100      	movs	r1, #0
 800934a:	4628      	mov	r0, r5
 800934c:	f7f6 ff48 	bl	80001e0 <memchr>
 8009350:	b108      	cbz	r0, 8009356 <_printf_i+0x1f2>
 8009352:	1b40      	subs	r0, r0, r5
 8009354:	6060      	str	r0, [r4, #4]
 8009356:	6863      	ldr	r3, [r4, #4]
 8009358:	6123      	str	r3, [r4, #16]
 800935a:	2300      	movs	r3, #0
 800935c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009360:	e7a8      	b.n	80092b4 <_printf_i+0x150>
 8009362:	6923      	ldr	r3, [r4, #16]
 8009364:	462a      	mov	r2, r5
 8009366:	4649      	mov	r1, r9
 8009368:	4640      	mov	r0, r8
 800936a:	47d0      	blx	sl
 800936c:	3001      	adds	r0, #1
 800936e:	d0ab      	beq.n	80092c8 <_printf_i+0x164>
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	079b      	lsls	r3, r3, #30
 8009374:	d413      	bmi.n	800939e <_printf_i+0x23a>
 8009376:	68e0      	ldr	r0, [r4, #12]
 8009378:	9b03      	ldr	r3, [sp, #12]
 800937a:	4298      	cmp	r0, r3
 800937c:	bfb8      	it	lt
 800937e:	4618      	movlt	r0, r3
 8009380:	e7a4      	b.n	80092cc <_printf_i+0x168>
 8009382:	2301      	movs	r3, #1
 8009384:	4632      	mov	r2, r6
 8009386:	4649      	mov	r1, r9
 8009388:	4640      	mov	r0, r8
 800938a:	47d0      	blx	sl
 800938c:	3001      	adds	r0, #1
 800938e:	d09b      	beq.n	80092c8 <_printf_i+0x164>
 8009390:	3501      	adds	r5, #1
 8009392:	68e3      	ldr	r3, [r4, #12]
 8009394:	9903      	ldr	r1, [sp, #12]
 8009396:	1a5b      	subs	r3, r3, r1
 8009398:	42ab      	cmp	r3, r5
 800939a:	dcf2      	bgt.n	8009382 <_printf_i+0x21e>
 800939c:	e7eb      	b.n	8009376 <_printf_i+0x212>
 800939e:	2500      	movs	r5, #0
 80093a0:	f104 0619 	add.w	r6, r4, #25
 80093a4:	e7f5      	b.n	8009392 <_printf_i+0x22e>
 80093a6:	bf00      	nop
 80093a8:	0800a22d 	.word	0x0800a22d
 80093ac:	0800a23e 	.word	0x0800a23e

080093b0 <__retarget_lock_acquire_recursive>:
 80093b0:	4770      	bx	lr

080093b2 <__retarget_lock_release_recursive>:
 80093b2:	4770      	bx	lr

080093b4 <memcpy>:
 80093b4:	440a      	add	r2, r1
 80093b6:	4291      	cmp	r1, r2
 80093b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80093bc:	d100      	bne.n	80093c0 <memcpy+0xc>
 80093be:	4770      	bx	lr
 80093c0:	b510      	push	{r4, lr}
 80093c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093ca:	4291      	cmp	r1, r2
 80093cc:	d1f9      	bne.n	80093c2 <memcpy+0xe>
 80093ce:	bd10      	pop	{r4, pc}

080093d0 <memmove>:
 80093d0:	4288      	cmp	r0, r1
 80093d2:	b510      	push	{r4, lr}
 80093d4:	eb01 0402 	add.w	r4, r1, r2
 80093d8:	d902      	bls.n	80093e0 <memmove+0x10>
 80093da:	4284      	cmp	r4, r0
 80093dc:	4623      	mov	r3, r4
 80093de:	d807      	bhi.n	80093f0 <memmove+0x20>
 80093e0:	1e43      	subs	r3, r0, #1
 80093e2:	42a1      	cmp	r1, r4
 80093e4:	d008      	beq.n	80093f8 <memmove+0x28>
 80093e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093ee:	e7f8      	b.n	80093e2 <memmove+0x12>
 80093f0:	4402      	add	r2, r0
 80093f2:	4601      	mov	r1, r0
 80093f4:	428a      	cmp	r2, r1
 80093f6:	d100      	bne.n	80093fa <memmove+0x2a>
 80093f8:	bd10      	pop	{r4, pc}
 80093fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009402:	e7f7      	b.n	80093f4 <memmove+0x24>

08009404 <_realloc_r>:
 8009404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009408:	4680      	mov	r8, r0
 800940a:	4614      	mov	r4, r2
 800940c:	460e      	mov	r6, r1
 800940e:	b921      	cbnz	r1, 800941a <_realloc_r+0x16>
 8009410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009414:	4611      	mov	r1, r2
 8009416:	f7ff bc11 	b.w	8008c3c <_malloc_r>
 800941a:	b92a      	cbnz	r2, 8009428 <_realloc_r+0x24>
 800941c:	f7ff fba2 	bl	8008b64 <_free_r>
 8009420:	4625      	mov	r5, r4
 8009422:	4628      	mov	r0, r5
 8009424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009428:	f000 f81b 	bl	8009462 <_malloc_usable_size_r>
 800942c:	4284      	cmp	r4, r0
 800942e:	4607      	mov	r7, r0
 8009430:	d802      	bhi.n	8009438 <_realloc_r+0x34>
 8009432:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009436:	d812      	bhi.n	800945e <_realloc_r+0x5a>
 8009438:	4621      	mov	r1, r4
 800943a:	4640      	mov	r0, r8
 800943c:	f7ff fbfe 	bl	8008c3c <_malloc_r>
 8009440:	4605      	mov	r5, r0
 8009442:	2800      	cmp	r0, #0
 8009444:	d0ed      	beq.n	8009422 <_realloc_r+0x1e>
 8009446:	42bc      	cmp	r4, r7
 8009448:	4622      	mov	r2, r4
 800944a:	4631      	mov	r1, r6
 800944c:	bf28      	it	cs
 800944e:	463a      	movcs	r2, r7
 8009450:	f7ff ffb0 	bl	80093b4 <memcpy>
 8009454:	4631      	mov	r1, r6
 8009456:	4640      	mov	r0, r8
 8009458:	f7ff fb84 	bl	8008b64 <_free_r>
 800945c:	e7e1      	b.n	8009422 <_realloc_r+0x1e>
 800945e:	4635      	mov	r5, r6
 8009460:	e7df      	b.n	8009422 <_realloc_r+0x1e>

08009462 <_malloc_usable_size_r>:
 8009462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009466:	1f18      	subs	r0, r3, #4
 8009468:	2b00      	cmp	r3, #0
 800946a:	bfbc      	itt	lt
 800946c:	580b      	ldrlt	r3, [r1, r0]
 800946e:	18c0      	addlt	r0, r0, r3
 8009470:	4770      	bx	lr
	...

08009474 <_init>:
 8009474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009476:	bf00      	nop
 8009478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800947a:	bc08      	pop	{r3}
 800947c:	469e      	mov	lr, r3
 800947e:	4770      	bx	lr

08009480 <_fini>:
 8009480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009482:	bf00      	nop
 8009484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009486:	bc08      	pop	{r3}
 8009488:	469e      	mov	lr, r3
 800948a:	4770      	bx	lr
